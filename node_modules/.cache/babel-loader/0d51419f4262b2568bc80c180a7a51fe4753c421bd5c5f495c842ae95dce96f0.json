{"ast":null,"code":"import React from 'react';\nimport clsx from 'clsx';\nimport { useChannelStateContext } from '../../context/ChannelStateContext';\nconst UnMemoizedWindow = props => {\n  const {\n    children,\n    thread: propThread\n  } = props;\n  const {\n    thread: contextThread\n  } = useChannelStateContext('Window');\n  return React.createElement(\"div\", {\n    className: clsx('str-chat__main-panel', {\n      'str-chat__main-panel--thread-open': contextThread || propThread\n    })\n  }, children);\n};\n/**\n * A UI component for conditionally displaying a Thread or Channel\n */\nexport const Window = React.memo(UnMemoizedWindow);","map":{"version":3,"names":["React","clsx","useChannelStateContext","UnMemoizedWindow","props","children","thread","propThread","contextThread","createElement","className","Window","memo"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/Window/Window.js"],"sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport { useChannelStateContext } from '../../context/ChannelStateContext';\nconst UnMemoizedWindow = (props) => {\n    const { children, thread: propThread } = props;\n    const { thread: contextThread } = useChannelStateContext('Window');\n    return (React.createElement(\"div\", { className: clsx('str-chat__main-panel', {\n            'str-chat__main-panel--thread-open': contextThread || propThread,\n        }) }, children));\n};\n/**\n * A UI component for conditionally displaying a Thread or Channel\n */\nexport const Window = React.memo(UnMemoizedWindow);\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,sBAAsB,QAAQ,mCAAmC;AAC1E,MAAMC,gBAAgB,GAAIC,KAAK,IAAK;EAChC,MAAM;IAAEC,QAAQ;IAAEC,MAAM,EAAEC;EAAW,CAAC,GAAGH,KAAK;EAC9C,MAAM;IAAEE,MAAM,EAAEE;EAAc,CAAC,GAAGN,sBAAsB,CAAC,QAAQ,CAAC;EAClE,OAAQF,KAAK,CAACS,aAAa,CAAC,KAAK,EAAE;IAAEC,SAAS,EAAET,IAAI,CAAC,sBAAsB,EAAE;MACrE,mCAAmC,EAAEO,aAAa,IAAID;IAC1D,CAAC;EAAE,CAAC,EAAEF,QAAQ,CAAC;AACvB,CAAC;AACD;AACA;AACA;AACA,OAAO,MAAMM,MAAM,GAAGX,KAAK,CAACY,IAAI,CAACT,gBAAgB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}