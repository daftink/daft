{"ast":null,"code":"import { useEffect } from 'react';\nimport uniqBy from 'lodash.uniqby';\nimport { getChannel } from '../../../utils/getChannel';\nimport { useChatContext } from '../../../context/ChatContext';\nexport const useChannelVisibleListener = (setChannels, customHandler) => {\n  const {\n    client\n  } = useChatContext('useChannelVisibleListener');\n  useEffect(() => {\n    const handleEvent = async event => {\n      if (customHandler && typeof customHandler === 'function') {\n        customHandler(setChannels, event);\n      } else if (event.type && event.channel_type && event.channel_id) {\n        const channel = await getChannel({\n          client,\n          id: event.channel_id,\n          type: event.channel_type\n        });\n        setChannels(channels => uniqBy([channel, ...channels], 'cid'));\n      }\n    };\n    client.on('channel.visible', handleEvent);\n    return () => {\n      client.off('channel.visible', handleEvent);\n    };\n  }, [client, customHandler, setChannels]);\n};","map":{"version":3,"names":["useEffect","uniqBy","getChannel","useChatContext","useChannelVisibleListener","setChannels","customHandler","client","handleEvent","event","type","channel_type","channel_id","channel","id","channels","on","off"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/ChannelList/hooks/useChannelVisibleListener.js"],"sourcesContent":["import { useEffect } from 'react';\nimport uniqBy from 'lodash.uniqby';\nimport { getChannel } from '../../../utils/getChannel';\nimport { useChatContext } from '../../../context/ChatContext';\nexport const useChannelVisibleListener = (setChannels, customHandler) => {\n    const { client } = useChatContext('useChannelVisibleListener');\n    useEffect(() => {\n        const handleEvent = async (event) => {\n            if (customHandler && typeof customHandler === 'function') {\n                customHandler(setChannels, event);\n            }\n            else if (event.type && event.channel_type && event.channel_id) {\n                const channel = await getChannel({\n                    client,\n                    id: event.channel_id,\n                    type: event.channel_type,\n                });\n                setChannels((channels) => uniqBy([channel, ...channels], 'cid'));\n            }\n        };\n        client.on('channel.visible', handleEvent);\n        return () => {\n            client.off('channel.visible', handleEvent);\n        };\n    }, [client, customHandler, setChannels]);\n};\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,OAAOC,MAAM,MAAM,eAAe;AAClC,SAASC,UAAU,QAAQ,2BAA2B;AACtD,SAASC,cAAc,QAAQ,8BAA8B;AAC7D,OAAO,MAAMC,yBAAyB,GAAGA,CAACC,WAAW,EAAEC,aAAa,KAAK;EACrE,MAAM;IAAEC;EAAO,CAAC,GAAGJ,cAAc,CAAC,2BAA2B,CAAC;EAC9DH,SAAS,CAAC,MAAM;IACZ,MAAMQ,WAAW,GAAG,MAAOC,KAAK,IAAK;MACjC,IAAIH,aAAa,IAAI,OAAOA,aAAa,KAAK,UAAU,EAAE;QACtDA,aAAa,CAACD,WAAW,EAAEI,KAAK,CAAC;MACrC,CAAC,MACI,IAAIA,KAAK,CAACC,IAAI,IAAID,KAAK,CAACE,YAAY,IAAIF,KAAK,CAACG,UAAU,EAAE;QAC3D,MAAMC,OAAO,GAAG,MAAMX,UAAU,CAAC;UAC7BK,MAAM;UACNO,EAAE,EAAEL,KAAK,CAACG,UAAU;UACpBF,IAAI,EAAED,KAAK,CAACE;QAChB,CAAC,CAAC;QACFN,WAAW,CAAEU,QAAQ,IAAKd,MAAM,CAAC,CAACY,OAAO,EAAE,GAAGE,QAAQ,CAAC,EAAE,KAAK,CAAC,CAAC;MACpE;IACJ,CAAC;IACDR,MAAM,CAACS,EAAE,CAAC,iBAAiB,EAAER,WAAW,CAAC;IACzC,OAAO,MAAM;MACTD,MAAM,CAACU,GAAG,CAAC,iBAAiB,EAAET,WAAW,CAAC;IAC9C,CAAC;EACL,CAAC,EAAE,CAACD,MAAM,EAAED,aAAa,EAAED,WAAW,CAAC,CAAC;AAC5C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}