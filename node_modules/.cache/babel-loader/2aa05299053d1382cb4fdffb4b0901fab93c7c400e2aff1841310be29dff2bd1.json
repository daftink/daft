{"ast":null,"code":"import _objectSpread from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"components\"];\nimport React, { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { Virtuoso } from 'react-virtuoso';\nimport { GiphyPreviewMessage as DefaultGiphyPreviewMessage } from './GiphyPreviewMessage';\nimport { useLastReadData } from './hooks';\nimport { useGiphyPreview, useMessageSetKey, useNewMessageNotification, usePrependedMessagesCount, useScrollToBottomOnNewMessage, useShouldForceScrollToBottom, useUnreadMessagesNotificationVirtualized } from './hooks/VirtualizedMessageList';\nimport { useMarkRead } from './hooks/useMarkRead';\nimport { MessageNotification as DefaultMessageNotification } from './MessageNotification';\nimport { MessageListNotifications as DefaultMessageListNotifications } from './MessageListNotifications';\nimport { MessageListMainPanel as DefaultMessageListMainPanel } from './MessageListMainPanel';\nimport { getGroupStyles, getLastReceived, processMessages } from './utils';\nimport { MessageSimple } from '../Message';\nimport { UnreadMessagesNotification as DefaultUnreadMessagesNotification } from './UnreadMessagesNotification';\nimport { calculateFirstItemIndex, calculateItemIndex, EmptyPlaceholder, Header, Item, makeItemsRenderedHandler, messageRenderer } from './VirtualizedMessageListComponents';\nimport { UnreadMessagesSeparator as DefaultUnreadMessagesSeparator } from '../MessageList';\nimport { DateSeparator as DefaultDateSeparator } from '../DateSeparator';\nimport { EventComponent as DefaultMessageSystem } from '../EventComponent';\nimport { DialogManagerProvider } from '../../context';\nimport { useChannelActionContext } from '../../context/ChannelActionContext';\nimport { useChannelStateContext } from '../../context/ChannelStateContext';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { VirtualizedMessageListContextProvider } from '../../context/VirtualizedMessageListContext';\nimport { DEFAULT_NEXT_CHANNEL_PAGE_SIZE } from '../../constants/limits';\nimport { useStableId } from '../UtilityComponents/useStableId';\nfunction captureResizeObserverExceededError(e) {\n  if (e.message === 'ResizeObserver loop completed with undelivered notifications.' || e.message === 'ResizeObserver loop limit exceeded') {\n    e.stopImmediatePropagation();\n  }\n}\nfunction useCaptureResizeObserverExceededError() {\n  useEffect(() => {\n    window.addEventListener('error', captureResizeObserverExceededError);\n    return () => {\n      window.removeEventListener('error', captureResizeObserverExceededError);\n    };\n  }, []);\n}\nfunction fractionalItemSize(element) {\n  return element.getBoundingClientRect().height;\n}\nfunction findMessageIndex(messages, id) {\n  return messages.findIndex(message => message.id === id);\n}\nfunction calculateInitialTopMostItemIndex(messages, highlightedMessageId) {\n  if (highlightedMessageId) {\n    const index = findMessageIndex(messages, highlightedMessageId);\n    if (index !== -1) {\n      return {\n        align: 'center',\n        index\n      };\n    }\n  }\n  return messages.length - 1;\n}\nconst VirtualizedMessageListWithContext = props => {\n  var _channelUnreadUiState;\n  const {\n    additionalMessageInputProps,\n    additionalVirtuosoProps = {},\n    channel,\n    channelUnreadUiState,\n    closeReactionSelectorOnClick,\n    customMessageActions,\n    customMessageRenderer,\n    defaultItemHeight,\n    disableDateSeparator = true,\n    formatDate,\n    groupStyles,\n    hasMoreNewer,\n    head,\n    hideDeletedMessages = false,\n    hideNewMessageSeparator = false,\n    highlightedMessageId,\n    jumpToLatestMessage,\n    loadingMore,\n    loadMore,\n    loadMoreNewer,\n    maxTimeBetweenGroupedMessages,\n    Message: MessageUIComponentFromProps,\n    messageActions,\n    messageLimit = DEFAULT_NEXT_CHANNEL_PAGE_SIZE,\n    messages,\n    notifications,\n    openThread,\n    // TODO: refactor to scrollSeekPlaceHolderConfiguration and components.ScrollSeekPlaceholder, like the Virtuoso Component\n    overscan = 0,\n    reactionDetailsSort,\n    read,\n    returnAllReadData = false,\n    reviewProcessedMessage,\n    scrollSeekPlaceHolder,\n    scrollToLatestMessageOnFocus = false,\n    separateGiphyPreview = false,\n    shouldGroupByUser = false,\n    showUnreadNotificationAlways,\n    sortReactionDetails,\n    sortReactions,\n    stickToBottomScrollBehavior = 'smooth',\n    suppressAutoscroll,\n    threadList\n  } = props;\n  const {\n      components: virtuosoComponentsFromProps\n    } = additionalVirtuosoProps,\n    overridingVirtuosoProps = _objectWithoutProperties(additionalVirtuosoProps, _excluded);\n  // Stops errors generated from react-virtuoso to bubble up\n  // to Sentry or other tracking tools.\n  useCaptureResizeObserverExceededError();\n  const {\n    DateSeparator = DefaultDateSeparator,\n    GiphyPreviewMessage = DefaultGiphyPreviewMessage,\n    MessageListMainPanel = DefaultMessageListMainPanel,\n    MessageListNotifications = DefaultMessageListNotifications,\n    MessageNotification = DefaultMessageNotification,\n    MessageSystem = DefaultMessageSystem,\n    TypingIndicator,\n    UnreadMessagesNotification = DefaultUnreadMessagesNotification,\n    UnreadMessagesSeparator = DefaultUnreadMessagesSeparator,\n    VirtualMessage: MessageUIComponentFromContext = MessageSimple\n  } = useComponentContext('VirtualizedMessageList');\n  const MessageUIComponent = MessageUIComponentFromProps || MessageUIComponentFromContext;\n  const {\n    client,\n    customClasses\n  } = useChatContext('VirtualizedMessageList');\n  const virtuoso = useRef(null);\n  const lastRead = useMemo(() => {\n    var _channel$lastRead;\n    return (_channel$lastRead = channel.lastRead) === null || _channel$lastRead === void 0 ? void 0 : _channel$lastRead.call(channel);\n  }, [channel]);\n  const {\n    show: showUnreadMessagesNotification,\n    toggleShowUnreadMessagesNotification\n  } = useUnreadMessagesNotificationVirtualized({\n    lastRead: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.last_read,\n    showAlways: !!showUnreadNotificationAlways,\n    unreadCount: (_channelUnreadUiState = channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages) !== null && _channelUnreadUiState !== void 0 ? _channelUnreadUiState : 0\n  });\n  const {\n    giphyPreviewMessage,\n    setGiphyPreviewMessage\n  } = useGiphyPreview(separateGiphyPreview);\n  const processedMessages = useMemo(() => {\n    if (typeof messages === 'undefined') {\n      return [];\n    }\n    if (disableDateSeparator && !hideDeletedMessages && hideNewMessageSeparator && !separateGiphyPreview) {\n      return messages;\n    }\n    return processMessages({\n      enableDateSeparator: !disableDateSeparator,\n      hideDeletedMessages,\n      hideNewMessageSeparator,\n      lastRead,\n      messages,\n      reviewProcessedMessage,\n      setGiphyPreviewMessage,\n      userId: client.userID || ''\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [disableDateSeparator, hideDeletedMessages, hideNewMessageSeparator, lastRead, messages, messages === null || messages === void 0 ? void 0 : messages.length, client.userID]);\n  // get the mapping of own messages to array of users who read them\n  const ownMessagesReadByOthers = useLastReadData({\n    messages: processedMessages,\n    read,\n    returnAllReadData,\n    userID: client.userID\n  });\n  const lastReceivedMessageId = useMemo(() => getLastReceived(processedMessages), [processedMessages]);\n  const groupStylesFn = groupStyles || getGroupStyles;\n  const messageGroupStyles = useMemo(() => processedMessages.reduce((acc, message, i) => {\n    const style = groupStylesFn(message, processedMessages[i - 1], processedMessages[i + 1], !shouldGroupByUser, maxTimeBetweenGroupedMessages);\n    if (style && message.id) acc[message.id] = style;\n    return acc;\n  }, {}),\n  // processedMessages were incorrectly rebuilt with a new object identity at some point, hence the .length usage\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [maxTimeBetweenGroupedMessages, processedMessages.length, shouldGroupByUser, groupStylesFn]);\n  const {\n    atBottom,\n    isMessageListScrolledToBottom,\n    newMessagesNotification,\n    setIsMessageListScrolledToBottom,\n    setNewMessagesNotification\n  } = useNewMessageNotification(processedMessages, client.userID, hasMoreNewer);\n  useMarkRead({\n    isMessageListScrolledToBottom,\n    messageListIsThread: !!threadList,\n    wasMarkedUnread: !!(channelUnreadUiState !== null && channelUnreadUiState !== void 0 && channelUnreadUiState.first_unread_message_id)\n  });\n  const scrollToBottom = useCallback(async () => {\n    if (hasMoreNewer) {\n      await jumpToLatestMessage();\n      return;\n    }\n    if (virtuoso.current) {\n      virtuoso.current.scrollToIndex(processedMessages.length - 1);\n    }\n    setNewMessagesNotification(false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [virtuoso, processedMessages, setNewMessagesNotification,\n  // processedMessages were incorrectly rebuilt with a new object identity at some point, hence the .length usage\n  processedMessages.length, hasMoreNewer, jumpToLatestMessage]);\n  useScrollToBottomOnNewMessage({\n    messages,\n    scrollToBottom,\n    scrollToLatestMessageOnFocus\n  });\n  const numItemsPrepended = usePrependedMessagesCount(processedMessages, !disableDateSeparator);\n  const {\n    messageSetKey\n  } = useMessageSetKey({\n    messages\n  });\n  const shouldForceScrollToBottom = useShouldForceScrollToBottom(processedMessages, client.userID);\n  const handleItemsRendered = useMemo(() => makeItemsRenderedHandler([toggleShowUnreadMessagesNotification], processedMessages), [processedMessages, toggleShowUnreadMessagesNotification]);\n  const followOutput = isAtBottom => {\n    if (hasMoreNewer || suppressAutoscroll) {\n      return false;\n    }\n    if (shouldForceScrollToBottom()) {\n      return isAtBottom ? stickToBottomScrollBehavior : 'auto';\n    }\n    // a message from another user has been received - don't scroll to bottom unless already there\n    return isAtBottom ? stickToBottomScrollBehavior : false;\n  };\n  const computeItemKey = useCallback((index, _, _ref) => {\n    let {\n      numItemsPrepended,\n      processedMessages\n    } = _ref;\n    return processedMessages[calculateItemIndex(index, numItemsPrepended)].id;\n  }, []);\n  const atBottomStateChange = isAtBottom => {\n    atBottom.current = isAtBottom;\n    setIsMessageListScrolledToBottom(isAtBottom);\n    if (isAtBottom) {\n      loadMoreNewer === null || loadMoreNewer === void 0 || loadMoreNewer(messageLimit);\n      setNewMessagesNotification === null || setNewMessagesNotification === void 0 || setNewMessagesNotification(false);\n    }\n  };\n  const atTopStateChange = isAtTop => {\n    if (isAtTop) {\n      loadMore === null || loadMore === void 0 || loadMore(messageLimit);\n    }\n  };\n  useEffect(() => {\n    let scrollTimeout;\n    if (highlightedMessageId) {\n      const index = findMessageIndex(processedMessages, highlightedMessageId);\n      if (index !== -1) {\n        scrollTimeout = setTimeout(() => {\n          var _virtuoso$current;\n          (_virtuoso$current = virtuoso.current) === null || _virtuoso$current === void 0 || _virtuoso$current.scrollToIndex({\n            align: 'center',\n            index\n          });\n        }, 0);\n      }\n    }\n    return () => {\n      clearTimeout(scrollTimeout);\n    };\n  }, [highlightedMessageId, processedMessages]);\n  const id = useStableId();\n  if (!processedMessages) return null;\n  const dialogManagerId = threadList ? \"virtualized-message-list-dialog-manager-thread-\".concat(id) : \"virtualized-message-list-dialog-manager-\".concat(id);\n  return React.createElement(VirtualizedMessageListContextProvider, {\n    value: {\n      scrollToBottom\n    }\n  }, React.createElement(MessageListMainPanel, null, React.createElement(DialogManagerProvider, {\n    id: dialogManagerId\n  }, !threadList && showUnreadMessagesNotification && React.createElement(UnreadMessagesNotification, {\n    unreadCount: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages\n  }), React.createElement(\"div\", {\n    className: (customClasses === null || customClasses === void 0 ? void 0 : customClasses.virtualizedMessageList) || 'str-chat__virtual-list'\n  }, React.createElement(Virtuoso, _objectSpread(_objectSpread(_objectSpread({\n    atBottomStateChange: atBottomStateChange,\n    atBottomThreshold: 100,\n    atTopStateChange: atTopStateChange,\n    atTopThreshold: 100,\n    className: 'str-chat__message-list-scroll',\n    components: _objectSpread({\n      EmptyPlaceholder,\n      Header,\n      Item\n    }, virtuosoComponentsFromProps),\n    computeItemKey: computeItemKey,\n    context: {\n      additionalMessageInputProps,\n      closeReactionSelectorOnClick,\n      customClasses,\n      customMessageActions,\n      customMessageRenderer,\n      DateSeparator,\n      firstUnreadMessageId: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.first_unread_message_id,\n      formatDate,\n      head,\n      lastReadDate: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.last_read,\n      lastReadMessageId: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.last_read_message_id,\n      lastReceivedMessageId,\n      loadingMore,\n      Message: MessageUIComponent,\n      messageActions,\n      messageGroupStyles,\n      MessageSystem,\n      numItemsPrepended,\n      openThread,\n      ownMessagesReadByOthers,\n      processedMessages,\n      reactionDetailsSort,\n      shouldGroupByUser,\n      sortReactionDetails,\n      sortReactions,\n      threadList,\n      unreadMessageCount: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages,\n      UnreadMessagesSeparator,\n      virtuosoRef: virtuoso\n    },\n    firstItemIndex: calculateFirstItemIndex(numItemsPrepended),\n    followOutput: followOutput,\n    increaseViewportBy: {\n      bottom: 200,\n      top: 0\n    },\n    initialTopMostItemIndex: calculateInitialTopMostItemIndex(processedMessages, highlightedMessageId),\n    itemContent: messageRenderer,\n    itemSize: fractionalItemSize,\n    itemsRendered: handleItemsRendered,\n    key: messageSetKey,\n    overscan: overscan,\n    ref: virtuoso,\n    style: {\n      overflowX: 'hidden'\n    },\n    totalCount: processedMessages.length\n  }, overridingVirtuosoProps), scrollSeekPlaceHolder ? {\n    scrollSeek: scrollSeekPlaceHolder\n  } : {}), defaultItemHeight ? {\n    defaultItemHeight\n  } : {})))), TypingIndicator && React.createElement(TypingIndicator, null)), React.createElement(MessageListNotifications, {\n    hasNewMessages: newMessagesNotification,\n    isMessageListScrolledToBottom: isMessageListScrolledToBottom,\n    isNotAtLatestMessageSet: hasMoreNewer,\n    MessageNotification: MessageNotification,\n    notifications: notifications,\n    scrollToBottom: scrollToBottom,\n    threadList: threadList,\n    unreadCount: threadList ? undefined : channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages\n  }), giphyPreviewMessage && React.createElement(GiphyPreviewMessage, {\n    message: giphyPreviewMessage\n  }));\n};\n/**\n * The VirtualizedMessageList component renders a list of messages in a virtualized list.\n * It is a consumer of the React contexts set in [Channel](https://github.com/GetStream/stream-chat-react/blob/master/src/components/Channel/Channel.tsx).\n */\nexport function VirtualizedMessageList(props) {\n  var _props$channelUnreadU;\n  const {\n    jumpToLatestMessage,\n    loadMore,\n    loadMoreNewer\n  } = useChannelActionContext('VirtualizedMessageList');\n  const {\n    channel,\n    channelUnreadUiState,\n    hasMore,\n    hasMoreNewer,\n    highlightedMessageId,\n    loadingMore,\n    loadingMoreNewer,\n    messages: contextMessages,\n    notifications,\n    read,\n    suppressAutoscroll\n  } = useChannelStateContext('VirtualizedMessageList');\n  const messages = props.messages || contextMessages;\n  return React.createElement(VirtualizedMessageListWithContext, _objectSpread({\n    channel: channel,\n    channelUnreadUiState: (_props$channelUnreadU = props.channelUnreadUiState) !== null && _props$channelUnreadU !== void 0 ? _props$channelUnreadU : channelUnreadUiState,\n    hasMore: !!hasMore,\n    hasMoreNewer: !!hasMoreNewer,\n    highlightedMessageId: highlightedMessageId,\n    jumpToLatestMessage: jumpToLatestMessage,\n    loadingMore: !!loadingMore,\n    loadingMoreNewer: !!loadingMoreNewer,\n    loadMore: loadMore,\n    loadMoreNewer: loadMoreNewer,\n    messages: messages,\n    notifications: notifications,\n    read: read,\n    suppressAutoscroll: suppressAutoscroll\n  }, props));\n}","map":{"version":3,"names":["React","useCallback","useEffect","useMemo","useRef","Virtuoso","GiphyPreviewMessage","DefaultGiphyPreviewMessage","useLastReadData","useGiphyPreview","useMessageSetKey","useNewMessageNotification","usePrependedMessagesCount","useScrollToBottomOnNewMessage","useShouldForceScrollToBottom","useUnreadMessagesNotificationVirtualized","useMarkRead","MessageNotification","DefaultMessageNotification","MessageListNotifications","DefaultMessageListNotifications","MessageListMainPanel","DefaultMessageListMainPanel","getGroupStyles","getLastReceived","processMessages","MessageSimple","UnreadMessagesNotification","DefaultUnreadMessagesNotification","calculateFirstItemIndex","calculateItemIndex","EmptyPlaceholder","Header","Item","makeItemsRenderedHandler","messageRenderer","UnreadMessagesSeparator","DefaultUnreadMessagesSeparator","DateSeparator","DefaultDateSeparator","EventComponent","DefaultMessageSystem","DialogManagerProvider","useChannelActionContext","useChannelStateContext","useChatContext","useComponentContext","VirtualizedMessageListContextProvider","DEFAULT_NEXT_CHANNEL_PAGE_SIZE","useStableId","captureResizeObserverExceededError","e","message","stopImmediatePropagation","useCaptureResizeObserverExceededError","window","addEventListener","removeEventListener","fractionalItemSize","element","getBoundingClientRect","height","findMessageIndex","messages","id","findIndex","calculateInitialTopMostItemIndex","highlightedMessageId","index","align","length","VirtualizedMessageListWithContext","props","_channelUnreadUiState","additionalMessageInputProps","additionalVirtuosoProps","channel","channelUnreadUiState","closeReactionSelectorOnClick","customMessageActions","customMessageRenderer","defaultItemHeight","disableDateSeparator","formatDate","groupStyles","hasMoreNewer","head","hideDeletedMessages","hideNewMessageSeparator","jumpToLatestMessage","loadingMore","loadMore","loadMoreNewer","maxTimeBetweenGroupedMessages","Message","MessageUIComponentFromProps","messageActions","messageLimit","notifications","openThread","overscan","reactionDetailsSort","read","returnAllReadData","reviewProcessedMessage","scrollSeekPlaceHolder","scrollToLatestMessageOnFocus","separateGiphyPreview","shouldGroupByUser","showUnreadNotificationAlways","sortReactionDetails","sortReactions","stickToBottomScrollBehavior","suppressAutoscroll","threadList","components","virtuosoComponentsFromProps","overridingVirtuosoProps","_objectWithoutProperties","_excluded","MessageSystem","TypingIndicator","VirtualMessage","MessageUIComponentFromContext","MessageUIComponent","client","customClasses","virtuoso","lastRead","_channel$lastRead","call","show","showUnreadMessagesNotification","toggleShowUnreadMessagesNotification","last_read","showAlways","unreadCount","unread_messages","giphyPreviewMessage","setGiphyPreviewMessage","processedMessages","enableDateSeparator","userId","userID","ownMessagesReadByOthers","lastReceivedMessageId","groupStylesFn","messageGroupStyles","reduce","acc","i","style","atBottom","isMessageListScrolledToBottom","newMessagesNotification","setIsMessageListScrolledToBottom","setNewMessagesNotification","messageListIsThread","wasMarkedUnread","first_unread_message_id","scrollToBottom","current","scrollToIndex","numItemsPrepended","messageSetKey","shouldForceScrollToBottom","handleItemsRendered","followOutput","isAtBottom","computeItemKey","_","_ref","atBottomStateChange","atTopStateChange","isAtTop","scrollTimeout","setTimeout","_virtuoso$current","clearTimeout","dialogManagerId","concat","createElement","value","className","virtualizedMessageList","_objectSpread","atBottomThreshold","atTopThreshold","context","firstUnreadMessageId","lastReadDate","lastReadMessageId","last_read_message_id","unreadMessageCount","virtuosoRef","firstItemIndex","increaseViewportBy","bottom","top","initialTopMostItemIndex","itemContent","itemSize","itemsRendered","key","ref","overflowX","totalCount","scrollSeek","hasNewMessages","isNotAtLatestMessageSet","undefined","VirtualizedMessageList","_props$channelUnreadU","hasMore","loadingMoreNewer","contextMessages"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/MessageList/VirtualizedMessageList.js"],"sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { Virtuoso } from 'react-virtuoso';\nimport { GiphyPreviewMessage as DefaultGiphyPreviewMessage } from './GiphyPreviewMessage';\nimport { useLastReadData } from './hooks';\nimport { useGiphyPreview, useMessageSetKey, useNewMessageNotification, usePrependedMessagesCount, useScrollToBottomOnNewMessage, useShouldForceScrollToBottom, useUnreadMessagesNotificationVirtualized, } from './hooks/VirtualizedMessageList';\nimport { useMarkRead } from './hooks/useMarkRead';\nimport { MessageNotification as DefaultMessageNotification } from './MessageNotification';\nimport { MessageListNotifications as DefaultMessageListNotifications } from './MessageListNotifications';\nimport { MessageListMainPanel as DefaultMessageListMainPanel } from './MessageListMainPanel';\nimport { getGroupStyles, getLastReceived, processMessages } from './utils';\nimport { MessageSimple } from '../Message';\nimport { UnreadMessagesNotification as DefaultUnreadMessagesNotification } from './UnreadMessagesNotification';\nimport { calculateFirstItemIndex, calculateItemIndex, EmptyPlaceholder, Header, Item, makeItemsRenderedHandler, messageRenderer, } from './VirtualizedMessageListComponents';\nimport { UnreadMessagesSeparator as DefaultUnreadMessagesSeparator } from '../MessageList';\nimport { DateSeparator as DefaultDateSeparator } from '../DateSeparator';\nimport { EventComponent as DefaultMessageSystem } from '../EventComponent';\nimport { DialogManagerProvider } from '../../context';\nimport { useChannelActionContext } from '../../context/ChannelActionContext';\nimport { useChannelStateContext } from '../../context/ChannelStateContext';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { VirtualizedMessageListContextProvider } from '../../context/VirtualizedMessageListContext';\nimport { DEFAULT_NEXT_CHANNEL_PAGE_SIZE } from '../../constants/limits';\nimport { useStableId } from '../UtilityComponents/useStableId';\nfunction captureResizeObserverExceededError(e) {\n    if (e.message === 'ResizeObserver loop completed with undelivered notifications.' ||\n        e.message === 'ResizeObserver loop limit exceeded') {\n        e.stopImmediatePropagation();\n    }\n}\nfunction useCaptureResizeObserverExceededError() {\n    useEffect(() => {\n        window.addEventListener('error', captureResizeObserverExceededError);\n        return () => {\n            window.removeEventListener('error', captureResizeObserverExceededError);\n        };\n    }, []);\n}\nfunction fractionalItemSize(element) {\n    return element.getBoundingClientRect().height;\n}\nfunction findMessageIndex(messages, id) {\n    return messages.findIndex((message) => message.id === id);\n}\nfunction calculateInitialTopMostItemIndex(messages, highlightedMessageId) {\n    if (highlightedMessageId) {\n        const index = findMessageIndex(messages, highlightedMessageId);\n        if (index !== -1) {\n            return { align: 'center', index };\n        }\n    }\n    return messages.length - 1;\n}\nconst VirtualizedMessageListWithContext = (props) => {\n    const { additionalMessageInputProps, additionalVirtuosoProps = {}, channel, channelUnreadUiState, closeReactionSelectorOnClick, customMessageActions, customMessageRenderer, defaultItemHeight, disableDateSeparator = true, formatDate, groupStyles, hasMoreNewer, head, hideDeletedMessages = false, hideNewMessageSeparator = false, highlightedMessageId, jumpToLatestMessage, loadingMore, loadMore, loadMoreNewer, maxTimeBetweenGroupedMessages, Message: MessageUIComponentFromProps, messageActions, messageLimit = DEFAULT_NEXT_CHANNEL_PAGE_SIZE, messages, notifications, openThread, \n    // TODO: refactor to scrollSeekPlaceHolderConfiguration and components.ScrollSeekPlaceholder, like the Virtuoso Component\n    overscan = 0, reactionDetailsSort, read, returnAllReadData = false, reviewProcessedMessage, scrollSeekPlaceHolder, scrollToLatestMessageOnFocus = false, separateGiphyPreview = false, shouldGroupByUser = false, showUnreadNotificationAlways, sortReactionDetails, sortReactions, stickToBottomScrollBehavior = 'smooth', suppressAutoscroll, threadList, } = props;\n    const { components: virtuosoComponentsFromProps, ...overridingVirtuosoProps } = additionalVirtuosoProps;\n    // Stops errors generated from react-virtuoso to bubble up\n    // to Sentry or other tracking tools.\n    useCaptureResizeObserverExceededError();\n    const { DateSeparator = DefaultDateSeparator, GiphyPreviewMessage = DefaultGiphyPreviewMessage, MessageListMainPanel = DefaultMessageListMainPanel, MessageListNotifications = DefaultMessageListNotifications, MessageNotification = DefaultMessageNotification, MessageSystem = DefaultMessageSystem, TypingIndicator, UnreadMessagesNotification = DefaultUnreadMessagesNotification, UnreadMessagesSeparator = DefaultUnreadMessagesSeparator, VirtualMessage: MessageUIComponentFromContext = MessageSimple, } = useComponentContext('VirtualizedMessageList');\n    const MessageUIComponent = MessageUIComponentFromProps || MessageUIComponentFromContext;\n    const { client, customClasses } = useChatContext('VirtualizedMessageList');\n    const virtuoso = useRef(null);\n    const lastRead = useMemo(() => channel.lastRead?.(), [channel]);\n    const { show: showUnreadMessagesNotification, toggleShowUnreadMessagesNotification } = useUnreadMessagesNotificationVirtualized({\n        lastRead: channelUnreadUiState?.last_read,\n        showAlways: !!showUnreadNotificationAlways,\n        unreadCount: channelUnreadUiState?.unread_messages ?? 0,\n    });\n    const { giphyPreviewMessage, setGiphyPreviewMessage } = useGiphyPreview(separateGiphyPreview);\n    const processedMessages = useMemo(() => {\n        if (typeof messages === 'undefined') {\n            return [];\n        }\n        if (disableDateSeparator &&\n            !hideDeletedMessages &&\n            hideNewMessageSeparator &&\n            !separateGiphyPreview) {\n            return messages;\n        }\n        return processMessages({\n            enableDateSeparator: !disableDateSeparator,\n            hideDeletedMessages,\n            hideNewMessageSeparator,\n            lastRead,\n            messages,\n            reviewProcessedMessage,\n            setGiphyPreviewMessage,\n            userId: client.userID || '',\n        });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        disableDateSeparator,\n        hideDeletedMessages,\n        hideNewMessageSeparator,\n        lastRead,\n        messages,\n        messages?.length,\n        client.userID,\n    ]);\n    // get the mapping of own messages to array of users who read them\n    const ownMessagesReadByOthers = useLastReadData({\n        messages: processedMessages,\n        read,\n        returnAllReadData,\n        userID: client.userID,\n    });\n    const lastReceivedMessageId = useMemo(() => getLastReceived(processedMessages), [processedMessages]);\n    const groupStylesFn = groupStyles || getGroupStyles;\n    const messageGroupStyles = useMemo(() => processedMessages.reduce((acc, message, i) => {\n        const style = groupStylesFn(message, processedMessages[i - 1], processedMessages[i + 1], !shouldGroupByUser, maxTimeBetweenGroupedMessages);\n        if (style && message.id)\n            acc[message.id] = style;\n        return acc;\n    }, {}), \n    // processedMessages were incorrectly rebuilt with a new object identity at some point, hence the .length usage\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        maxTimeBetweenGroupedMessages,\n        processedMessages.length,\n        shouldGroupByUser,\n        groupStylesFn,\n    ]);\n    const { atBottom, isMessageListScrolledToBottom, newMessagesNotification, setIsMessageListScrolledToBottom, setNewMessagesNotification, } = useNewMessageNotification(processedMessages, client.userID, hasMoreNewer);\n    useMarkRead({\n        isMessageListScrolledToBottom,\n        messageListIsThread: !!threadList,\n        wasMarkedUnread: !!channelUnreadUiState?.first_unread_message_id,\n    });\n    const scrollToBottom = useCallback(async () => {\n        if (hasMoreNewer) {\n            await jumpToLatestMessage();\n            return;\n        }\n        if (virtuoso.current) {\n            virtuoso.current.scrollToIndex(processedMessages.length - 1);\n        }\n        setNewMessagesNotification(false);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        virtuoso,\n        processedMessages,\n        setNewMessagesNotification,\n        // processedMessages were incorrectly rebuilt with a new object identity at some point, hence the .length usage\n        processedMessages.length,\n        hasMoreNewer,\n        jumpToLatestMessage,\n    ]);\n    useScrollToBottomOnNewMessage({\n        messages,\n        scrollToBottom,\n        scrollToLatestMessageOnFocus,\n    });\n    const numItemsPrepended = usePrependedMessagesCount(processedMessages, !disableDateSeparator);\n    const { messageSetKey } = useMessageSetKey({ messages });\n    const shouldForceScrollToBottom = useShouldForceScrollToBottom(processedMessages, client.userID);\n    const handleItemsRendered = useMemo(() => makeItemsRenderedHandler([toggleShowUnreadMessagesNotification], processedMessages), [processedMessages, toggleShowUnreadMessagesNotification]);\n    const followOutput = (isAtBottom) => {\n        if (hasMoreNewer || suppressAutoscroll) {\n            return false;\n        }\n        if (shouldForceScrollToBottom()) {\n            return isAtBottom ? stickToBottomScrollBehavior : 'auto';\n        }\n        // a message from another user has been received - don't scroll to bottom unless already there\n        return isAtBottom ? stickToBottomScrollBehavior : false;\n    };\n    const computeItemKey = useCallback((index, _, { numItemsPrepended, processedMessages }) => processedMessages[calculateItemIndex(index, numItemsPrepended)].id, []);\n    const atBottomStateChange = (isAtBottom) => {\n        atBottom.current = isAtBottom;\n        setIsMessageListScrolledToBottom(isAtBottom);\n        if (isAtBottom) {\n            loadMoreNewer?.(messageLimit);\n            setNewMessagesNotification?.(false);\n        }\n    };\n    const atTopStateChange = (isAtTop) => {\n        if (isAtTop) {\n            loadMore?.(messageLimit);\n        }\n    };\n    useEffect(() => {\n        let scrollTimeout;\n        if (highlightedMessageId) {\n            const index = findMessageIndex(processedMessages, highlightedMessageId);\n            if (index !== -1) {\n                scrollTimeout = setTimeout(() => {\n                    virtuoso.current?.scrollToIndex({ align: 'center', index });\n                }, 0);\n            }\n        }\n        return () => {\n            clearTimeout(scrollTimeout);\n        };\n    }, [highlightedMessageId, processedMessages]);\n    const id = useStableId();\n    if (!processedMessages)\n        return null;\n    const dialogManagerId = threadList\n        ? `virtualized-message-list-dialog-manager-thread-${id}`\n        : `virtualized-message-list-dialog-manager-${id}`;\n    return (React.createElement(VirtualizedMessageListContextProvider, { value: { scrollToBottom } },\n        React.createElement(MessageListMainPanel, null,\n            React.createElement(DialogManagerProvider, { id: dialogManagerId },\n                !threadList && showUnreadMessagesNotification && (React.createElement(UnreadMessagesNotification, { unreadCount: channelUnreadUiState?.unread_messages })),\n                React.createElement(\"div\", { className: customClasses?.virtualizedMessageList || 'str-chat__virtual-list' },\n                    React.createElement(Virtuoso, { atBottomStateChange: atBottomStateChange, atBottomThreshold: 100, atTopStateChange: atTopStateChange, atTopThreshold: 100, className: 'str-chat__message-list-scroll', components: {\n                            EmptyPlaceholder,\n                            Header,\n                            Item,\n                            ...virtuosoComponentsFromProps,\n                        }, computeItemKey: computeItemKey, context: {\n                            additionalMessageInputProps,\n                            closeReactionSelectorOnClick,\n                            customClasses,\n                            customMessageActions,\n                            customMessageRenderer,\n                            DateSeparator,\n                            firstUnreadMessageId: channelUnreadUiState?.first_unread_message_id,\n                            formatDate,\n                            head,\n                            lastReadDate: channelUnreadUiState?.last_read,\n                            lastReadMessageId: channelUnreadUiState?.last_read_message_id,\n                            lastReceivedMessageId,\n                            loadingMore,\n                            Message: MessageUIComponent,\n                            messageActions,\n                            messageGroupStyles,\n                            MessageSystem,\n                            numItemsPrepended,\n                            openThread,\n                            ownMessagesReadByOthers,\n                            processedMessages,\n                            reactionDetailsSort,\n                            shouldGroupByUser,\n                            sortReactionDetails,\n                            sortReactions,\n                            threadList,\n                            unreadMessageCount: channelUnreadUiState?.unread_messages,\n                            UnreadMessagesSeparator,\n                            virtuosoRef: virtuoso,\n                        }, firstItemIndex: calculateFirstItemIndex(numItemsPrepended), followOutput: followOutput, increaseViewportBy: { bottom: 200, top: 0 }, initialTopMostItemIndex: calculateInitialTopMostItemIndex(processedMessages, highlightedMessageId), itemContent: messageRenderer, itemSize: fractionalItemSize, itemsRendered: handleItemsRendered, key: messageSetKey, overscan: overscan, ref: virtuoso, style: { overflowX: 'hidden' }, totalCount: processedMessages.length, ...overridingVirtuosoProps, ...(scrollSeekPlaceHolder ? { scrollSeek: scrollSeekPlaceHolder } : {}), ...(defaultItemHeight ? { defaultItemHeight } : {}) }))),\n            TypingIndicator && React.createElement(TypingIndicator, null)),\n        React.createElement(MessageListNotifications, { hasNewMessages: newMessagesNotification, isMessageListScrolledToBottom: isMessageListScrolledToBottom, isNotAtLatestMessageSet: hasMoreNewer, MessageNotification: MessageNotification, notifications: notifications, scrollToBottom: scrollToBottom, threadList: threadList, unreadCount: threadList ? undefined : channelUnreadUiState?.unread_messages }),\n        giphyPreviewMessage && React.createElement(GiphyPreviewMessage, { message: giphyPreviewMessage })));\n};\n/**\n * The VirtualizedMessageList component renders a list of messages in a virtualized list.\n * It is a consumer of the React contexts set in [Channel](https://github.com/GetStream/stream-chat-react/blob/master/src/components/Channel/Channel.tsx).\n */\nexport function VirtualizedMessageList(props) {\n    const { jumpToLatestMessage, loadMore, loadMoreNewer } = useChannelActionContext('VirtualizedMessageList');\n    const { channel, channelUnreadUiState, hasMore, hasMoreNewer, highlightedMessageId, loadingMore, loadingMoreNewer, messages: contextMessages, notifications, read, suppressAutoscroll, } = useChannelStateContext('VirtualizedMessageList');\n    const messages = props.messages || contextMessages;\n    return (React.createElement(VirtualizedMessageListWithContext, { channel: channel, channelUnreadUiState: props.channelUnreadUiState ?? channelUnreadUiState, hasMore: !!hasMore, hasMoreNewer: !!hasMoreNewer, highlightedMessageId: highlightedMessageId, jumpToLatestMessage: jumpToLatestMessage, loadingMore: !!loadingMore, loadingMoreNewer: !!loadingMoreNewer, loadMore: loadMore, loadMoreNewer: loadMoreNewer, messages: messages, notifications: notifications, read: read, suppressAutoscroll: suppressAutoscroll, ...props }));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}