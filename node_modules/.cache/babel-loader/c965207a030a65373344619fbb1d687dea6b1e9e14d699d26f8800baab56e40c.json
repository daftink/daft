{"ast":null,"code":"import _objectSpread from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport debounce from 'lodash.debounce';\nimport uniqBy from 'lodash.uniqby';\nimport { isChannel } from '../utils';\nimport { useChatContext } from '../../../context/ChatContext';\nexport const useChannelSearch = _ref => {\n  let {\n    channelType = 'messaging',\n    clearSearchOnClickOutside = true,\n    disabled = false,\n    onSearch: onSearchCallback,\n    onSearchExit,\n    onSelectResult,\n    searchDebounceIntervalMs = 300,\n    searchForChannels = false,\n    searchForUsers = true,\n    searchFunction,\n    searchQueryParams,\n    setChannels\n  } = _ref;\n  const {\n    client,\n    setActiveChannel\n  } = useChatContext('useChannelSearch');\n  const [inputIsFocused, setInputIsFocused] = useState(false);\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState([]);\n  const [searching, setSearching] = useState(false);\n  const searchQueryPromiseInProgress = useRef(false);\n  const shouldIgnoreQueryResults = useRef(false);\n  const inputRef = useRef(null);\n  const searchBarRef = useRef(null);\n  const clearState = useCallback(() => {\n    setQuery('');\n    setResults([]);\n    setSearching(false);\n    shouldIgnoreQueryResults.current = searchQueryPromiseInProgress.current;\n  }, []);\n  const activateSearch = useCallback(() => {\n    setInputIsFocused(true);\n  }, []);\n  const exitSearch = useCallback(() => {\n    var _inputRef$current;\n    setInputIsFocused(false);\n    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 || _inputRef$current.blur();\n    clearState();\n    onSearchExit === null || onSearchExit === void 0 || onSearchExit();\n  }, [clearState, onSearchExit]);\n  useEffect(() => {\n    if (disabled) return;\n    const clickListener = event => {\n      var _searchBarRef$current;\n      if (!(event.target instanceof HTMLElement)) return;\n      const isInputClick = (_searchBarRef$current = searchBarRef.current) === null || _searchBarRef$current === void 0 ? void 0 : _searchBarRef$current.contains(event.target);\n      if (isInputClick) return;\n      if (inputIsFocused && !query || clearSearchOnClickOutside) {\n        exitSearch();\n      }\n    };\n    document.addEventListener('click', clickListener);\n    return () => document.removeEventListener('click', clickListener);\n  }, [disabled, inputIsFocused, query, exitSearch, clearSearchOnClickOutside]);\n  useEffect(() => {\n    if (!inputRef.current || disabled) return;\n    const handleKeyDown = event => {\n      if (event.key === 'Escape') return exitSearch();\n    };\n    inputRef.current.addEventListener('keydown', handleKeyDown);\n    return () => {\n      var _inputRef$current2;\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 || _inputRef$current2.removeEventListener('keydown', handleKeyDown);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [disabled]);\n  const selectResult = useCallback(async result => {\n    if (!client.userID) return;\n    if (onSelectResult) {\n      await onSelectResult({\n        setQuery,\n        setResults,\n        setSearching\n      }, result);\n      return;\n    }\n    let selectedChannel;\n    if (isChannel(result)) {\n      setActiveChannel(result);\n      selectedChannel = result;\n    } else {\n      const newChannel = client.channel(channelType, {\n        members: [client.userID, result.id]\n      });\n      await newChannel.watch();\n      setActiveChannel(newChannel);\n      selectedChannel = newChannel;\n    }\n    setChannels === null || setChannels === void 0 || setChannels(channels => uniqBy([selectedChannel, ...channels], 'cid'));\n    if (clearSearchOnClickOutside) {\n      exitSearch();\n    }\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [clearSearchOnClickOutside, client, exitSearch, onSelectResult, setActiveChannel, setChannels]);\n  const getChannels = useCallback(async text => {\n    if (!searchForChannels && !searchForUsers) return;\n    let results = [];\n    const promises = [];\n    try {\n      if (searchForChannels) {\n        var _searchQueryParams$ch, _searchQueryParams$ch2, _searchQueryParams$ch3;\n        promises.push(client.queryChannels(_objectSpread({\n          members: {\n            $in: [client.userID]\n          },\n          name: {\n            $autocomplete: text\n          }\n        }, searchQueryParams === null || searchQueryParams === void 0 || (_searchQueryParams$ch = searchQueryParams.channelFilters) === null || _searchQueryParams$ch === void 0 ? void 0 : _searchQueryParams$ch.filters), (searchQueryParams === null || searchQueryParams === void 0 || (_searchQueryParams$ch2 = searchQueryParams.channelFilters) === null || _searchQueryParams$ch2 === void 0 ? void 0 : _searchQueryParams$ch2.sort) || {}, _objectSpread({\n          limit: 5\n        }, searchQueryParams === null || searchQueryParams === void 0 || (_searchQueryParams$ch3 = searchQueryParams.channelFilters) === null || _searchQueryParams$ch3 === void 0 ? void 0 : _searchQueryParams$ch3.options)));\n      }\n      if (searchForUsers) {\n        var _searchQueryParams$us, _searchQueryParams$us2, _searchQueryParams$us3;\n        promises.push(client.queryUsers(_objectSpread({\n          $or: [{\n            id: {\n              $autocomplete: text\n            }\n          }, {\n            name: {\n              $autocomplete: text\n            }\n          }]\n        }, searchQueryParams === null || searchQueryParams === void 0 || (_searchQueryParams$us = searchQueryParams.userFilters) === null || _searchQueryParams$us === void 0 ? void 0 : _searchQueryParams$us.filters), _objectSpread({\n          id: 1\n        }, searchQueryParams === null || searchQueryParams === void 0 || (_searchQueryParams$us2 = searchQueryParams.userFilters) === null || _searchQueryParams$us2 === void 0 ? void 0 : _searchQueryParams$us2.sort), _objectSpread({\n          limit: 8\n        }, searchQueryParams === null || searchQueryParams === void 0 || (_searchQueryParams$us3 = searchQueryParams.userFilters) === null || _searchQueryParams$us3 === void 0 ? void 0 : _searchQueryParams$us3.options)));\n      }\n      if (promises.length) {\n        searchQueryPromiseInProgress.current = true;\n        const resolved = await Promise.all(promises);\n        if (searchForChannels && searchForUsers) {\n          const [channels, {\n            users\n          }] = resolved;\n          results = [...channels, ...users.filter(u => {\n            var _client$user;\n            return u.id !== ((_client$user = client.user) === null || _client$user === void 0 ? void 0 : _client$user.id);\n          })];\n        } else if (searchForChannels) {\n          const [channels] = resolved;\n          results = [...channels];\n        } else if (searchForUsers) {\n          const [{\n            users\n          }] = resolved;\n          results = [...users.filter(u => {\n            var _client$user2;\n            return u.id !== ((_client$user2 = client.user) === null || _client$user2 === void 0 ? void 0 : _client$user2.id);\n          })];\n        }\n      }\n    } catch (error) {\n      console.error(error);\n    }\n    setSearching(false);\n    if (!shouldIgnoreQueryResults.current) {\n      setResults(results);\n    } else {\n      shouldIgnoreQueryResults.current = false;\n    }\n    searchQueryPromiseInProgress.current = false;\n  }, [client, searchForChannels, searchForUsers, searchQueryParams]);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const scheduleGetChannels = useCallback(debounce(getChannels, searchDebounceIntervalMs), [getChannels, searchDebounceIntervalMs]);\n  const onSearch = useCallback(event => {\n    event.preventDefault();\n    if (disabled) return;\n    if (searchFunction) {\n      searchFunction({\n        setQuery,\n        setResults,\n        setSearching\n      }, event);\n    } else if (!searchForChannels && !searchForUsers) {\n      return;\n    } else if (event.target.value) {\n      setSearching(true);\n      setQuery(event.target.value);\n      scheduleGetChannels(event.target.value);\n    } else if (!event.target.value) {\n      clearState();\n      scheduleGetChannels.cancel();\n    }\n    onSearchCallback === null || onSearchCallback === void 0 || onSearchCallback(event);\n  }, [clearState, disabled, scheduleGetChannels, onSearchCallback, searchForChannels, searchForUsers, searchFunction]);\n  return {\n    activateSearch,\n    clearState,\n    exitSearch,\n    inputIsFocused,\n    inputRef,\n    onSearch,\n    query,\n    results,\n    searchBarRef,\n    searching,\n    selectResult\n  };\n};","map":{"version":3,"names":["useCallback","useEffect","useRef","useState","debounce","uniqBy","isChannel","useChatContext","useChannelSearch","_ref","channelType","clearSearchOnClickOutside","disabled","onSearch","onSearchCallback","onSearchExit","onSelectResult","searchDebounceIntervalMs","searchForChannels","searchForUsers","searchFunction","searchQueryParams","setChannels","client","setActiveChannel","inputIsFocused","setInputIsFocused","query","setQuery","results","setResults","searching","setSearching","searchQueryPromiseInProgress","shouldIgnoreQueryResults","inputRef","searchBarRef","clearState","current","activateSearch","exitSearch","_inputRef$current","blur","clickListener","event","_searchBarRef$current","target","HTMLElement","isInputClick","contains","document","addEventListener","removeEventListener","handleKeyDown","key","_inputRef$current2","selectResult","result","userID","selectedChannel","newChannel","channel","members","id","watch","channels","getChannels","text","promises","_searchQueryParams$ch","_searchQueryParams$ch2","_searchQueryParams$ch3","push","queryChannels","_objectSpread","$in","name","$autocomplete","channelFilters","filters","sort","limit","options","_searchQueryParams$us","_searchQueryParams$us2","_searchQueryParams$us3","queryUsers","$or","userFilters","length","resolved","Promise","all","users","filter","u","_client$user","user","_client$user2","error","console","scheduleGetChannels","preventDefault","value","cancel"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/ChannelSearch/hooks/useChannelSearch.js"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\nimport debounce from 'lodash.debounce';\nimport uniqBy from 'lodash.uniqby';\nimport { isChannel } from '../utils';\nimport { useChatContext } from '../../../context/ChatContext';\nexport const useChannelSearch = ({ channelType = 'messaging', clearSearchOnClickOutside = true, disabled = false, onSearch: onSearchCallback, onSearchExit, onSelectResult, searchDebounceIntervalMs = 300, searchForChannels = false, searchForUsers = true, searchFunction, searchQueryParams, setChannels, }) => {\n    const { client, setActiveChannel } = useChatContext('useChannelSearch');\n    const [inputIsFocused, setInputIsFocused] = useState(false);\n    const [query, setQuery] = useState('');\n    const [results, setResults] = useState([]);\n    const [searching, setSearching] = useState(false);\n    const searchQueryPromiseInProgress = useRef(false);\n    const shouldIgnoreQueryResults = useRef(false);\n    const inputRef = useRef(null);\n    const searchBarRef = useRef(null);\n    const clearState = useCallback(() => {\n        setQuery('');\n        setResults([]);\n        setSearching(false);\n        shouldIgnoreQueryResults.current = searchQueryPromiseInProgress.current;\n    }, []);\n    const activateSearch = useCallback(() => {\n        setInputIsFocused(true);\n    }, []);\n    const exitSearch = useCallback(() => {\n        setInputIsFocused(false);\n        inputRef.current?.blur();\n        clearState();\n        onSearchExit?.();\n    }, [clearState, onSearchExit]);\n    useEffect(() => {\n        if (disabled)\n            return;\n        const clickListener = (event) => {\n            if (!(event.target instanceof HTMLElement))\n                return;\n            const isInputClick = searchBarRef.current?.contains(event.target);\n            if (isInputClick)\n                return;\n            if ((inputIsFocused && !query) || clearSearchOnClickOutside) {\n                exitSearch();\n            }\n        };\n        document.addEventListener('click', clickListener);\n        return () => document.removeEventListener('click', clickListener);\n    }, [disabled, inputIsFocused, query, exitSearch, clearSearchOnClickOutside]);\n    useEffect(() => {\n        if (!inputRef.current || disabled)\n            return;\n        const handleKeyDown = (event) => {\n            if (event.key === 'Escape')\n                return exitSearch();\n        };\n        inputRef.current.addEventListener('keydown', handleKeyDown);\n        return () => {\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            inputRef.current?.removeEventListener('keydown', handleKeyDown);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [disabled]);\n    const selectResult = useCallback(async (result) => {\n        if (!client.userID)\n            return;\n        if (onSelectResult) {\n            await onSelectResult({\n                setQuery,\n                setResults,\n                setSearching,\n            }, result);\n            return;\n        }\n        let selectedChannel;\n        if (isChannel(result)) {\n            setActiveChannel(result);\n            selectedChannel = result;\n        }\n        else {\n            const newChannel = client.channel(channelType, {\n                members: [client.userID, result.id],\n            });\n            await newChannel.watch();\n            setActiveChannel(newChannel);\n            selectedChannel = newChannel;\n        }\n        setChannels?.((channels) => uniqBy([selectedChannel, ...channels], 'cid'));\n        if (clearSearchOnClickOutside) {\n            exitSearch();\n        }\n    }, \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        clearSearchOnClickOutside,\n        client,\n        exitSearch,\n        onSelectResult,\n        setActiveChannel,\n        setChannels,\n    ]);\n    const getChannels = useCallback(async (text) => {\n        if (!searchForChannels && !searchForUsers)\n            return;\n        let results = [];\n        const promises = [];\n        try {\n            if (searchForChannels) {\n                promises.push(client.queryChannels({\n                    members: { $in: [client.userID] },\n                    name: { $autocomplete: text },\n                    ...searchQueryParams?.channelFilters?.filters,\n                }, searchQueryParams?.channelFilters?.sort || {}, { limit: 5, ...searchQueryParams?.channelFilters?.options }));\n            }\n            if (searchForUsers) {\n                promises.push(client.queryUsers({\n                    $or: [{ id: { $autocomplete: text } }, { name: { $autocomplete: text } }],\n                    ...searchQueryParams?.userFilters?.filters,\n                }, { id: 1, ...searchQueryParams?.userFilters?.sort }, { limit: 8, ...searchQueryParams?.userFilters?.options }));\n            }\n            if (promises.length) {\n                searchQueryPromiseInProgress.current = true;\n                const resolved = await Promise.all(promises);\n                if (searchForChannels && searchForUsers) {\n                    const [channels, { users }] = resolved;\n                    results = [...channels, ...users.filter((u) => u.id !== client.user?.id)];\n                }\n                else if (searchForChannels) {\n                    const [channels] = resolved;\n                    results = [...channels];\n                }\n                else if (searchForUsers) {\n                    const [{ users }] = resolved;\n                    results = [...users.filter((u) => u.id !== client.user?.id)];\n                }\n            }\n        }\n        catch (error) {\n            console.error(error);\n        }\n        setSearching(false);\n        if (!shouldIgnoreQueryResults.current) {\n            setResults(results);\n        }\n        else {\n            shouldIgnoreQueryResults.current = false;\n        }\n        searchQueryPromiseInProgress.current = false;\n    }, [client, searchForChannels, searchForUsers, searchQueryParams]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const scheduleGetChannels = useCallback(debounce(getChannels, searchDebounceIntervalMs), [getChannels, searchDebounceIntervalMs]);\n    const onSearch = useCallback((event) => {\n        event.preventDefault();\n        if (disabled)\n            return;\n        if (searchFunction) {\n            searchFunction({\n                setQuery,\n                setResults,\n                setSearching,\n            }, event);\n        }\n        else if (!searchForChannels && !searchForUsers) {\n            return;\n        }\n        else if (event.target.value) {\n            setSearching(true);\n            setQuery(event.target.value);\n            scheduleGetChannels(event.target.value);\n        }\n        else if (!event.target.value) {\n            clearState();\n            scheduleGetChannels.cancel();\n        }\n        onSearchCallback?.(event);\n    }, [\n        clearState,\n        disabled,\n        scheduleGetChannels,\n        onSearchCallback,\n        searchForChannels,\n        searchForUsers,\n        searchFunction,\n    ]);\n    return {\n        activateSearch,\n        clearState,\n        exitSearch,\n        inputIsFocused,\n        inputRef,\n        onSearch,\n        query,\n        results,\n        searchBarRef,\n        searching,\n        selectResult,\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}