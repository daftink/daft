{"ast":null,"code":"import clsx from 'clsx';\nimport debounce from 'lodash.debounce';\nimport React, { useMemo } from 'react';\nimport { isVoteAnswer } from 'stream-chat';\nimport { Avatar } from '../Avatar';\nimport { useChannelStateContext, useMessageContext, usePollContext, useTranslationContext } from '../../context';\nimport { useStateStore } from '../../store';\nexport const AmountBar = _ref => {\n  let {\n    amount,\n    className\n  } = _ref;\n  return React.createElement(\"div\", {\n    className: clsx('str-chat__amount-bar', className),\n    \"data-testid\": 'amount-bar',\n    role: 'progressbar',\n    style: {\n      '--str-chat__amount-bar-fulfillment': amount + '%'\n    }\n  });\n};\nexport const Checkmark = _ref2 => {\n  let {\n    checked\n  } = _ref2;\n  return React.createElement(\"div\", {\n    className: clsx('str-chat__checkmark', {\n      'str-chat__checkmark--checked': checked\n    })\n  });\n};\nconst pollStateSelector = nextValue => ({\n  is_closed: nextValue.is_closed,\n  latest_votes_by_option: nextValue.latest_votes_by_option,\n  maxVotedOptionIds: nextValue.maxVotedOptionIds,\n  ownVotesByOptionId: nextValue.ownVotesByOptionId,\n  vote_counts_by_option: nextValue.vote_counts_by_option,\n  voting_visibility: nextValue.voting_visibility\n});\nexport const PollOptionSelector = _ref3 => {\n  var _vote_counts_by_optio, _vote_counts_by_optio2, _vote_counts_by_optio3;\n  let {\n    displayAvatarCount,\n    option,\n    voteCountVerbose\n  } = _ref3;\n  const {\n    t\n  } = useTranslationContext();\n  const {\n    channelCapabilities = {}\n  } = useChannelStateContext('PollOptionsShortlist');\n  const {\n    message\n  } = useMessageContext();\n  const {\n    poll\n  } = usePollContext();\n  const {\n    is_closed,\n    latest_votes_by_option,\n    maxVotedOptionIds,\n    ownVotesByOptionId,\n    vote_counts_by_option,\n    voting_visibility\n  } = useStateStore(poll.state, pollStateSelector);\n  const canCastVote = channelCapabilities['cast-poll-vote'] && !is_closed;\n  const winningOptionCount = maxVotedOptionIds[0] ? vote_counts_by_option[maxVotedOptionIds[0]] : 0;\n  const toggleVote = useMemo(() => debounce(() => {\n    if (!canCastVote) return;\n    const haveVotedForTheOption = !!ownVotesByOptionId[option.id];\n    return haveVotedForTheOption ? poll.removeVote(ownVotesByOptionId[option.id].id, message.id) : poll.castVote(option.id, message.id);\n  }, 100), [canCastVote, message.id, option.id, ownVotesByOptionId, poll]);\n  return React.createElement(\"div\", {\n    className: clsx('str-chat__poll-option', {\n      'str-chat__poll-option--votable': canCastVote\n    }),\n    key: \"base-poll-option-\".concat(option.id),\n    onClick: toggleVote\n  }, canCastVote && React.createElement(Checkmark, {\n    checked: !!ownVotesByOptionId[option.id]\n  }), React.createElement(\"div\", {\n    className: 'str-chat__poll-option-data'\n  }, React.createElement(\"p\", {\n    className: 'str-chat__poll-option-text'\n  }, option.text), displayAvatarCount && voting_visibility === 'public' && React.createElement(\"div\", {\n    className: 'str-chat__poll-option-voters'\n  }, (latest_votes_by_option === null || latest_votes_by_option === void 0 ? void 0 : latest_votes_by_option[option.id]) && latest_votes_by_option[option.id].filter(vote => !!vote.user && !isVoteAnswer(vote)).slice(0, displayAvatarCount).map(_ref4 => {\n    let {\n      user\n    } = _ref4;\n    return React.createElement(Avatar, {\n      image: user === null || user === void 0 ? void 0 : user.image,\n      key: \"poll-option-\".concat(option.id, \"-avatar-\").concat(user === null || user === void 0 ? void 0 : user.id),\n      name: user === null || user === void 0 ? void 0 : user.name\n    });\n  })), React.createElement(\"div\", {\n    className: 'str-chat__poll-option-vote-count'\n  }, voteCountVerbose ? t('{{count}} votes', {\n    count: (_vote_counts_by_optio = vote_counts_by_option[option.id]) !== null && _vote_counts_by_optio !== void 0 ? _vote_counts_by_optio : 0\n  }) : (_vote_counts_by_optio2 = vote_counts_by_option[option.id]) !== null && _vote_counts_by_optio2 !== void 0 ? _vote_counts_by_optio2 : 0)), React.createElement(AmountBar, {\n    amount: (winningOptionCount && ((_vote_counts_by_optio3 = vote_counts_by_option[option.id]) !== null && _vote_counts_by_optio3 !== void 0 ? _vote_counts_by_optio3 : 0) / winningOptionCount) * 100,\n    className: clsx('str-chat__poll-option__votes-bar', {\n      'str-chat__poll-option__votes-bar--winner': is_closed && maxVotedOptionIds.length === 1 && maxVotedOptionIds[0] === option.id\n    })\n  }));\n};","map":{"version":3,"names":["clsx","debounce","React","useMemo","isVoteAnswer","Avatar","useChannelStateContext","useMessageContext","usePollContext","useTranslationContext","useStateStore","AmountBar","_ref","amount","className","createElement","role","style","Checkmark","_ref2","checked","pollStateSelector","nextValue","is_closed","latest_votes_by_option","maxVotedOptionIds","ownVotesByOptionId","vote_counts_by_option","voting_visibility","PollOptionSelector","_ref3","_vote_counts_by_optio","_vote_counts_by_optio2","_vote_counts_by_optio3","displayAvatarCount","option","voteCountVerbose","t","channelCapabilities","message","poll","state","canCastVote","winningOptionCount","toggleVote","haveVotedForTheOption","id","removeVote","castVote","key","concat","onClick","text","filter","vote","user","slice","map","_ref4","image","name","count","length"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/Poll/PollOptionSelector.js"],"sourcesContent":["import clsx from 'clsx';\nimport debounce from 'lodash.debounce';\nimport React, { useMemo } from 'react';\nimport { isVoteAnswer } from 'stream-chat';\nimport { Avatar } from '../Avatar';\nimport { useChannelStateContext, useMessageContext, usePollContext, useTranslationContext, } from '../../context';\nimport { useStateStore } from '../../store';\nexport const AmountBar = ({ amount, className }) => (React.createElement(\"div\", { className: clsx('str-chat__amount-bar', className), \"data-testid\": 'amount-bar', role: 'progressbar', style: {\n        '--str-chat__amount-bar-fulfillment': amount + '%',\n    } }));\nexport const Checkmark = ({ checked }) => (React.createElement(\"div\", { className: clsx('str-chat__checkmark', { 'str-chat__checkmark--checked': checked }) }));\nconst pollStateSelector = (nextValue) => ({\n    is_closed: nextValue.is_closed,\n    latest_votes_by_option: nextValue.latest_votes_by_option,\n    maxVotedOptionIds: nextValue.maxVotedOptionIds,\n    ownVotesByOptionId: nextValue.ownVotesByOptionId,\n    vote_counts_by_option: nextValue.vote_counts_by_option,\n    voting_visibility: nextValue.voting_visibility,\n});\nexport const PollOptionSelector = ({ displayAvatarCount, option, voteCountVerbose, }) => {\n    const { t } = useTranslationContext();\n    const { channelCapabilities = {} } = useChannelStateContext('PollOptionsShortlist');\n    const { message } = useMessageContext();\n    const { poll } = usePollContext();\n    const { is_closed, latest_votes_by_option, maxVotedOptionIds, ownVotesByOptionId, vote_counts_by_option, voting_visibility, } = useStateStore(poll.state, pollStateSelector);\n    const canCastVote = channelCapabilities['cast-poll-vote'] && !is_closed;\n    const winningOptionCount = maxVotedOptionIds[0]\n        ? vote_counts_by_option[maxVotedOptionIds[0]]\n        : 0;\n    const toggleVote = useMemo(() => debounce(() => {\n        if (!canCastVote)\n            return;\n        const haveVotedForTheOption = !!ownVotesByOptionId[option.id];\n        return haveVotedForTheOption\n            ? poll.removeVote(ownVotesByOptionId[option.id].id, message.id)\n            : poll.castVote(option.id, message.id);\n    }, 100), [canCastVote, message.id, option.id, ownVotesByOptionId, poll]);\n    return (React.createElement(\"div\", { className: clsx('str-chat__poll-option', {\n            'str-chat__poll-option--votable': canCastVote,\n        }), key: `base-poll-option-${option.id}`, onClick: toggleVote },\n        canCastVote && React.createElement(Checkmark, { checked: !!ownVotesByOptionId[option.id] }),\n        React.createElement(\"div\", { className: 'str-chat__poll-option-data' },\n            React.createElement(\"p\", { className: 'str-chat__poll-option-text' }, option.text),\n            displayAvatarCount && voting_visibility === 'public' && (React.createElement(\"div\", { className: 'str-chat__poll-option-voters' }, latest_votes_by_option?.[option.id] &&\n                latest_votes_by_option[option.id]\n                    .filter((vote) => !!vote.user && !isVoteAnswer(vote))\n                    .slice(0, displayAvatarCount)\n                    .map(({ user }) => (React.createElement(Avatar, { image: user?.image, key: `poll-option-${option.id}-avatar-${user?.id}`, name: user?.name }))))),\n            React.createElement(\"div\", { className: 'str-chat__poll-option-vote-count' }, voteCountVerbose\n                ? t('{{count}} votes', {\n                    count: vote_counts_by_option[option.id] ?? 0,\n                })\n                : (vote_counts_by_option[option.id] ?? 0))),\n        React.createElement(AmountBar, { amount: (winningOptionCount &&\n                (vote_counts_by_option[option.id] ?? 0) / winningOptionCount) * 100, className: clsx('str-chat__poll-option__votes-bar', {\n                'str-chat__poll-option__votes-bar--winner': is_closed &&\n                    maxVotedOptionIds.length === 1 &&\n                    maxVotedOptionIds[0] === option.id,\n            }) })));\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}