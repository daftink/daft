{"ast":null,"code":"import React from 'react';\nimport ReactMarkdown from 'react-markdown';\nexport const renderPreviewText = text => React.createElement(ReactMarkdown, {\n  skipHtml: true\n}, text);\nconst getLatestPollVote = latestVotesByOption => {\n  let latestVote;\n  for (const optionVotes of Object.values(latestVotesByOption)) {\n    optionVotes.forEach(vote => {\n      if (latestVote && new Date(latestVote.updated_at) >= new Date(vote.created_at)) return;\n      latestVote = vote;\n    });\n  }\n  return latestVote;\n};\nexport const getLatestMessagePreview = function (channel, t) {\n  var _latestMessage$i18n, _latestMessage$attach;\n  let userLanguage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en';\n  let isMessageAIGenerated = arguments.length > 3 ? arguments[3] : undefined;\n  const latestMessage = channel.state.latestMessages[channel.state.latestMessages.length - 1];\n  const previewTextToRender = (latestMessage === null || latestMessage === void 0 || (_latestMessage$i18n = latestMessage.i18n) === null || _latestMessage$i18n === void 0 ? void 0 : _latestMessage$i18n[\"\".concat(userLanguage, \"_text\")]) || (latestMessage === null || latestMessage === void 0 ? void 0 : latestMessage.text);\n  const poll = latestMessage === null || latestMessage === void 0 ? void 0 : latestMessage.poll;\n  if (!latestMessage) {\n    return t('Nothing yet...');\n  }\n  if (latestMessage.deleted_at) {\n    return t('Message deleted');\n  }\n  if (poll) {\n    if (!poll.vote_count) {\n      var _poll$created_by, _poll$created_by$name, _poll$created_by2;\n      const createdBy = ((_poll$created_by = poll.created_by) === null || _poll$created_by === void 0 ? void 0 : _poll$created_by.id) === channel.getClient().userID ? t('You') : (_poll$created_by$name = (_poll$created_by2 = poll.created_by) === null || _poll$created_by2 === void 0 ? void 0 : _poll$created_by2.name) !== null && _poll$created_by$name !== void 0 ? _poll$created_by$name : t('Poll');\n      return t('📊 {{createdBy}} created: {{ pollName}}', {\n        createdBy,\n        pollName: poll.name\n      });\n    } else {\n      const latestVote = getLatestPollVote(poll.latest_votes_by_option);\n      const option = latestVote && poll.options.find(opt => opt.id === latestVote.option_id);\n      if (option && latestVote) {\n        var _latestVote$user, _latestVote$user$name, _latestVote$user2;\n        return t('📊 {{votedBy}} voted: {{pollOptionText}}', {\n          pollOptionText: option.text,\n          votedBy: (latestVote === null || latestVote === void 0 || (_latestVote$user = latestVote.user) === null || _latestVote$user === void 0 ? void 0 : _latestVote$user.id) === channel.getClient().userID ? t('You') : (_latestVote$user$name = (_latestVote$user2 = latestVote.user) === null || _latestVote$user2 === void 0 ? void 0 : _latestVote$user2.name) !== null && _latestVote$user$name !== void 0 ? _latestVote$user$name : t('Poll')\n        });\n      }\n    }\n  }\n  if (previewTextToRender) {\n    return isMessageAIGenerated !== null && isMessageAIGenerated !== void 0 && isMessageAIGenerated(latestMessage) ? previewTextToRender : renderPreviewText(previewTextToRender);\n  }\n  if (latestMessage.command) {\n    return \"/\".concat(latestMessage.command);\n  }\n  if ((_latestMessage$attach = latestMessage.attachments) !== null && _latestMessage$attach !== void 0 && _latestMessage$attach.length) {\n    return t('🏙 Attachment...');\n  }\n  return t('Empty message...');\n};\nexport const getGroupChannelDisplayInfo = channel => {\n  const members = Object.values(channel.state.members);\n  if (members.length <= 2) return;\n  const info = [];\n  for (let i = 0; i < members.length; i++) {\n    const {\n      user\n    } = members[i];\n    if (!(user !== null && user !== void 0 && user.name) && !(user !== null && user !== void 0 && user.image)) continue;\n    info.push({\n      image: user.image,\n      name: user.name\n    });\n    if (info.length === 4) break;\n  }\n  return info;\n};\nconst getChannelDisplayInfo = (info, channel, currentUser) => {\n  var _channel$data, _otherMember$user;\n  if ((_channel$data = channel.data) !== null && _channel$data !== void 0 && _channel$data[info]) return channel.data[info];\n  const members = Object.values(channel.state.members);\n  if (members.length !== 2) return;\n  const otherMember = members.find(member => {\n    var _member$user;\n    return ((_member$user = member.user) === null || _member$user === void 0 ? void 0 : _member$user.id) !== (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id);\n  });\n  return otherMember === null || otherMember === void 0 || (_otherMember$user = otherMember.user) === null || _otherMember$user === void 0 ? void 0 : _otherMember$user[info];\n};\nexport const getDisplayTitle = (channel, currentUser) => getChannelDisplayInfo('name', channel, currentUser);\nexport const getDisplayImage = (channel, currentUser) => getChannelDisplayInfo('image', channel, currentUser);","map":{"version":3,"names":["React","ReactMarkdown","renderPreviewText","text","createElement","skipHtml","getLatestPollVote","latestVotesByOption","latestVote","optionVotes","Object","values","forEach","vote","Date","updated_at","created_at","getLatestMessagePreview","channel","t","_latestMessage$i18n","_latestMessage$attach","userLanguage","arguments","length","undefined","isMessageAIGenerated","latestMessage","state","latestMessages","previewTextToRender","i18n","concat","poll","deleted_at","vote_count","_poll$created_by","_poll$created_by$name","_poll$created_by2","createdBy","created_by","id","getClient","userID","name","pollName","latest_votes_by_option","option","options","find","opt","option_id","_latestVote$user","_latestVote$user$name","_latestVote$user2","pollOptionText","votedBy","user","command","attachments","getGroupChannelDisplayInfo","members","info","i","image","push","getChannelDisplayInfo","currentUser","_channel$data","_otherMember$user","data","otherMember","member","_member$user","getDisplayTitle","getDisplayImage"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/ChannelPreview/utils.js"],"sourcesContent":["import React from 'react';\nimport ReactMarkdown from 'react-markdown';\nexport const renderPreviewText = (text) => (React.createElement(ReactMarkdown, { skipHtml: true }, text));\nconst getLatestPollVote = (latestVotesByOption) => {\n    let latestVote;\n    for (const optionVotes of Object.values(latestVotesByOption)) {\n        optionVotes.forEach((vote) => {\n            if (latestVote && new Date(latestVote.updated_at) >= new Date(vote.created_at))\n                return;\n            latestVote = vote;\n        });\n    }\n    return latestVote;\n};\nexport const getLatestMessagePreview = (channel, t, userLanguage = 'en', isMessageAIGenerated) => {\n    const latestMessage = channel.state.latestMessages[channel.state.latestMessages.length - 1];\n    const previewTextToRender = latestMessage?.i18n?.[`${userLanguage}_text`] ||\n        latestMessage?.text;\n    const poll = latestMessage?.poll;\n    if (!latestMessage) {\n        return t('Nothing yet...');\n    }\n    if (latestMessage.deleted_at) {\n        return t('Message deleted');\n    }\n    if (poll) {\n        if (!poll.vote_count) {\n            const createdBy = poll.created_by?.id === channel.getClient().userID\n                ? t('You')\n                : (poll.created_by?.name ?? t('Poll'));\n            return t('📊 {{createdBy}} created: {{ pollName}}', {\n                createdBy,\n                pollName: poll.name,\n            });\n        }\n        else {\n            const latestVote = getLatestPollVote(poll.latest_votes_by_option);\n            const option = latestVote && poll.options.find((opt) => opt.id === latestVote.option_id);\n            if (option && latestVote) {\n                return t('📊 {{votedBy}} voted: {{pollOptionText}}', {\n                    pollOptionText: option.text,\n                    votedBy: latestVote?.user?.id === channel.getClient().userID\n                        ? t('You')\n                        : (latestVote.user?.name ?? t('Poll')),\n                });\n            }\n        }\n    }\n    if (previewTextToRender) {\n        return isMessageAIGenerated?.(latestMessage)\n            ? previewTextToRender\n            : renderPreviewText(previewTextToRender);\n    }\n    if (latestMessage.command) {\n        return `/${latestMessage.command}`;\n    }\n    if (latestMessage.attachments?.length) {\n        return t('🏙 Attachment...');\n    }\n    return t('Empty message...');\n};\nexport const getGroupChannelDisplayInfo = (channel) => {\n    const members = Object.values(channel.state.members);\n    if (members.length <= 2)\n        return;\n    const info = [];\n    for (let i = 0; i < members.length; i++) {\n        const { user } = members[i];\n        if (!user?.name && !user?.image)\n            continue;\n        info.push({ image: user.image, name: user.name });\n        if (info.length === 4)\n            break;\n    }\n    return info;\n};\nconst getChannelDisplayInfo = (info, channel, currentUser) => {\n    if (channel.data?.[info])\n        return channel.data[info];\n    const members = Object.values(channel.state.members);\n    if (members.length !== 2)\n        return;\n    const otherMember = members.find((member) => member.user?.id !== currentUser?.id);\n    return otherMember?.user?.[info];\n};\nexport const getDisplayTitle = (channel, currentUser) => getChannelDisplayInfo('name', channel, currentUser);\nexport const getDisplayImage = (channel, currentUser) => getChannelDisplayInfo('image', channel, currentUser);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}