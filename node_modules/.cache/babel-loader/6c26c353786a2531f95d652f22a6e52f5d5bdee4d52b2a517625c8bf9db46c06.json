{"ast":null,"code":"import _objectSpread from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport React, { useMemo, useState } from 'react';\nimport clsx from 'clsx';\nimport { MessageErrorIcon } from './icons';\nimport { MessageBouncePrompt as DefaultMessageBouncePrompt } from '../MessageBounce';\nimport { MessageDeleted as DefaultMessageDeleted } from './MessageDeleted';\nimport { MessageBlocked as DefaultMessageBlocked } from './MessageBlocked';\nimport { MessageOptions as DefaultMessageOptions } from './MessageOptions';\nimport { MessageRepliesCountButton as DefaultMessageRepliesCountButton } from './MessageRepliesCountButton';\nimport { MessageStatus as DefaultMessageStatus } from './MessageStatus';\nimport { MessageText } from './MessageText';\nimport { MessageTimestamp as DefaultMessageTimestamp } from './MessageTimestamp';\nimport { StreamedMessageText as DefaultStreamedMessageText } from './StreamedMessageText';\nimport { isDateSeparatorMessage } from '../MessageList';\nimport { MessageIsThreadReplyInChannelButtonIndicator as DefaultMessageIsThreadReplyInChannelButtonIndicator } from './MessageIsThreadReplyInChannelButtonIndicator';\nimport { ReminderNotification as DefaultReminderNotification } from './ReminderNotification';\nimport { useMessageReminder } from './hooks';\nimport { areMessageUIPropsEqual, isMessageBlocked, isMessageBounced, isMessageEdited, messageHasAttachments, messageHasReactions } from './utils';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { Attachment as DefaultAttachment } from '../Attachment';\nimport { EditMessageModal } from '../MessageInput';\nimport { Poll } from '../Poll';\nimport { ReactionsList as DefaultReactionList } from '../Reactions';\nimport { MessageBounceModal } from '../MessageBounce/MessageBounceModal';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useChatContext, useTranslationContext } from '../../context';\nimport { MessageEditedTimestamp } from './MessageEditedTimestamp';\nconst MessageSimpleWithContext = props => {\n  var _message$error, _message$error2, _message$attachments;\n  const {\n    additionalMessageInputProps,\n    editing,\n    endOfGroup,\n    firstOfGroup,\n    groupedByUser,\n    handleAction,\n    handleOpenThread,\n    handleRetry,\n    highlighted,\n    isMessageAIGenerated,\n    isMyMessage,\n    message,\n    onUserClick,\n    onUserHover,\n    renderText,\n    threadList\n  } = props;\n  const {\n    client\n  } = useChatContext('MessageSimple');\n  const {\n    t\n  } = useTranslationContext('MessageSimple');\n  const [isBounceDialogOpen, setIsBounceDialogOpen] = useState(false);\n  const [isEditedTimestampOpen, setEditedTimestampOpen] = useState(false);\n  const reminder = useMessageReminder(message.id);\n  const {\n    Attachment = DefaultAttachment,\n    Avatar = DefaultAvatar,\n    MessageOptions = DefaultMessageOptions,\n    // TODO: remove this \"passthrough\" in the next\n    // major release and use the new default instead\n    MessageActions = MessageOptions,\n    MessageBlocked = DefaultMessageBlocked,\n    MessageBouncePrompt = DefaultMessageBouncePrompt,\n    MessageDeleted = DefaultMessageDeleted,\n    MessageIsThreadReplyInChannelButtonIndicator = DefaultMessageIsThreadReplyInChannelButtonIndicator,\n    MessageRepliesCountButton = DefaultMessageRepliesCountButton,\n    MessageStatus = DefaultMessageStatus,\n    MessageTimestamp = DefaultMessageTimestamp,\n    ReactionsList = DefaultReactionList,\n    ReminderNotification = DefaultReminderNotification,\n    StreamedMessageText = DefaultStreamedMessageText,\n    PinIndicator\n  } = useComponentContext('MessageSimple');\n  const hasAttachment = messageHasAttachments(message);\n  const hasReactions = messageHasReactions(message);\n  const isAIGenerated = useMemo(() => isMessageAIGenerated === null || isMessageAIGenerated === void 0 ? void 0 : isMessageAIGenerated(message), [isMessageAIGenerated, message]);\n  if (isDateSeparatorMessage(message)) {\n    return null;\n  }\n  if (message.deleted_at || message.type === 'deleted') {\n    return React.createElement(MessageDeleted, {\n      message: message\n    });\n  }\n  if (isMessageBlocked(message)) {\n    return React.createElement(MessageBlocked, null);\n  }\n  const showMetadata = !groupedByUser || endOfGroup;\n  const showReplyCountButton = !threadList && !!message.reply_count;\n  const showIsReplyInChannel = !threadList && message.show_in_channel && message.parent_id;\n  const allowRetry = message.status === 'failed' && ((_message$error = message.error) === null || _message$error === void 0 ? void 0 : _message$error.status) !== 403;\n  const isBounced = isMessageBounced(message);\n  const isEdited = isMessageEdited(message) && !isAIGenerated;\n  let handleClick = undefined;\n  if (allowRetry) {\n    handleClick = () => handleRetry(message);\n  } else if (isBounced) {\n    handleClick = () => setIsBounceDialogOpen(true);\n  } else if (isEdited) {\n    handleClick = () => setEditedTimestampOpen(prev => !prev);\n  }\n  const rootClassName = clsx('str-chat__message str-chat__message-simple', \"str-chat__message--\".concat(message.type), \"str-chat__message--\".concat(message.status), isMyMessage() ? 'str-chat__message--me str-chat__message-simple--me' : 'str-chat__message--other', message.text ? 'str-chat__message--has-text' : 'has-no-text', {\n    'str-chat__message--has-attachment': hasAttachment,\n    'str-chat__message--highlighted': highlighted,\n    'str-chat__message--pinned pinned-message': message.pinned,\n    'str-chat__message--with-reactions': hasReactions,\n    'str-chat__message-send-can-be-retried': (message === null || message === void 0 ? void 0 : message.status) === 'failed' && (message === null || message === void 0 || (_message$error2 = message.error) === null || _message$error2 === void 0 ? void 0 : _message$error2.status) !== 403,\n    'str-chat__message-with-thread-link': showReplyCountButton || showIsReplyInChannel,\n    'str-chat__virtual-message__wrapper--end': endOfGroup,\n    'str-chat__virtual-message__wrapper--first': firstOfGroup,\n    'str-chat__virtual-message__wrapper--group': groupedByUser\n  });\n  const poll = message.poll_id && client.polls.fromState(message.poll_id);\n  return React.createElement(React.Fragment, null, editing && React.createElement(EditMessageModal, {\n    additionalMessageInputProps: additionalMessageInputProps\n  }), isBounceDialogOpen && React.createElement(MessageBounceModal, {\n    MessageBouncePrompt: MessageBouncePrompt,\n    onClose: () => setIsBounceDialogOpen(false),\n    open: isBounceDialogOpen\n  }), React.createElement(\"div\", {\n    className: rootClassName,\n    key: message.id\n  }, PinIndicator && React.createElement(PinIndicator, null), !!reminder && React.createElement(ReminderNotification, {\n    reminder: reminder\n  }), message.user && React.createElement(Avatar, {\n    image: message.user.image,\n    name: message.user.name || message.user.id,\n    onClick: onUserClick,\n    onMouseOver: onUserHover,\n    user: message.user\n  }), React.createElement(\"div\", {\n    className: clsx('str-chat__message-inner', {\n      'str-chat__simple-message--error-failed': allowRetry || isBounced\n    }),\n    \"data-testid\": 'message-inner',\n    onClick: handleClick,\n    onKeyUp: handleClick\n  }, React.createElement(MessageActions, null), React.createElement(\"div\", {\n    className: 'str-chat__message-reactions-host'\n  }, hasReactions && React.createElement(ReactionsList, {\n    reverse: true\n  })), React.createElement(\"div\", {\n    className: 'str-chat__message-bubble'\n  }, poll && React.createElement(Poll, {\n    poll: poll\n  }), (_message$attachments = message.attachments) !== null && _message$attachments !== void 0 && _message$attachments.length && !message.quoted_message ? React.createElement(Attachment, {\n    actionHandler: handleAction,\n    attachments: message.attachments\n  }) : null, isAIGenerated ? React.createElement(StreamedMessageText, {\n    message: message,\n    renderText: renderText\n  }) : React.createElement(MessageText, {\n    message: message,\n    renderText: renderText\n  }), React.createElement(MessageErrorIcon, null))), showReplyCountButton && React.createElement(MessageRepliesCountButton, {\n    onClick: handleOpenThread,\n    reply_count: message.reply_count\n  }), showIsReplyInChannel && React.createElement(MessageIsThreadReplyInChannelButtonIndicator, null), showMetadata && React.createElement(\"div\", {\n    className: 'str-chat__message-metadata'\n  }, React.createElement(MessageStatus, null), !isMyMessage() && !!message.user && React.createElement(\"span\", {\n    className: 'str-chat__message-simple-name'\n  }, message.user.name || message.user.id), React.createElement(MessageTimestamp, {\n    customClass: 'str-chat__message-simple-timestamp'\n  }), isEdited && React.createElement(\"span\", {\n    className: 'str-chat__mesage-simple-edited'\n  }, t('Edited')), isEdited && React.createElement(MessageEditedTimestamp, {\n    calendar: true,\n    open: isEditedTimestampOpen\n  }))));\n};\nconst MemoizedMessageSimple = React.memo(MessageSimpleWithContext, areMessageUIPropsEqual);\n/**\n * The default UI component that renders a message and receives functionality and logic from the MessageContext.\n */\nexport const MessageSimple = props => {\n  const messageContext = useMessageContext('MessageSimple');\n  return React.createElement(MemoizedMessageSimple, _objectSpread(_objectSpread({}, messageContext), props));\n};","map":{"version":3,"names":["React","useMemo","useState","clsx","MessageErrorIcon","MessageBouncePrompt","DefaultMessageBouncePrompt","MessageDeleted","DefaultMessageDeleted","MessageBlocked","DefaultMessageBlocked","MessageOptions","DefaultMessageOptions","MessageRepliesCountButton","DefaultMessageRepliesCountButton","MessageStatus","DefaultMessageStatus","MessageText","MessageTimestamp","DefaultMessageTimestamp","StreamedMessageText","DefaultStreamedMessageText","isDateSeparatorMessage","MessageIsThreadReplyInChannelButtonIndicator","DefaultMessageIsThreadReplyInChannelButtonIndicator","ReminderNotification","DefaultReminderNotification","useMessageReminder","areMessageUIPropsEqual","isMessageBlocked","isMessageBounced","isMessageEdited","messageHasAttachments","messageHasReactions","Avatar","DefaultAvatar","Attachment","DefaultAttachment","EditMessageModal","Poll","ReactionsList","DefaultReactionList","MessageBounceModal","useComponentContext","useMessageContext","useChatContext","useTranslationContext","MessageEditedTimestamp","MessageSimpleWithContext","props","_message$error","_message$error2","_message$attachments","additionalMessageInputProps","editing","endOfGroup","firstOfGroup","groupedByUser","handleAction","handleOpenThread","handleRetry","highlighted","isMessageAIGenerated","isMyMessage","message","onUserClick","onUserHover","renderText","threadList","client","t","isBounceDialogOpen","setIsBounceDialogOpen","isEditedTimestampOpen","setEditedTimestampOpen","reminder","id","MessageActions","PinIndicator","hasAttachment","hasReactions","isAIGenerated","deleted_at","type","createElement","showMetadata","showReplyCountButton","reply_count","showIsReplyInChannel","show_in_channel","parent_id","allowRetry","status","error","isBounced","isEdited","handleClick","undefined","prev","rootClassName","concat","text","pinned","poll","poll_id","polls","fromState","Fragment","onClose","open","className","key","user","image","name","onClick","onMouseOver","onKeyUp","reverse","attachments","length","quoted_message","actionHandler","customClass","calendar","MemoizedMessageSimple","memo","MessageSimple","messageContext","_objectSpread"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/Message/MessageSimple.js"],"sourcesContent":["import React, { useMemo, useState } from 'react';\nimport clsx from 'clsx';\nimport { MessageErrorIcon } from './icons';\nimport { MessageBouncePrompt as DefaultMessageBouncePrompt } from '../MessageBounce';\nimport { MessageDeleted as DefaultMessageDeleted } from './MessageDeleted';\nimport { MessageBlocked as DefaultMessageBlocked } from './MessageBlocked';\nimport { MessageOptions as DefaultMessageOptions } from './MessageOptions';\nimport { MessageRepliesCountButton as DefaultMessageRepliesCountButton } from './MessageRepliesCountButton';\nimport { MessageStatus as DefaultMessageStatus } from './MessageStatus';\nimport { MessageText } from './MessageText';\nimport { MessageTimestamp as DefaultMessageTimestamp } from './MessageTimestamp';\nimport { StreamedMessageText as DefaultStreamedMessageText } from './StreamedMessageText';\nimport { isDateSeparatorMessage } from '../MessageList';\nimport { MessageIsThreadReplyInChannelButtonIndicator as DefaultMessageIsThreadReplyInChannelButtonIndicator } from './MessageIsThreadReplyInChannelButtonIndicator';\nimport { ReminderNotification as DefaultReminderNotification } from './ReminderNotification';\nimport { useMessageReminder } from './hooks';\nimport { areMessageUIPropsEqual, isMessageBlocked, isMessageBounced, isMessageEdited, messageHasAttachments, messageHasReactions, } from './utils';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { Attachment as DefaultAttachment } from '../Attachment';\nimport { EditMessageModal } from '../MessageInput';\nimport { Poll } from '../Poll';\nimport { ReactionsList as DefaultReactionList } from '../Reactions';\nimport { MessageBounceModal } from '../MessageBounce/MessageBounceModal';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useChatContext, useTranslationContext } from '../../context';\nimport { MessageEditedTimestamp } from './MessageEditedTimestamp';\nconst MessageSimpleWithContext = (props) => {\n    const { additionalMessageInputProps, editing, endOfGroup, firstOfGroup, groupedByUser, handleAction, handleOpenThread, handleRetry, highlighted, isMessageAIGenerated, isMyMessage, message, onUserClick, onUserHover, renderText, threadList, } = props;\n    const { client } = useChatContext('MessageSimple');\n    const { t } = useTranslationContext('MessageSimple');\n    const [isBounceDialogOpen, setIsBounceDialogOpen] = useState(false);\n    const [isEditedTimestampOpen, setEditedTimestampOpen] = useState(false);\n    const reminder = useMessageReminder(message.id);\n    const { Attachment = DefaultAttachment, Avatar = DefaultAvatar, MessageOptions = DefaultMessageOptions, \n    // TODO: remove this \"passthrough\" in the next\n    // major release and use the new default instead\n    MessageActions = MessageOptions, MessageBlocked = DefaultMessageBlocked, MessageBouncePrompt = DefaultMessageBouncePrompt, MessageDeleted = DefaultMessageDeleted, MessageIsThreadReplyInChannelButtonIndicator = DefaultMessageIsThreadReplyInChannelButtonIndicator, MessageRepliesCountButton = DefaultMessageRepliesCountButton, MessageStatus = DefaultMessageStatus, MessageTimestamp = DefaultMessageTimestamp, ReactionsList = DefaultReactionList, ReminderNotification = DefaultReminderNotification, StreamedMessageText = DefaultStreamedMessageText, PinIndicator, } = useComponentContext('MessageSimple');\n    const hasAttachment = messageHasAttachments(message);\n    const hasReactions = messageHasReactions(message);\n    const isAIGenerated = useMemo(() => isMessageAIGenerated?.(message), [isMessageAIGenerated, message]);\n    if (isDateSeparatorMessage(message)) {\n        return null;\n    }\n    if (message.deleted_at || message.type === 'deleted') {\n        return React.createElement(MessageDeleted, { message: message });\n    }\n    if (isMessageBlocked(message)) {\n        return React.createElement(MessageBlocked, null);\n    }\n    const showMetadata = !groupedByUser || endOfGroup;\n    const showReplyCountButton = !threadList && !!message.reply_count;\n    const showIsReplyInChannel = !threadList && message.show_in_channel && message.parent_id;\n    const allowRetry = message.status === 'failed' && message.error?.status !== 403;\n    const isBounced = isMessageBounced(message);\n    const isEdited = isMessageEdited(message) && !isAIGenerated;\n    let handleClick = undefined;\n    if (allowRetry) {\n        handleClick = () => handleRetry(message);\n    }\n    else if (isBounced) {\n        handleClick = () => setIsBounceDialogOpen(true);\n    }\n    else if (isEdited) {\n        handleClick = () => setEditedTimestampOpen((prev) => !prev);\n    }\n    const rootClassName = clsx('str-chat__message str-chat__message-simple', `str-chat__message--${message.type}`, `str-chat__message--${message.status}`, isMyMessage()\n        ? 'str-chat__message--me str-chat__message-simple--me'\n        : 'str-chat__message--other', message.text ? 'str-chat__message--has-text' : 'has-no-text', {\n        'str-chat__message--has-attachment': hasAttachment,\n        'str-chat__message--highlighted': highlighted,\n        'str-chat__message--pinned pinned-message': message.pinned,\n        'str-chat__message--with-reactions': hasReactions,\n        'str-chat__message-send-can-be-retried': message?.status === 'failed' && message?.error?.status !== 403,\n        'str-chat__message-with-thread-link': showReplyCountButton || showIsReplyInChannel,\n        'str-chat__virtual-message__wrapper--end': endOfGroup,\n        'str-chat__virtual-message__wrapper--first': firstOfGroup,\n        'str-chat__virtual-message__wrapper--group': groupedByUser,\n    });\n    const poll = message.poll_id && client.polls.fromState(message.poll_id);\n    return (React.createElement(React.Fragment, null,\n        editing && (React.createElement(EditMessageModal, { additionalMessageInputProps: additionalMessageInputProps })),\n        isBounceDialogOpen && (React.createElement(MessageBounceModal, { MessageBouncePrompt: MessageBouncePrompt, onClose: () => setIsBounceDialogOpen(false), open: isBounceDialogOpen })),\n        React.createElement(\"div\", { className: rootClassName, key: message.id },\n            PinIndicator && React.createElement(PinIndicator, null),\n            !!reminder && React.createElement(ReminderNotification, { reminder: reminder }),\n            message.user && (React.createElement(Avatar, { image: message.user.image, name: message.user.name || message.user.id, onClick: onUserClick, onMouseOver: onUserHover, user: message.user })),\n            React.createElement(\"div\", { className: clsx('str-chat__message-inner', {\n                    'str-chat__simple-message--error-failed': allowRetry || isBounced,\n                }), \"data-testid\": 'message-inner', onClick: handleClick, onKeyUp: handleClick },\n                React.createElement(MessageActions, null),\n                React.createElement(\"div\", { className: 'str-chat__message-reactions-host' }, hasReactions && React.createElement(ReactionsList, { reverse: true })),\n                React.createElement(\"div\", { className: 'str-chat__message-bubble' },\n                    poll && React.createElement(Poll, { poll: poll }),\n                    message.attachments?.length && !message.quoted_message ? (React.createElement(Attachment, { actionHandler: handleAction, attachments: message.attachments })) : null,\n                    isAIGenerated ? (React.createElement(StreamedMessageText, { message: message, renderText: renderText })) : (React.createElement(MessageText, { message: message, renderText: renderText })),\n                    React.createElement(MessageErrorIcon, null))),\n            showReplyCountButton && (React.createElement(MessageRepliesCountButton, { onClick: handleOpenThread, reply_count: message.reply_count })),\n            showIsReplyInChannel && React.createElement(MessageIsThreadReplyInChannelButtonIndicator, null),\n            showMetadata && (React.createElement(\"div\", { className: 'str-chat__message-metadata' },\n                React.createElement(MessageStatus, null),\n                !isMyMessage() && !!message.user && (React.createElement(\"span\", { className: 'str-chat__message-simple-name' }, message.user.name || message.user.id)),\n                React.createElement(MessageTimestamp, { customClass: 'str-chat__message-simple-timestamp' }),\n                isEdited && (React.createElement(\"span\", { className: 'str-chat__mesage-simple-edited' }, t('Edited'))),\n                isEdited && (React.createElement(MessageEditedTimestamp, { calendar: true, open: isEditedTimestampOpen })))))));\n};\nconst MemoizedMessageSimple = React.memo(MessageSimpleWithContext, areMessageUIPropsEqual);\n/**\n * The default UI component that renders a message and receives functionality and logic from the MessageContext.\n */\nexport const MessageSimple = (props) => {\n    const messageContext = useMessageContext('MessageSimple');\n    return React.createElement(MemoizedMessageSimple, { ...messageContext, ...props });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}