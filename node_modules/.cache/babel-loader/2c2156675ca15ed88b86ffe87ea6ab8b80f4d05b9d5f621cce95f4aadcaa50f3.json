{"ast":null,"code":"import React from 'react';\nimport { isLocalAttachment, isLocalAudioAttachment, isLocalFileAttachment, isLocalImageAttachment, isLocalVideoAttachment, isLocalVoiceRecordingAttachment, isScrapedContent } from 'stream-chat';\nimport { UnsupportedAttachmentPreview as DefaultUnknownAttachmentPreview } from './UnsupportedAttachmentPreview';\nimport { VoiceRecordingPreview as DefaultVoiceRecordingPreview } from './VoiceRecordingPreview';\nimport { FileAttachmentPreview as DefaultFilePreview } from './FileAttachmentPreview';\nimport { ImageAttachmentPreview as DefaultImagePreview } from './ImageAttachmentPreview';\nimport { useAttachmentManagerState, useMessageComposer } from '../hooks';\nexport const AttachmentPreviewList = _ref => {\n  let {\n    AudioAttachmentPreview = DefaultFilePreview,\n    FileAttachmentPreview = DefaultFilePreview,\n    ImageAttachmentPreview = DefaultImagePreview,\n    UnsupportedAttachmentPreview = DefaultUnknownAttachmentPreview,\n    VideoAttachmentPreview = DefaultFilePreview,\n    VoiceRecordingPreview = DefaultVoiceRecordingPreview\n  } = _ref;\n  const messageComposer = useMessageComposer();\n  const {\n    attachments\n  } = useAttachmentManagerState();\n  if (!attachments.length) return null;\n  return React.createElement(\"div\", {\n    className: 'str-chat__attachment-preview-list'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__attachment-list-scroll-container',\n    \"data-testid\": 'attachment-list-scroll-container'\n  }, attachments.map(attachment => {\n    if (isScrapedContent(attachment)) return null;\n    if (isLocalVoiceRecordingAttachment(attachment)) {\n      return React.createElement(VoiceRecordingPreview, {\n        attachment: attachment,\n        handleRetry: messageComposer.attachmentManager.uploadAttachment,\n        key: attachment.localMetadata.id || attachment.asset_url,\n        removeAttachments: messageComposer.attachmentManager.removeAttachments\n      });\n    } else if (isLocalAudioAttachment(attachment)) {\n      return React.createElement(AudioAttachmentPreview, {\n        attachment: attachment,\n        handleRetry: messageComposer.attachmentManager.uploadAttachment,\n        key: attachment.localMetadata.id || attachment.asset_url,\n        removeAttachments: messageComposer.attachmentManager.removeAttachments\n      });\n    } else if (isLocalVideoAttachment(attachment)) {\n      return React.createElement(VideoAttachmentPreview, {\n        attachment: attachment,\n        handleRetry: messageComposer.attachmentManager.uploadAttachment,\n        key: attachment.localMetadata.id || attachment.asset_url,\n        removeAttachments: messageComposer.attachmentManager.removeAttachments\n      });\n    } else if (isLocalImageAttachment(attachment)) {\n      return React.createElement(ImageAttachmentPreview, {\n        attachment: attachment,\n        handleRetry: messageComposer.attachmentManager.uploadAttachment,\n        key: attachment.localMetadata.id || attachment.image_url,\n        removeAttachments: messageComposer.attachmentManager.removeAttachments\n      });\n    } else if (isLocalFileAttachment(attachment)) {\n      return React.createElement(FileAttachmentPreview, {\n        attachment: attachment,\n        handleRetry: messageComposer.attachmentManager.uploadAttachment,\n        key: attachment.localMetadata.id || attachment.asset_url,\n        removeAttachments: messageComposer.attachmentManager.removeAttachments\n      });\n    } else if (isLocalAttachment(attachment)) {\n      return React.createElement(UnsupportedAttachmentPreview, {\n        attachment: attachment,\n        handleRetry: messageComposer.attachmentManager.uploadAttachment,\n        key: attachment.localMetadata.id,\n        removeAttachments: messageComposer.attachmentManager.removeAttachments\n      });\n    }\n    return null;\n  })));\n};","map":{"version":3,"names":["React","isLocalAttachment","isLocalAudioAttachment","isLocalFileAttachment","isLocalImageAttachment","isLocalVideoAttachment","isLocalVoiceRecordingAttachment","isScrapedContent","UnsupportedAttachmentPreview","DefaultUnknownAttachmentPreview","VoiceRecordingPreview","DefaultVoiceRecordingPreview","FileAttachmentPreview","DefaultFilePreview","ImageAttachmentPreview","DefaultImagePreview","useAttachmentManagerState","useMessageComposer","AttachmentPreviewList","_ref","AudioAttachmentPreview","VideoAttachmentPreview","messageComposer","attachments","length","createElement","className","map","attachment","handleRetry","attachmentManager","uploadAttachment","key","localMetadata","id","asset_url","removeAttachments","image_url"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/MessageInput/AttachmentPreviewList/AttachmentPreviewList.js"],"sourcesContent":["import React from 'react';\nimport { isLocalAttachment, isLocalAudioAttachment, isLocalFileAttachment, isLocalImageAttachment, isLocalVideoAttachment, isLocalVoiceRecordingAttachment, isScrapedContent, } from 'stream-chat';\nimport { UnsupportedAttachmentPreview as DefaultUnknownAttachmentPreview } from './UnsupportedAttachmentPreview';\nimport { VoiceRecordingPreview as DefaultVoiceRecordingPreview } from './VoiceRecordingPreview';\nimport { FileAttachmentPreview as DefaultFilePreview } from './FileAttachmentPreview';\nimport { ImageAttachmentPreview as DefaultImagePreview } from './ImageAttachmentPreview';\nimport { useAttachmentManagerState, useMessageComposer } from '../hooks';\nexport const AttachmentPreviewList = ({ AudioAttachmentPreview = DefaultFilePreview, FileAttachmentPreview = DefaultFilePreview, ImageAttachmentPreview = DefaultImagePreview, UnsupportedAttachmentPreview = DefaultUnknownAttachmentPreview, VideoAttachmentPreview = DefaultFilePreview, VoiceRecordingPreview = DefaultVoiceRecordingPreview, }) => {\n    const messageComposer = useMessageComposer();\n    const { attachments } = useAttachmentManagerState();\n    if (!attachments.length)\n        return null;\n    return (React.createElement(\"div\", { className: 'str-chat__attachment-preview-list' },\n        React.createElement(\"div\", { className: 'str-chat__attachment-list-scroll-container', \"data-testid\": 'attachment-list-scroll-container' }, attachments.map((attachment) => {\n            if (isScrapedContent(attachment))\n                return null;\n            if (isLocalVoiceRecordingAttachment(attachment)) {\n                return (React.createElement(VoiceRecordingPreview, { attachment: attachment, handleRetry: messageComposer.attachmentManager.uploadAttachment, key: attachment.localMetadata.id || attachment.asset_url, removeAttachments: messageComposer.attachmentManager.removeAttachments }));\n            }\n            else if (isLocalAudioAttachment(attachment)) {\n                return (React.createElement(AudioAttachmentPreview, { attachment: attachment, handleRetry: messageComposer.attachmentManager.uploadAttachment, key: attachment.localMetadata.id || attachment.asset_url, removeAttachments: messageComposer.attachmentManager.removeAttachments }));\n            }\n            else if (isLocalVideoAttachment(attachment)) {\n                return (React.createElement(VideoAttachmentPreview, { attachment: attachment, handleRetry: messageComposer.attachmentManager.uploadAttachment, key: attachment.localMetadata.id || attachment.asset_url, removeAttachments: messageComposer.attachmentManager.removeAttachments }));\n            }\n            else if (isLocalImageAttachment(attachment)) {\n                return (React.createElement(ImageAttachmentPreview, { attachment: attachment, handleRetry: messageComposer.attachmentManager.uploadAttachment, key: attachment.localMetadata.id || attachment.image_url, removeAttachments: messageComposer.attachmentManager.removeAttachments }));\n            }\n            else if (isLocalFileAttachment(attachment)) {\n                return (React.createElement(FileAttachmentPreview, { attachment: attachment, handleRetry: messageComposer.attachmentManager.uploadAttachment, key: attachment.localMetadata.id || attachment.asset_url, removeAttachments: messageComposer.attachmentManager.removeAttachments }));\n            }\n            else if (isLocalAttachment(attachment)) {\n                return (React.createElement(UnsupportedAttachmentPreview, { attachment: attachment, handleRetry: messageComposer.attachmentManager.uploadAttachment, key: attachment.localMetadata.id, removeAttachments: messageComposer.attachmentManager.removeAttachments }));\n            }\n            return null;\n        }))));\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}