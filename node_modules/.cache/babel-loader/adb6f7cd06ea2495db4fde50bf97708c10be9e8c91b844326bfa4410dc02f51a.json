{"ast":null,"code":"import _objectSpread from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport throttle from 'lodash.throttle';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { ChannelPreviewMessenger } from './ChannelPreviewMessenger';\nimport { useIsChannelMuted } from './hooks/useIsChannelMuted';\nimport { useChannelPreviewInfo } from './hooks/useChannelPreviewInfo';\nimport { getLatestMessagePreview as defaultGetLatestMessagePreview } from './utils';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { useMessageDeliveryStatus } from './hooks/useMessageDeliveryStatus';\nexport const ChannelPreview = props => {\n  const {\n    active,\n    channel,\n    channelUpdateCount,\n    getLatestMessagePreview = defaultGetLatestMessagePreview,\n    Preview = ChannelPreviewMessenger\n  } = props;\n  const {\n    channel: activeChannel,\n    client,\n    isMessageAIGenerated,\n    setActiveChannel\n  } = useChatContext('ChannelPreview');\n  const {\n    t,\n    userLanguage\n  } = useTranslationContext('ChannelPreview');\n  const {\n    displayImage,\n    displayTitle,\n    groupChannelDisplayInfo\n  } = useChannelPreviewInfo({\n    channel\n  });\n  const [lastMessage, setLastMessage] = useState(channel.state.messages[channel.state.messages.length - 1]);\n  const [unread, setUnread] = useState(0);\n  const {\n    messageDeliveryStatus\n  } = useMessageDeliveryStatus({\n    channel,\n    lastMessage\n  });\n  const isActive = typeof active === 'undefined' ? (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.cid) === channel.cid : active;\n  const {\n    muted\n  } = useIsChannelMuted(channel);\n  useEffect(() => {\n    const handleEvent = event => {\n      if (!event.cid) return setUnread(0);\n      if (channel.cid === event.cid) setUnread(0);\n    };\n    client.on('notification.mark_read', handleEvent);\n    return () => client.off('notification.mark_read', handleEvent);\n  }, [channel, client]);\n  useEffect(() => {\n    const handleEvent = event => {\n      var _event$user, _client$user;\n      if (channel.cid !== event.cid) return;\n      if (((_event$user = event.user) === null || _event$user === void 0 ? void 0 : _event$user.id) !== ((_client$user = client.user) === null || _client$user === void 0 ? void 0 : _client$user.id)) return;\n      setUnread(channel.countUnread());\n    };\n    channel.on('notification.mark_unread', handleEvent);\n    return () => {\n      channel.off('notification.mark_unread', handleEvent);\n    };\n  }, [channel, client]);\n  const refreshUnreadCount = useMemo(() => throttle(() => {\n    if (muted) {\n      setUnread(0);\n    } else {\n      setUnread(channel.countUnread());\n    }\n  }, 400), [channel, muted]);\n  useEffect(() => {\n    refreshUnreadCount();\n    const handleEvent = () => {\n      setLastMessage(channel.state.latestMessages[channel.state.latestMessages.length - 1]);\n      refreshUnreadCount();\n    };\n    channel.on('message.new', handleEvent);\n    channel.on('message.updated', handleEvent);\n    channel.on('message.deleted', handleEvent);\n    channel.on('message.undeleted', handleEvent);\n    channel.on('channel.truncated', handleEvent);\n    return () => {\n      channel.off('message.new', handleEvent);\n      channel.off('message.updated', handleEvent);\n      channel.off('message.deleted', handleEvent);\n      channel.off('message.undeleted', handleEvent);\n      channel.off('channel.truncated', handleEvent);\n    };\n  }, [channel, refreshUnreadCount, channelUpdateCount]);\n  if (!Preview) return null;\n  const latestMessagePreview = getLatestMessagePreview(channel, t, userLanguage, isMessageAIGenerated);\n  return React.createElement(Preview, _objectSpread(_objectSpread({}, props), {}, {\n    active: isActive,\n    displayImage: displayImage,\n    displayTitle: displayTitle,\n    groupChannelDisplayInfo: groupChannelDisplayInfo,\n    lastMessage: lastMessage,\n    latestMessage: latestMessagePreview,\n    latestMessagePreview: latestMessagePreview,\n    messageDeliveryStatus: messageDeliveryStatus,\n    setActiveChannel: setActiveChannel,\n    unread: unread\n  }));\n};","map":{"version":3,"names":["throttle","React","useEffect","useMemo","useState","ChannelPreviewMessenger","useIsChannelMuted","useChannelPreviewInfo","getLatestMessagePreview","defaultGetLatestMessagePreview","useChatContext","useTranslationContext","useMessageDeliveryStatus","ChannelPreview","props","active","channel","channelUpdateCount","Preview","activeChannel","client","isMessageAIGenerated","setActiveChannel","t","userLanguage","displayImage","displayTitle","groupChannelDisplayInfo","lastMessage","setLastMessage","state","messages","length","unread","setUnread","messageDeliveryStatus","isActive","cid","muted","handleEvent","event","on","off","_event$user","_client$user","user","id","countUnread","refreshUnreadCount","latestMessages","latestMessagePreview","createElement","_objectSpread","latestMessage"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/ChannelPreview/ChannelPreview.js"],"sourcesContent":["import throttle from 'lodash.throttle';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { ChannelPreviewMessenger } from './ChannelPreviewMessenger';\nimport { useIsChannelMuted } from './hooks/useIsChannelMuted';\nimport { useChannelPreviewInfo } from './hooks/useChannelPreviewInfo';\nimport { getLatestMessagePreview as defaultGetLatestMessagePreview } from './utils';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { useMessageDeliveryStatus } from './hooks/useMessageDeliveryStatus';\nexport const ChannelPreview = (props) => {\n    const { active, channel, channelUpdateCount, getLatestMessagePreview = defaultGetLatestMessagePreview, Preview = ChannelPreviewMessenger, } = props;\n    const { channel: activeChannel, client, isMessageAIGenerated, setActiveChannel, } = useChatContext('ChannelPreview');\n    const { t, userLanguage } = useTranslationContext('ChannelPreview');\n    const { displayImage, displayTitle, groupChannelDisplayInfo } = useChannelPreviewInfo({\n        channel,\n    });\n    const [lastMessage, setLastMessage] = useState(channel.state.messages[channel.state.messages.length - 1]);\n    const [unread, setUnread] = useState(0);\n    const { messageDeliveryStatus } = useMessageDeliveryStatus({\n        channel,\n        lastMessage,\n    });\n    const isActive = typeof active === 'undefined' ? activeChannel?.cid === channel.cid : active;\n    const { muted } = useIsChannelMuted(channel);\n    useEffect(() => {\n        const handleEvent = (event) => {\n            if (!event.cid)\n                return setUnread(0);\n            if (channel.cid === event.cid)\n                setUnread(0);\n        };\n        client.on('notification.mark_read', handleEvent);\n        return () => client.off('notification.mark_read', handleEvent);\n    }, [channel, client]);\n    useEffect(() => {\n        const handleEvent = (event) => {\n            if (channel.cid !== event.cid)\n                return;\n            if (event.user?.id !== client.user?.id)\n                return;\n            setUnread(channel.countUnread());\n        };\n        channel.on('notification.mark_unread', handleEvent);\n        return () => {\n            channel.off('notification.mark_unread', handleEvent);\n        };\n    }, [channel, client]);\n    const refreshUnreadCount = useMemo(() => throttle(() => {\n        if (muted) {\n            setUnread(0);\n        }\n        else {\n            setUnread(channel.countUnread());\n        }\n    }, 400), [channel, muted]);\n    useEffect(() => {\n        refreshUnreadCount();\n        const handleEvent = () => {\n            setLastMessage(channel.state.latestMessages[channel.state.latestMessages.length - 1]);\n            refreshUnreadCount();\n        };\n        channel.on('message.new', handleEvent);\n        channel.on('message.updated', handleEvent);\n        channel.on('message.deleted', handleEvent);\n        channel.on('message.undeleted', handleEvent);\n        channel.on('channel.truncated', handleEvent);\n        return () => {\n            channel.off('message.new', handleEvent);\n            channel.off('message.updated', handleEvent);\n            channel.off('message.deleted', handleEvent);\n            channel.off('message.undeleted', handleEvent);\n            channel.off('channel.truncated', handleEvent);\n        };\n    }, [channel, refreshUnreadCount, channelUpdateCount]);\n    if (!Preview)\n        return null;\n    const latestMessagePreview = getLatestMessagePreview(channel, t, userLanguage, isMessageAIGenerated);\n    return (React.createElement(Preview, { ...props, active: isActive, displayImage: displayImage, displayTitle: displayTitle, groupChannelDisplayInfo: groupChannelDisplayInfo, lastMessage: lastMessage, latestMessage: latestMessagePreview, latestMessagePreview: latestMessagePreview, messageDeliveryStatus: messageDeliveryStatus, setActiveChannel: setActiveChannel, unread: unread }));\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}