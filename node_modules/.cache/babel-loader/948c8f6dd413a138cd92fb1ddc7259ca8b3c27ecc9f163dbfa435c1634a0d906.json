{"ast":null,"code":"import React, { useMemo } from 'react';\nimport clsx from 'clsx';\nimport { Attachment as DefaultAttachment } from '../Attachment';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { Poll } from '../Poll';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { useChannelActionContext } from '../../context/ChannelActionContext';\nimport { renderText as defaultRenderText } from './renderText';\nexport const QuotedMessage = _ref => {\n  var _ref2, _quoted_message$i18n, _quoted_message$attac, _message$attachments;\n  let {\n    renderText: propsRenderText\n  } = _ref;\n  const {\n    Attachment = DefaultAttachment,\n    Avatar: ContextAvatar\n  } = useComponentContext('QuotedMessage');\n  const {\n    client\n  } = useChatContext();\n  const {\n    isMyMessage,\n    message,\n    renderText: contextRenderText\n  } = useMessageContext('QuotedMessage');\n  const {\n    t,\n    userLanguage\n  } = useTranslationContext('QuotedMessage');\n  const {\n    jumpToMessage\n  } = useChannelActionContext('QuotedMessage');\n  const renderText = (_ref2 = propsRenderText !== null && propsRenderText !== void 0 ? propsRenderText : contextRenderText) !== null && _ref2 !== void 0 ? _ref2 : defaultRenderText;\n  const Avatar = ContextAvatar || DefaultAvatar;\n  const {\n    quoted_message\n  } = message;\n  const poll = (quoted_message === null || quoted_message === void 0 ? void 0 : quoted_message.poll_id) && client.polls.fromState(quoted_message.poll_id);\n  const quotedMessageDeleted = (quoted_message === null || quoted_message === void 0 ? void 0 : quoted_message.deleted_at) || (quoted_message === null || quoted_message === void 0 ? void 0 : quoted_message.type) === 'deleted';\n  const quotedMessageText = quotedMessageDeleted ? t('This message was deleted...') : (quoted_message === null || quoted_message === void 0 || (_quoted_message$i18n = quoted_message.i18n) === null || _quoted_message$i18n === void 0 ? void 0 : _quoted_message$i18n[\"\".concat(userLanguage, \"_text\")]) || (quoted_message === null || quoted_message === void 0 ? void 0 : quoted_message.text);\n  const quotedMessageAttachment = quoted_message !== null && quoted_message !== void 0 && (_quoted_message$attac = quoted_message.attachments) !== null && _quoted_message$attac !== void 0 && _quoted_message$attac.length && !quotedMessageDeleted ? quoted_message.attachments[0] : null;\n  const renderedText = useMemo(() => renderText(quotedMessageText, quoted_message === null || quoted_message === void 0 ? void 0 : quoted_message.mentioned_users), [quotedMessageText, quoted_message === null || quoted_message === void 0 ? void 0 : quoted_message.mentioned_users, renderText]);\n  if (!quoted_message) return null;\n  if (!quoted_message.poll && !quotedMessageText && !quotedMessageAttachment) return null;\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: clsx('str-chat__quoted-message-preview', {\n      mine: isMyMessage()\n    }),\n    \"data-testid\": 'quoted-message',\n    onClickCapture: e => {\n      e.stopPropagation();\n      e.preventDefault();\n      jumpToMessage(quoted_message.id);\n    }\n  }, quoted_message.user && React.createElement(Avatar, {\n    className: 'str-chat__avatar--quoted-message-sender',\n    image: quoted_message.user.image,\n    name: quoted_message.user.name || quoted_message.user.id,\n    user: quoted_message.user\n  }), React.createElement(\"div\", {\n    className: 'str-chat__quoted-message-bubble',\n    \"data-testid\": 'quoted-message-contents'\n  }, poll ? React.createElement(Poll, {\n    isQuoted: true,\n    poll: poll\n  }) : React.createElement(React.Fragment, null, quotedMessageAttachment && React.createElement(Attachment, {\n    attachments: [quotedMessageAttachment],\n    isQuoted: true\n  }), React.createElement(\"div\", {\n    className: 'str-chat__quoted-message-bubble__text',\n    \"data-testid\": 'quoted-message-text'\n  }, renderedText)))), (_message$attachments = message.attachments) !== null && _message$attachments !== void 0 && _message$attachments.length ? React.createElement(Attachment, {\n    attachments: message.attachments\n  }) : null);\n};","map":{"version":3,"names":["React","useMemo","clsx","Attachment","DefaultAttachment","Avatar","DefaultAvatar","Poll","useChatContext","useComponentContext","useMessageContext","useTranslationContext","useChannelActionContext","renderText","defaultRenderText","QuotedMessage","_ref","_ref2","_quoted_message$i18n","_quoted_message$attac","_message$attachments","propsRenderText","ContextAvatar","client","isMyMessage","message","contextRenderText","t","userLanguage","jumpToMessage","quoted_message","poll","poll_id","polls","fromState","quotedMessageDeleted","deleted_at","type","quotedMessageText","i18n","concat","text","quotedMessageAttachment","attachments","length","renderedText","mentioned_users","createElement","Fragment","className","mine","onClickCapture","e","stopPropagation","preventDefault","id","user","image","name","isQuoted"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/Message/QuotedMessage.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport clsx from 'clsx';\nimport { Attachment as DefaultAttachment } from '../Attachment';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { Poll } from '../Poll';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { useChannelActionContext } from '../../context/ChannelActionContext';\nimport { renderText as defaultRenderText } from './renderText';\nexport const QuotedMessage = ({ renderText: propsRenderText }) => {\n    const { Attachment = DefaultAttachment, Avatar: ContextAvatar } = useComponentContext('QuotedMessage');\n    const { client } = useChatContext();\n    const { isMyMessage, message, renderText: contextRenderText, } = useMessageContext('QuotedMessage');\n    const { t, userLanguage } = useTranslationContext('QuotedMessage');\n    const { jumpToMessage } = useChannelActionContext('QuotedMessage');\n    const renderText = propsRenderText ?? contextRenderText ?? defaultRenderText;\n    const Avatar = ContextAvatar || DefaultAvatar;\n    const { quoted_message } = message;\n    const poll = quoted_message?.poll_id && client.polls.fromState(quoted_message.poll_id);\n    const quotedMessageDeleted = quoted_message?.deleted_at || quoted_message?.type === 'deleted';\n    const quotedMessageText = quotedMessageDeleted\n        ? t('This message was deleted...')\n        : quoted_message?.i18n?.[`${userLanguage}_text`] ||\n            quoted_message?.text;\n    const quotedMessageAttachment = quoted_message?.attachments?.length && !quotedMessageDeleted\n        ? quoted_message.attachments[0]\n        : null;\n    const renderedText = useMemo(() => renderText(quotedMessageText, quoted_message?.mentioned_users), [quotedMessageText, quoted_message?.mentioned_users, renderText]);\n    if (!quoted_message)\n        return null;\n    if (!quoted_message.poll && !quotedMessageText && !quotedMessageAttachment)\n        return null;\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: clsx('str-chat__quoted-message-preview', { mine: isMyMessage() }), \"data-testid\": 'quoted-message', onClickCapture: (e) => {\n                e.stopPropagation();\n                e.preventDefault();\n                jumpToMessage(quoted_message.id);\n            } },\n            quoted_message.user && (React.createElement(Avatar, { className: 'str-chat__avatar--quoted-message-sender', image: quoted_message.user.image, name: quoted_message.user.name || quoted_message.user.id, user: quoted_message.user })),\n            React.createElement(\"div\", { className: 'str-chat__quoted-message-bubble', \"data-testid\": 'quoted-message-contents' }, poll ? (React.createElement(Poll, { isQuoted: true, poll: poll })) : (React.createElement(React.Fragment, null,\n                quotedMessageAttachment && (React.createElement(Attachment, { attachments: [quotedMessageAttachment], isQuoted: true })),\n                React.createElement(\"div\", { className: 'str-chat__quoted-message-bubble__text', \"data-testid\": 'quoted-message-text' }, renderedText))))),\n        message.attachments?.length ? (React.createElement(Attachment, { attachments: message.attachments })) : null));\n};\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,OAAO,QAAQ,OAAO;AACtC,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,UAAU,IAAIC,iBAAiB,QAAQ,eAAe;AAC/D,SAASC,MAAM,IAAIC,aAAa,QAAQ,WAAW;AACnD,SAASC,IAAI,QAAQ,SAAS;AAC9B,SAASC,cAAc,QAAQ,2BAA2B;AAC1D,SAASC,mBAAmB,QAAQ,gCAAgC;AACpE,SAASC,iBAAiB,QAAQ,8BAA8B;AAChE,SAASC,qBAAqB,QAAQ,kCAAkC;AACxE,SAASC,uBAAuB,QAAQ,oCAAoC;AAC5E,SAASC,UAAU,IAAIC,iBAAiB,QAAQ,cAAc;AAC9D,OAAO,MAAMC,aAAa,GAAGC,IAAA,IAAqC;EAAA,IAAAC,KAAA,EAAAC,oBAAA,EAAAC,qBAAA,EAAAC,oBAAA;EAAA,IAApC;IAAEP,UAAU,EAAEQ;EAAgB,CAAC,GAAAL,IAAA;EACzD,MAAM;IAAEb,UAAU,GAAGC,iBAAiB;IAAEC,MAAM,EAAEiB;EAAc,CAAC,GAAGb,mBAAmB,CAAC,eAAe,CAAC;EACtG,MAAM;IAAEc;EAAO,CAAC,GAAGf,cAAc,CAAC,CAAC;EACnC,MAAM;IAAEgB,WAAW;IAAEC,OAAO;IAAEZ,UAAU,EAAEa;EAAmB,CAAC,GAAGhB,iBAAiB,CAAC,eAAe,CAAC;EACnG,MAAM;IAAEiB,CAAC;IAAEC;EAAa,CAAC,GAAGjB,qBAAqB,CAAC,eAAe,CAAC;EAClE,MAAM;IAAEkB;EAAc,CAAC,GAAGjB,uBAAuB,CAAC,eAAe,CAAC;EAClE,MAAMC,UAAU,IAAAI,KAAA,GAAGI,eAAe,aAAfA,eAAe,cAAfA,eAAe,GAAIK,iBAAiB,cAAAT,KAAA,cAAAA,KAAA,GAAIH,iBAAiB;EAC5E,MAAMT,MAAM,GAAGiB,aAAa,IAAIhB,aAAa;EAC7C,MAAM;IAAEwB;EAAe,CAAC,GAAGL,OAAO;EAClC,MAAMM,IAAI,GAAG,CAAAD,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEE,OAAO,KAAIT,MAAM,CAACU,KAAK,CAACC,SAAS,CAACJ,cAAc,CAACE,OAAO,CAAC;EACtF,MAAMG,oBAAoB,GAAG,CAAAL,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEM,UAAU,KAAI,CAAAN,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEO,IAAI,MAAK,SAAS;EAC7F,MAAMC,iBAAiB,GAAGH,oBAAoB,GACxCR,CAAC,CAAC,6BAA6B,CAAC,GAChC,CAAAG,cAAc,aAAdA,cAAc,gBAAAZ,oBAAA,GAAdY,cAAc,CAAES,IAAI,cAAArB,oBAAA,uBAApBA,oBAAA,IAAAsB,MAAA,CAA0BZ,YAAY,WAAQ,MAC5CE,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEW,IAAI;EAC5B,MAAMC,uBAAuB,GAAGZ,cAAc,aAAdA,cAAc,gBAAAX,qBAAA,GAAdW,cAAc,CAAEa,WAAW,cAAAxB,qBAAA,eAA3BA,qBAAA,CAA6ByB,MAAM,IAAI,CAACT,oBAAoB,GACtFL,cAAc,CAACa,WAAW,CAAC,CAAC,CAAC,GAC7B,IAAI;EACV,MAAME,YAAY,GAAG5C,OAAO,CAAC,MAAMY,UAAU,CAACyB,iBAAiB,EAAER,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEgB,eAAe,CAAC,EAAE,CAACR,iBAAiB,EAAER,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEgB,eAAe,EAAEjC,UAAU,CAAC,CAAC;EACpK,IAAI,CAACiB,cAAc,EACf,OAAO,IAAI;EACf,IAAI,CAACA,cAAc,CAACC,IAAI,IAAI,CAACO,iBAAiB,IAAI,CAACI,uBAAuB,EACtE,OAAO,IAAI;EACf,OAAQ1C,KAAK,CAAC+C,aAAa,CAAC/C,KAAK,CAACgD,QAAQ,EAAE,IAAI,EAC5ChD,KAAK,CAAC+C,aAAa,CAAC,KAAK,EAAE;IAAEE,SAAS,EAAE/C,IAAI,CAAC,kCAAkC,EAAE;MAAEgD,IAAI,EAAE1B,WAAW,CAAC;IAAE,CAAC,CAAC;IAAE,aAAa,EAAE,gBAAgB;IAAE2B,cAAc,EAAGC,CAAC,IAAK;MAC3JA,CAAC,CAACC,eAAe,CAAC,CAAC;MACnBD,CAAC,CAACE,cAAc,CAAC,CAAC;MAClBzB,aAAa,CAACC,cAAc,CAACyB,EAAE,CAAC;IACpC;EAAE,CAAC,EACHzB,cAAc,CAAC0B,IAAI,IAAKxD,KAAK,CAAC+C,aAAa,CAAC1C,MAAM,EAAE;IAAE4C,SAAS,EAAE,yCAAyC;IAAEQ,KAAK,EAAE3B,cAAc,CAAC0B,IAAI,CAACC,KAAK;IAAEC,IAAI,EAAE5B,cAAc,CAAC0B,IAAI,CAACE,IAAI,IAAI5B,cAAc,CAAC0B,IAAI,CAACD,EAAE;IAAEC,IAAI,EAAE1B,cAAc,CAAC0B;EAAK,CAAC,CAAE,EACrOxD,KAAK,CAAC+C,aAAa,CAAC,KAAK,EAAE;IAAEE,SAAS,EAAE,iCAAiC;IAAE,aAAa,EAAE;EAA0B,CAAC,EAAElB,IAAI,GAAI/B,KAAK,CAAC+C,aAAa,CAACxC,IAAI,EAAE;IAAEoD,QAAQ,EAAE,IAAI;IAAE5B,IAAI,EAAEA;EAAK,CAAC,CAAC,GAAK/B,KAAK,CAAC+C,aAAa,CAAC/C,KAAK,CAACgD,QAAQ,EAAE,IAAI,EACjON,uBAAuB,IAAK1C,KAAK,CAAC+C,aAAa,CAAC5C,UAAU,EAAE;IAAEwC,WAAW,EAAE,CAACD,uBAAuB,CAAC;IAAEiB,QAAQ,EAAE;EAAK,CAAC,CAAE,EACxH3D,KAAK,CAAC+C,aAAa,CAAC,KAAK,EAAE;IAAEE,SAAS,EAAE,uCAAuC;IAAE,aAAa,EAAE;EAAsB,CAAC,EAAEJ,YAAY,CAAC,CAAE,CAAC,CAAC,EAClJ,CAAAzB,oBAAA,GAAAK,OAAO,CAACkB,WAAW,cAAAvB,oBAAA,eAAnBA,oBAAA,CAAqBwB,MAAM,GAAI5C,KAAK,CAAC+C,aAAa,CAAC5C,UAAU,EAAE;IAAEwC,WAAW,EAAElB,OAAO,CAACkB;EAAY,CAAC,CAAC,GAAI,IAAI,CAAC;AACrH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}