{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useStateStore } from '../../../store';\nconst searchControllerStateSelector = value => ({\n  sources: value.sources\n});\nexport const useSearchQueriesInProgress = searchController => {\n  const [queriesInProgress, setQueriesInProgress] = useState([]);\n  const {\n    sources\n  } = useStateStore(searchController.state, searchControllerStateSelector);\n  useEffect(() => {\n    const subscriptions = sources.map(source => source.state.subscribeWithSelector(value => ({\n      isLoading: value.isLoading\n    }), _ref => {\n      let {\n        isLoading\n      } = _ref;\n      setQueriesInProgress(prev => {\n        if (isLoading) return prev.concat(source.type);\n        return prev.filter(type => type !== source.type);\n      });\n    }));\n    return () => {\n      subscriptions.forEach(unsubscribe => unsubscribe());\n    };\n  }, [sources]);\n  return queriesInProgress;\n};","map":{"version":3,"names":["useEffect","useState","useStateStore","searchControllerStateSelector","value","sources","useSearchQueriesInProgress","searchController","queriesInProgress","setQueriesInProgress","state","subscriptions","map","source","subscribeWithSelector","isLoading","_ref","prev","concat","type","filter","forEach","unsubscribe"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/experimental/Search/hooks/useSearchQueriesInProgress.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useStateStore } from '../../../store';\nconst searchControllerStateSelector = (value) => ({\n    sources: value.sources,\n});\nexport const useSearchQueriesInProgress = (searchController) => {\n    const [queriesInProgress, setQueriesInProgress] = useState([]);\n    const { sources } = useStateStore(searchController.state, searchControllerStateSelector);\n    useEffect(() => {\n        const subscriptions = sources.map((source) => source.state.subscribeWithSelector((value) => ({ isLoading: value.isLoading }), ({ isLoading }) => {\n            setQueriesInProgress((prev) => {\n                if (isLoading)\n                    return prev.concat(source.type);\n                return prev.filter((type) => type !== source.type);\n            });\n        }));\n        return () => {\n            subscriptions.forEach((unsubscribe) => unsubscribe());\n        };\n    }, [sources]);\n    return queriesInProgress;\n};\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,aAAa,QAAQ,gBAAgB;AAC9C,MAAMC,6BAA6B,GAAIC,KAAK,KAAM;EAC9CC,OAAO,EAAED,KAAK,CAACC;AACnB,CAAC,CAAC;AACF,OAAO,MAAMC,0BAA0B,GAAIC,gBAAgB,IAAK;EAC5D,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM;IAAEI;EAAQ,CAAC,GAAGH,aAAa,CAACK,gBAAgB,CAACG,KAAK,EAAEP,6BAA6B,CAAC;EACxFH,SAAS,CAAC,MAAM;IACZ,MAAMW,aAAa,GAAGN,OAAO,CAACO,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAACH,KAAK,CAACI,qBAAqB,CAAEV,KAAK,KAAM;MAAEW,SAAS,EAAEX,KAAK,CAACW;IAAU,CAAC,CAAC,EAAEC,IAAA,IAAmB;MAAA,IAAlB;QAAED;MAAU,CAAC,GAAAC,IAAA;MACxIP,oBAAoB,CAAEQ,IAAI,IAAK;QAC3B,IAAIF,SAAS,EACT,OAAOE,IAAI,CAACC,MAAM,CAACL,MAAM,CAACM,IAAI,CAAC;QACnC,OAAOF,IAAI,CAACG,MAAM,CAAED,IAAI,IAAKA,IAAI,KAAKN,MAAM,CAACM,IAAI,CAAC;MACtD,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;IACH,OAAO,MAAM;MACTR,aAAa,CAACU,OAAO,CAAEC,WAAW,IAAKA,WAAW,CAAC,CAAC,CAAC;IACzD,CAAC;EACL,CAAC,EAAE,CAACjB,OAAO,CAAC,CAAC;EACb,OAAOG,iBAAiB;AAC5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}