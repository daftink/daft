{"ast":null,"code":"import _objectSpread from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"context\"];\nimport clsx from 'clsx';\nimport throttle from 'lodash.throttle';\nimport React from 'react';\nimport { EmptyStateIndicator as DefaultEmptyStateIndicator } from '../EmptyStateIndicator';\nimport { LoadingIndicator as DefaultLoadingIndicator } from '../Loading';\nimport { isMessageEdited, Message } from '../Message';\nimport { useComponentContext } from '../../context';\nimport { getIsFirstUnreadMessage, isDateSeparatorMessage, isIntroMessage } from './utils';\nconst PREPEND_OFFSET = 10 ** 7;\nexport function calculateItemIndex(virtuosoIndex, numItemsPrepended) {\n  return virtuosoIndex + numItemsPrepended - PREPEND_OFFSET;\n}\nexport function calculateFirstItemIndex(numItemsPrepended) {\n  return PREPEND_OFFSET - numItemsPrepended;\n}\nexport const makeItemsRenderedHandler = (renderedItemsActions, processedMessages) => throttle(items => {\n  const renderedMessages = items.map(item => {\n    if (!item.originalIndex) return undefined;\n    return processedMessages[calculateItemIndex(item.originalIndex, PREPEND_OFFSET)];\n  }).filter(msg => !!msg);\n  renderedItemsActions.forEach(action => action(renderedMessages));\n}, 200);\n// using 'display: inline-block'\n// traps CSS margins of the item elements, preventing incorrect item measurements\nexport const Item = _ref => {\n  var _context$customClasse;\n  let {\n      context\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  if (!context) return React.createElement(React.Fragment, null);\n  const message = context.processedMessages[calculateItemIndex(props['data-item-index'], context.numItemsPrepended)];\n  const groupStyles = context.messageGroupStyles[message.id];\n  return React.createElement(\"div\", _objectSpread(_objectSpread({}, props), {}, {\n    className: (context === null || context === void 0 || (_context$customClasse = context.customClasses) === null || _context$customClasse === void 0 ? void 0 : _context$customClasse.virtualMessage) || clsx('str-chat__virtual-list-message-wrapper str-chat__li', {\n      [\"str-chat__li--\".concat(groupStyles)]: groupStyles\n    })\n  }));\n};\nexport const Header = _ref2 => {\n  let {\n    context\n  } = _ref2;\n  const {\n    LoadingIndicator = DefaultLoadingIndicator\n  } = useComponentContext('VirtualizedMessageListHeader');\n  return React.createElement(React.Fragment, null, context === null || context === void 0 ? void 0 : context.head, (context === null || context === void 0 ? void 0 : context.loadingMore) && LoadingIndicator && React.createElement(\"div\", {\n    className: 'str-chat__virtual-list__loading'\n  }, React.createElement(LoadingIndicator, {\n    size: 20\n  })));\n};\nexport const EmptyPlaceholder = _ref3 => {\n  let {\n    context\n  } = _ref3;\n  const {\n    EmptyStateIndicator = DefaultEmptyStateIndicator\n  } = useComponentContext('VirtualizedMessageList');\n  // prevent showing that there are no messages if there actually are messages (for some reason virtuoso decides to render empty placeholder first, even though it has the totalCount prop > 0)\n  if (typeof (context === null || context === void 0 ? void 0 : context.processedMessages) !== 'undefined' && context.processedMessages.length > 0) return null;\n  return React.createElement(React.Fragment, null, EmptyStateIndicator && React.createElement(EmptyStateIndicator, {\n    listType: context !== null && context !== void 0 && context.threadList ? 'thread' : 'message'\n  }));\n};\nexport const messageRenderer = (virtuosoIndex, _data, virtuosoContext) => {\n  var _message$user, _maybePrevMessage$use, _message$user2, _maybePrevMessage$use2, _message$user3, _maybeNextMessage$use, _virtuosoRef$current, _messageGroupStyles$m;\n  const {\n    additionalMessageInputProps,\n    closeReactionSelectorOnClick,\n    customMessageActions,\n    customMessageRenderer,\n    DateSeparator,\n    firstUnreadMessageId,\n    formatDate,\n    lastReadDate,\n    lastReadMessageId,\n    lastReceivedMessageId,\n    Message: MessageUIComponent,\n    messageActions,\n    messageGroupStyles,\n    MessageSystem,\n    numItemsPrepended,\n    openThread,\n    ownMessagesReadByOthers,\n    processedMessages: messageList,\n    reactionDetailsSort,\n    shouldGroupByUser,\n    sortReactionDetails,\n    sortReactions,\n    threadList,\n    unreadMessageCount = 0,\n    UnreadMessagesSeparator,\n    virtuosoRef\n  } = virtuosoContext;\n  const streamMessageIndex = calculateItemIndex(virtuosoIndex, numItemsPrepended);\n  if (customMessageRenderer) {\n    return customMessageRenderer(messageList, streamMessageIndex);\n  }\n  const message = messageList[streamMessageIndex];\n  if (!message || isIntroMessage(message)) return React.createElement(\"div\", {\n    style: {\n      height: '1px'\n    }\n  }); // returning null or zero height breaks the virtuoso\n  if (isDateSeparatorMessage(message)) {\n    return DateSeparator ? React.createElement(DateSeparator, {\n      date: message.date,\n      unread: message.unread\n    }) : null;\n  }\n  if (message.type === 'system') {\n    return MessageSystem ? React.createElement(MessageSystem, {\n      message: message\n    }) : null;\n  }\n  const maybePrevMessage = messageList[streamMessageIndex - 1];\n  const maybeNextMessage = messageList[streamMessageIndex + 1];\n  const groupedByUser = shouldGroupByUser && streamMessageIndex > 0 && ((_message$user = message.user) === null || _message$user === void 0 ? void 0 : _message$user.id) === (maybePrevMessage === null || maybePrevMessage === void 0 || (_maybePrevMessage$use = maybePrevMessage.user) === null || _maybePrevMessage$use === void 0 ? void 0 : _maybePrevMessage$use.id);\n  // FIXME: firstOfGroup & endOfGroup should be derived from groupStyles which apply a more complex logic\n  const firstOfGroup = shouldGroupByUser && (((_message$user2 = message.user) === null || _message$user2 === void 0 ? void 0 : _message$user2.id) !== (maybePrevMessage === null || maybePrevMessage === void 0 || (_maybePrevMessage$use2 = maybePrevMessage.user) === null || _maybePrevMessage$use2 === void 0 ? void 0 : _maybePrevMessage$use2.id) || maybePrevMessage && isMessageEdited(maybePrevMessage));\n  const endOfGroup = shouldGroupByUser && (((_message$user3 = message.user) === null || _message$user3 === void 0 ? void 0 : _message$user3.id) !== (maybeNextMessage === null || maybeNextMessage === void 0 || (_maybeNextMessage$use = maybeNextMessage.user) === null || _maybeNextMessage$use === void 0 ? void 0 : _maybeNextMessage$use.id) || isMessageEdited(message));\n  const isFirstUnreadMessage = getIsFirstUnreadMessage({\n    firstUnreadMessageId,\n    isFirstMessage: streamMessageIndex === 0,\n    lastReadDate,\n    lastReadMessageId,\n    message,\n    previousMessage: streamMessageIndex ? messageList[streamMessageIndex - 1] : undefined,\n    unreadMessageCount\n  });\n  return React.createElement(React.Fragment, null, isFirstUnreadMessage && React.createElement(\"div\", {\n    className: 'str-chat__unread-messages-separator-wrapper'\n  }, React.createElement(UnreadMessagesSeparator, {\n    unreadCount: unreadMessageCount\n  })), React.createElement(Message, {\n    additionalMessageInputProps: additionalMessageInputProps,\n    autoscrollToBottom: (_virtuosoRef$current = virtuosoRef.current) === null || _virtuosoRef$current === void 0 ? void 0 : _virtuosoRef$current.autoscrollToBottom,\n    closeReactionSelectorOnClick: closeReactionSelectorOnClick,\n    customMessageActions: customMessageActions,\n    endOfGroup: endOfGroup,\n    firstOfGroup: firstOfGroup,\n    formatDate: formatDate,\n    groupedByUser: groupedByUser,\n    groupStyles: [(_messageGroupStyles$m = messageGroupStyles[message.id]) !== null && _messageGroupStyles$m !== void 0 ? _messageGroupStyles$m : ''],\n    lastReceivedId: lastReceivedMessageId,\n    message: message,\n    Message: MessageUIComponent,\n    messageActions: messageActions,\n    openThread: openThread,\n    reactionDetailsSort: reactionDetailsSort,\n    readBy: ownMessagesReadByOthers[message.id] || [],\n    sortReactionDetails: sortReactionDetails,\n    sortReactions: sortReactions,\n    threadList: threadList\n  }));\n};","map":{"version":3,"names":["clsx","throttle","React","EmptyStateIndicator","DefaultEmptyStateIndicator","LoadingIndicator","DefaultLoadingIndicator","isMessageEdited","Message","useComponentContext","getIsFirstUnreadMessage","isDateSeparatorMessage","isIntroMessage","PREPEND_OFFSET","calculateItemIndex","virtuosoIndex","numItemsPrepended","calculateFirstItemIndex","makeItemsRenderedHandler","renderedItemsActions","processedMessages","items","renderedMessages","map","item","originalIndex","undefined","filter","msg","forEach","action","Item","_ref","_context$customClasse","context","props","_objectWithoutProperties","_excluded","createElement","Fragment","message","groupStyles","messageGroupStyles","id","_objectSpread","className","customClasses","virtualMessage","concat","Header","_ref2","head","loadingMore","size","EmptyPlaceholder","_ref3","length","listType","threadList","messageRenderer","_data","virtuosoContext","_message$user","_maybePrevMessage$use","_message$user2","_maybePrevMessage$use2","_message$user3","_maybeNextMessage$use","_virtuosoRef$current","_messageGroupStyles$m","additionalMessageInputProps","closeReactionSelectorOnClick","customMessageActions","customMessageRenderer","DateSeparator","firstUnreadMessageId","formatDate","lastReadDate","lastReadMessageId","lastReceivedMessageId","MessageUIComponent","messageActions","MessageSystem","openThread","ownMessagesReadByOthers","messageList","reactionDetailsSort","shouldGroupByUser","sortReactionDetails","sortReactions","unreadMessageCount","UnreadMessagesSeparator","virtuosoRef","streamMessageIndex","style","height","date","unread","type","maybePrevMessage","maybeNextMessage","groupedByUser","user","firstOfGroup","endOfGroup","isFirstUnreadMessage","isFirstMessage","previousMessage","unreadCount","autoscrollToBottom","current","lastReceivedId","readBy"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/MessageList/VirtualizedMessageListComponents.js"],"sourcesContent":["import clsx from 'clsx';\nimport throttle from 'lodash.throttle';\nimport React from 'react';\nimport { EmptyStateIndicator as DefaultEmptyStateIndicator } from '../EmptyStateIndicator';\nimport { LoadingIndicator as DefaultLoadingIndicator } from '../Loading';\nimport { isMessageEdited, Message } from '../Message';\nimport { useComponentContext } from '../../context';\nimport { getIsFirstUnreadMessage, isDateSeparatorMessage, isIntroMessage } from './utils';\nconst PREPEND_OFFSET = 10 ** 7;\nexport function calculateItemIndex(virtuosoIndex, numItemsPrepended) {\n    return virtuosoIndex + numItemsPrepended - PREPEND_OFFSET;\n}\nexport function calculateFirstItemIndex(numItemsPrepended) {\n    return PREPEND_OFFSET - numItemsPrepended;\n}\nexport const makeItemsRenderedHandler = (renderedItemsActions, processedMessages) => throttle((items) => {\n    const renderedMessages = items\n        .map((item) => {\n        if (!item.originalIndex)\n            return undefined;\n        return processedMessages[calculateItemIndex(item.originalIndex, PREPEND_OFFSET)];\n    })\n        .filter((msg) => !!msg);\n    renderedItemsActions.forEach((action) => action(renderedMessages));\n}, 200);\n// using 'display: inline-block'\n// traps CSS margins of the item elements, preventing incorrect item measurements\nexport const Item = ({ context, ...props }) => {\n    if (!context)\n        return React.createElement(React.Fragment, null);\n    const message = context.processedMessages[calculateItemIndex(props['data-item-index'], context.numItemsPrepended)];\n    const groupStyles = context.messageGroupStyles[message.id];\n    return (React.createElement(\"div\", { ...props, className: context?.customClasses?.virtualMessage ||\n            clsx('str-chat__virtual-list-message-wrapper str-chat__li', {\n                [`str-chat__li--${groupStyles}`]: groupStyles,\n            }) }));\n};\nexport const Header = ({ context }) => {\n    const { LoadingIndicator = DefaultLoadingIndicator } = useComponentContext('VirtualizedMessageListHeader');\n    return (React.createElement(React.Fragment, null,\n        context?.head,\n        context?.loadingMore && LoadingIndicator && (React.createElement(\"div\", { className: 'str-chat__virtual-list__loading' },\n            React.createElement(LoadingIndicator, { size: 20 })))));\n};\nexport const EmptyPlaceholder = ({ context }) => {\n    const { EmptyStateIndicator = DefaultEmptyStateIndicator } = useComponentContext('VirtualizedMessageList');\n    // prevent showing that there are no messages if there actually are messages (for some reason virtuoso decides to render empty placeholder first, even though it has the totalCount prop > 0)\n    if (typeof context?.processedMessages !== 'undefined' &&\n        context.processedMessages.length > 0)\n        return null;\n    return (React.createElement(React.Fragment, null, EmptyStateIndicator && (React.createElement(EmptyStateIndicator, { listType: context?.threadList ? 'thread' : 'message' }))));\n};\nexport const messageRenderer = (virtuosoIndex, _data, virtuosoContext) => {\n    const { additionalMessageInputProps, closeReactionSelectorOnClick, customMessageActions, customMessageRenderer, DateSeparator, firstUnreadMessageId, formatDate, lastReadDate, lastReadMessageId, lastReceivedMessageId, Message: MessageUIComponent, messageActions, messageGroupStyles, MessageSystem, numItemsPrepended, openThread, ownMessagesReadByOthers, processedMessages: messageList, reactionDetailsSort, shouldGroupByUser, sortReactionDetails, sortReactions, threadList, unreadMessageCount = 0, UnreadMessagesSeparator, virtuosoRef, } = virtuosoContext;\n    const streamMessageIndex = calculateItemIndex(virtuosoIndex, numItemsPrepended);\n    if (customMessageRenderer) {\n        return customMessageRenderer(messageList, streamMessageIndex);\n    }\n    const message = messageList[streamMessageIndex];\n    if (!message || isIntroMessage(message))\n        return React.createElement(\"div\", { style: { height: '1px' } }); // returning null or zero height breaks the virtuoso\n    if (isDateSeparatorMessage(message)) {\n        return DateSeparator ? (React.createElement(DateSeparator, { date: message.date, unread: message.unread })) : null;\n    }\n    if (message.type === 'system') {\n        return MessageSystem ? React.createElement(MessageSystem, { message: message }) : null;\n    }\n    const maybePrevMessage = messageList[streamMessageIndex - 1];\n    const maybeNextMessage = messageList[streamMessageIndex + 1];\n    const groupedByUser = shouldGroupByUser &&\n        streamMessageIndex > 0 &&\n        message.user?.id === maybePrevMessage?.user?.id;\n    // FIXME: firstOfGroup & endOfGroup should be derived from groupStyles which apply a more complex logic\n    const firstOfGroup = shouldGroupByUser &&\n        (message.user?.id !== maybePrevMessage?.user?.id ||\n            (maybePrevMessage && isMessageEdited(maybePrevMessage)));\n    const endOfGroup = shouldGroupByUser &&\n        (message.user?.id !== maybeNextMessage?.user?.id || isMessageEdited(message));\n    const isFirstUnreadMessage = getIsFirstUnreadMessage({\n        firstUnreadMessageId,\n        isFirstMessage: streamMessageIndex === 0,\n        lastReadDate,\n        lastReadMessageId,\n        message,\n        previousMessage: streamMessageIndex ? messageList[streamMessageIndex - 1] : undefined,\n        unreadMessageCount,\n    });\n    return (React.createElement(React.Fragment, null,\n        isFirstUnreadMessage && (React.createElement(\"div\", { className: 'str-chat__unread-messages-separator-wrapper' },\n            React.createElement(UnreadMessagesSeparator, { unreadCount: unreadMessageCount }))),\n        React.createElement(Message, { additionalMessageInputProps: additionalMessageInputProps, autoscrollToBottom: virtuosoRef.current?.autoscrollToBottom, closeReactionSelectorOnClick: closeReactionSelectorOnClick, customMessageActions: customMessageActions, endOfGroup: endOfGroup, firstOfGroup: firstOfGroup, formatDate: formatDate, groupedByUser: groupedByUser, groupStyles: [messageGroupStyles[message.id] ?? ''], lastReceivedId: lastReceivedMessageId, message: message, Message: MessageUIComponent, messageActions: messageActions, openThread: openThread, reactionDetailsSort: reactionDetailsSort, readBy: ownMessagesReadByOthers[message.id] || [], sortReactionDetails: sortReactionDetails, sortReactions: sortReactions, threadList: threadList })));\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}