{"ast":null,"code":"import _objectSpread from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { useMemo } from 'react';\nimport { useLastReadData } from '../useLastReadData';\nimport { getLastReceived } from '../../utils';\nimport { useChatContext } from '../../../../context/ChatContext';\nimport { useComponentContext } from '../../../../context/ComponentContext';\nexport const useMessageListElements = props => {\n  const {\n    channelUnreadUiState,\n    enrichedMessages,\n    internalMessageProps,\n    messageGroupStyles,\n    read,\n    renderMessages,\n    returnAllReadData,\n    threadList\n  } = props;\n  const {\n    client,\n    customClasses\n  } = useChatContext('useMessageListElements');\n  const components = useComponentContext('useMessageListElements');\n  // get the readData, but only for messages submitted by the user themselves\n  const readData = useLastReadData({\n    messages: enrichedMessages,\n    read,\n    returnAllReadData,\n    userID: client.userID\n  });\n  const lastReceivedMessageId = useMemo(() => getLastReceived(enrichedMessages), [enrichedMessages]);\n  const elements = useMemo(() => renderMessages({\n    channelUnreadUiState,\n    components,\n    customClasses,\n    lastReceivedMessageId,\n    messageGroupStyles,\n    messages: enrichedMessages,\n    readData,\n    sharedMessageProps: _objectSpread(_objectSpread({}, internalMessageProps), {}, {\n      threadList\n    })\n  }),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [enrichedMessages, internalMessageProps, lastReceivedMessageId, messageGroupStyles, channelUnreadUiState, readData, renderMessages, threadList]);\n  return elements;\n};","map":{"version":3,"names":["useMemo","useLastReadData","getLastReceived","useChatContext","useComponentContext","useMessageListElements","props","channelUnreadUiState","enrichedMessages","internalMessageProps","messageGroupStyles","read","renderMessages","returnAllReadData","threadList","client","customClasses","components","readData","messages","userID","lastReceivedMessageId","elements","sharedMessageProps","_objectSpread"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useMessageListElements.js"],"sourcesContent":["import { useMemo } from 'react';\nimport { useLastReadData } from '../useLastReadData';\nimport { getLastReceived } from '../../utils';\nimport { useChatContext } from '../../../../context/ChatContext';\nimport { useComponentContext } from '../../../../context/ComponentContext';\nexport const useMessageListElements = (props) => {\n    const { channelUnreadUiState, enrichedMessages, internalMessageProps, messageGroupStyles, read, renderMessages, returnAllReadData, threadList, } = props;\n    const { client, customClasses } = useChatContext('useMessageListElements');\n    const components = useComponentContext('useMessageListElements');\n    // get the readData, but only for messages submitted by the user themselves\n    const readData = useLastReadData({\n        messages: enrichedMessages,\n        read,\n        returnAllReadData,\n        userID: client.userID,\n    });\n    const lastReceivedMessageId = useMemo(() => getLastReceived(enrichedMessages), [enrichedMessages]);\n    const elements = useMemo(() => renderMessages({\n        channelUnreadUiState,\n        components,\n        customClasses,\n        lastReceivedMessageId,\n        messageGroupStyles,\n        messages: enrichedMessages,\n        readData,\n        sharedMessageProps: { ...internalMessageProps, threadList },\n    }), \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        enrichedMessages,\n        internalMessageProps,\n        lastReceivedMessageId,\n        messageGroupStyles,\n        channelUnreadUiState,\n        readData,\n        renderMessages,\n        threadList,\n    ]);\n    return elements;\n};\n"],"mappings":";AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,SAASC,eAAe,QAAQ,oBAAoB;AACpD,SAASC,eAAe,QAAQ,aAAa;AAC7C,SAASC,cAAc,QAAQ,iCAAiC;AAChE,SAASC,mBAAmB,QAAQ,sCAAsC;AAC1E,OAAO,MAAMC,sBAAsB,GAAIC,KAAK,IAAK;EAC7C,MAAM;IAAEC,oBAAoB;IAAEC,gBAAgB;IAAEC,oBAAoB;IAAEC,kBAAkB;IAAEC,IAAI;IAAEC,cAAc;IAAEC,iBAAiB;IAAEC;EAAY,CAAC,GAAGR,KAAK;EACxJ,MAAM;IAAES,MAAM;IAAEC;EAAc,CAAC,GAAGb,cAAc,CAAC,wBAAwB,CAAC;EAC1E,MAAMc,UAAU,GAAGb,mBAAmB,CAAC,wBAAwB,CAAC;EAChE;EACA,MAAMc,QAAQ,GAAGjB,eAAe,CAAC;IAC7BkB,QAAQ,EAAEX,gBAAgB;IAC1BG,IAAI;IACJE,iBAAiB;IACjBO,MAAM,EAAEL,MAAM,CAACK;EACnB,CAAC,CAAC;EACF,MAAMC,qBAAqB,GAAGrB,OAAO,CAAC,MAAME,eAAe,CAACM,gBAAgB,CAAC,EAAE,CAACA,gBAAgB,CAAC,CAAC;EAClG,MAAMc,QAAQ,GAAGtB,OAAO,CAAC,MAAMY,cAAc,CAAC;IAC1CL,oBAAoB;IACpBU,UAAU;IACVD,aAAa;IACbK,qBAAqB;IACrBX,kBAAkB;IAClBS,QAAQ,EAAEX,gBAAgB;IAC1BU,QAAQ;IACRK,kBAAkB,EAAAC,aAAA,CAAAA,aAAA,KAAOf,oBAAoB;MAAEK;IAAU;EAC7D,CAAC,CAAC;EACF;EACA,CACIN,gBAAgB,EAChBC,oBAAoB,EACpBY,qBAAqB,EACrBX,kBAAkB,EAClBH,oBAAoB,EACpBW,QAAQ,EACRN,cAAc,EACdE,UAAU,CACb,CAAC;EACF,OAAOQ,QAAQ;AACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}