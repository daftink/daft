{"ast":null,"code":"import _objectSpread from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"className\", \"getMessageActions\", \"handleDelete\", \"handleEdit\", \"handleFlag\", \"handleMarkUnread\", \"handleMute\", \"handlePin\", \"isUserMuted\", \"mine\", \"open\"];\nimport clsx from 'clsx';\nimport React from 'react';\nimport { CustomMessageActionsList as DefaultCustomMessageActionsList } from './CustomMessageActionsList';\nimport { RemindMeActionButton } from './RemindMeSubmenu';\nimport { useMessageReminder } from '../Message';\nimport { useMessageComposer } from '../MessageInput';\nimport { useChatContext, useComponentContext, useMessageContext, useTranslationContext } from '../../context';\nimport { MESSAGE_ACTIONS } from '../Message/utils';\nconst UnMemoizedMessageActionsBox = props => {\n  const {\n      className,\n      getMessageActions,\n      handleDelete,\n      handleEdit,\n      handleFlag,\n      handleMarkUnread,\n      handleMute,\n      handlePin,\n      isUserMuted,\n      mine,\n      open\n    } = props,\n    restDivProps = _objectWithoutProperties(props, _excluded);\n  const {\n    client\n  } = useChatContext();\n  const {\n    CustomMessageActionsList = DefaultCustomMessageActionsList\n  } = useComponentContext('MessageActionsBox');\n  const {\n    customMessageActions,\n    message,\n    threadList\n  } = useMessageContext('MessageActionsBox');\n  const {\n    t\n  } = useTranslationContext('MessageActionsBox');\n  const messageComposer = useMessageComposer();\n  const reminder = useMessageReminder(message.id);\n  const messageActions = getMessageActions();\n  const handleQuote = () => {\n    messageComposer.setQuotedMessage(message);\n    const elements = message.parent_id ? document.querySelectorAll('.str-chat__thread .str-chat__textarea__textarea') : document.getElementsByClassName('str-chat__textarea__textarea');\n    const textarea = elements.item(0);\n    if (textarea instanceof HTMLTextAreaElement) {\n      textarea.focus();\n    }\n  };\n  const rootClassName = clsx('str-chat__message-actions-box', className, {\n    'str-chat__message-actions-box--open': open\n  });\n  const buttonClassName = 'str-chat__message-actions-list-item str-chat__message-actions-list-item-button';\n  return React.createElement(\"div\", _objectSpread(_objectSpread({}, restDivProps), {}, {\n    className: rootClassName,\n    \"data-testid\": 'message-actions-box'\n  }), React.createElement(\"div\", {\n    \"aria-label\": t('aria/Message Options'),\n    className: 'str-chat__message-actions-list',\n    role: 'listbox'\n  }, React.createElement(CustomMessageActionsList, {\n    customMessageActions: customMessageActions,\n    message: message\n  }), messageActions.indexOf(MESSAGE_ACTIONS.quote) > -1 && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handleQuote,\n    role: 'option'\n  }, t('Reply')), messageActions.indexOf(MESSAGE_ACTIONS.pin) > -1 && !message.parent_id && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handlePin,\n    role: 'option'\n  }, !message.pinned ? t('Pin') : t('Unpin')), messageActions.indexOf(MESSAGE_ACTIONS.markUnread) > -1 && !threadList && !!message.id && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handleMarkUnread,\n    role: 'option'\n  }, t('Mark as unread')), messageActions.indexOf(MESSAGE_ACTIONS.flag) > -1 && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handleFlag,\n    role: 'option'\n  }, t('Flag')), messageActions.indexOf(MESSAGE_ACTIONS.mute) > -1 && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handleMute,\n    role: 'option'\n  }, isUserMuted() ? t('Unmute') : t('Mute')), messageActions.indexOf(MESSAGE_ACTIONS.edit) > -1 && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handleEdit,\n    role: 'option'\n  }, t('Edit Message')), messageActions.indexOf(MESSAGE_ACTIONS.delete) > -1 && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handleDelete,\n    role: 'option'\n  }, t('Delete')), messageActions.indexOf(MESSAGE_ACTIONS.remindMe) > -1 && React.createElement(RemindMeActionButton, {\n    className: buttonClassName,\n    isMine: mine\n  }), messageActions.indexOf(MESSAGE_ACTIONS.saveForLater) > -1 && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: () => reminder ? client.reminders.deleteReminder(reminder.id) : client.reminders.createReminder({\n      messageId: message.id\n    }),\n    role: 'option'\n  }, reminder ? t('Remove reminder') : t('Save for later'))));\n};\n/**\n * A popup box that displays the available actions on a message, such as edit, delete, pin, etc.\n */\nexport const MessageActionsBox = React.memo(UnMemoizedMessageActionsBox);","map":{"version":3,"names":["clsx","React","CustomMessageActionsList","DefaultCustomMessageActionsList","RemindMeActionButton","useMessageReminder","useMessageComposer","useChatContext","useComponentContext","useMessageContext","useTranslationContext","MESSAGE_ACTIONS","UnMemoizedMessageActionsBox","props","className","getMessageActions","handleDelete","handleEdit","handleFlag","handleMarkUnread","handleMute","handlePin","isUserMuted","mine","open","restDivProps","_objectWithoutProperties","_excluded","client","customMessageActions","message","threadList","t","messageComposer","reminder","id","messageActions","handleQuote","setQuotedMessage","elements","parent_id","document","querySelectorAll","getElementsByClassName","textarea","item","HTMLTextAreaElement","focus","rootClassName","buttonClassName","createElement","_objectSpread","role","indexOf","quote","onClick","pin","pinned","markUnread","flag","mute","edit","delete","remindMe","isMine","saveForLater","reminders","deleteReminder","createReminder","messageId","MessageActionsBox","memo"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/MessageActions/MessageActionsBox.js"],"sourcesContent":["import clsx from 'clsx';\nimport React from 'react';\nimport { CustomMessageActionsList as DefaultCustomMessageActionsList } from './CustomMessageActionsList';\nimport { RemindMeActionButton } from './RemindMeSubmenu';\nimport { useMessageReminder } from '../Message';\nimport { useMessageComposer } from '../MessageInput';\nimport { useChatContext, useComponentContext, useMessageContext, useTranslationContext, } from '../../context';\nimport { MESSAGE_ACTIONS } from '../Message/utils';\nconst UnMemoizedMessageActionsBox = (props) => {\n    const { className, getMessageActions, handleDelete, handleEdit, handleFlag, handleMarkUnread, handleMute, handlePin, isUserMuted, mine, open, ...restDivProps } = props;\n    const { client } = useChatContext();\n    const { CustomMessageActionsList = DefaultCustomMessageActionsList } = useComponentContext('MessageActionsBox');\n    const { customMessageActions, message, threadList } = useMessageContext('MessageActionsBox');\n    const { t } = useTranslationContext('MessageActionsBox');\n    const messageComposer = useMessageComposer();\n    const reminder = useMessageReminder(message.id);\n    const messageActions = getMessageActions();\n    const handleQuote = () => {\n        messageComposer.setQuotedMessage(message);\n        const elements = message.parent_id\n            ? document.querySelectorAll('.str-chat__thread .str-chat__textarea__textarea')\n            : document.getElementsByClassName('str-chat__textarea__textarea');\n        const textarea = elements.item(0);\n        if (textarea instanceof HTMLTextAreaElement) {\n            textarea.focus();\n        }\n    };\n    const rootClassName = clsx('str-chat__message-actions-box', className, {\n        'str-chat__message-actions-box--open': open,\n    });\n    const buttonClassName = 'str-chat__message-actions-list-item str-chat__message-actions-list-item-button';\n    return (React.createElement(\"div\", { ...restDivProps, className: rootClassName, \"data-testid\": 'message-actions-box' },\n        React.createElement(\"div\", { \"aria-label\": t('aria/Message Options'), className: 'str-chat__message-actions-list', role: 'listbox' },\n            React.createElement(CustomMessageActionsList, { customMessageActions: customMessageActions, message: message }),\n            messageActions.indexOf(MESSAGE_ACTIONS.quote) > -1 && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: handleQuote, role: 'option' }, t('Reply'))),\n            messageActions.indexOf(MESSAGE_ACTIONS.pin) > -1 && !message.parent_id && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: handlePin, role: 'option' }, !message.pinned ? t('Pin') : t('Unpin'))),\n            messageActions.indexOf(MESSAGE_ACTIONS.markUnread) > -1 &&\n                !threadList &&\n                !!message.id && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: handleMarkUnread, role: 'option' }, t('Mark as unread'))),\n            messageActions.indexOf(MESSAGE_ACTIONS.flag) > -1 && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: handleFlag, role: 'option' }, t('Flag'))),\n            messageActions.indexOf(MESSAGE_ACTIONS.mute) > -1 && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: handleMute, role: 'option' }, isUserMuted() ? t('Unmute') : t('Mute'))),\n            messageActions.indexOf(MESSAGE_ACTIONS.edit) > -1 && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: handleEdit, role: 'option' }, t('Edit Message'))),\n            messageActions.indexOf(MESSAGE_ACTIONS.delete) > -1 && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: handleDelete, role: 'option' }, t('Delete'))),\n            messageActions.indexOf(MESSAGE_ACTIONS.remindMe) > -1 && (React.createElement(RemindMeActionButton, { className: buttonClassName, isMine: mine })),\n            messageActions.indexOf(MESSAGE_ACTIONS.saveForLater) > -1 && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: () => reminder\n                    ? client.reminders.deleteReminder(reminder.id)\n                    : client.reminders.createReminder({ messageId: message.id }), role: 'option' }, reminder ? t('Remove reminder') : t('Save for later'))))));\n};\n/**\n * A popup box that displays the available actions on a message, such as edit, delete, pin, etc.\n */\nexport const MessageActionsBox = React.memo(UnMemoizedMessageActionsBox);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}