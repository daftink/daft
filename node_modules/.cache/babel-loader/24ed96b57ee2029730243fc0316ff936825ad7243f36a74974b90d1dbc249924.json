{"ast":null,"code":"import _objectSpread from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport React, { useContext } from 'react';\nexport const ComponentContext = React.createContext({});\nexport const ComponentProvider = _ref => {\n  let {\n    children,\n    value\n  } = _ref;\n  return React.createElement(ComponentContext.Provider, {\n    value: value\n  }, children);\n};\nexport const useComponentContext = (\n/**\n * @deprecated\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n_componentName) => useContext(ComponentContext);\n/**\n * Typescript currently does not support partial inference, so if ComponentContext\n * typing is desired while using the HOC withComponentContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withComponentContext = Component => {\n  const WithComponentContextComponent = props => {\n    const componentContext = useComponentContext();\n    return React.createElement(Component, _objectSpread(_objectSpread({}, props), componentContext));\n  };\n  WithComponentContextComponent.displayName = (Component.displayName || Component.name || 'Component').replace('Base', '');\n  return WithComponentContextComponent;\n};","map":{"version":3,"names":["React","useContext","ComponentContext","createContext","ComponentProvider","_ref","children","value","createElement","Provider","useComponentContext","_componentName","withComponentContext","Component","WithComponentContextComponent","props","componentContext","_objectSpread","displayName","name","replace"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/context/ComponentContext.js"],"sourcesContent":["import React, { useContext } from 'react';\nexport const ComponentContext = React.createContext({});\nexport const ComponentProvider = ({ children, value, }) => (React.createElement(ComponentContext.Provider, { value: value }, children));\nexport const useComponentContext = (\n/**\n * @deprecated\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n_componentName) => useContext(ComponentContext);\n/**\n * Typescript currently does not support partial inference, so if ComponentContext\n * typing is desired while using the HOC withComponentContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withComponentContext = (Component) => {\n    const WithComponentContextComponent = (props) => {\n        const componentContext = useComponentContext();\n        return React.createElement(Component, { ...props, ...componentContext });\n    };\n    WithComponentContextComponent.displayName = (Component.displayName ||\n        Component.name ||\n        'Component').replace('Base', '');\n    return WithComponentContextComponent;\n};\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAO,MAAMC,gBAAgB,GAAGF,KAAK,CAACG,aAAa,CAAC,CAAC,CAAC,CAAC;AACvD,OAAO,MAAMC,iBAAiB,GAAGC,IAAA;EAAA,IAAC;IAAEC,QAAQ;IAAEC;EAAO,CAAC,GAAAF,IAAA;EAAA,OAAML,KAAK,CAACQ,aAAa,CAACN,gBAAgB,CAACO,QAAQ,EAAE;IAAEF,KAAK,EAAEA;EAAM,CAAC,EAAED,QAAQ,CAAC;AAAA,CAAC;AACvI,OAAO,MAAMI,mBAAmB,GAAGA;AACnC;AACA;AACA;AACA;AACAC,cAAc,KAAKV,UAAU,CAACC,gBAAgB,CAAC;AAC/C;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMU,oBAAoB,GAAIC,SAAS,IAAK;EAC/C,MAAMC,6BAA6B,GAAIC,KAAK,IAAK;IAC7C,MAAMC,gBAAgB,GAAGN,mBAAmB,CAAC,CAAC;IAC9C,OAAOV,KAAK,CAACQ,aAAa,CAACK,SAAS,EAAAI,aAAA,CAAAA,aAAA,KAAOF,KAAK,GAAKC,gBAAgB,CAAE,CAAC;EAC5E,CAAC;EACDF,6BAA6B,CAACI,WAAW,GAAG,CAACL,SAAS,CAACK,WAAW,IAC9DL,SAAS,CAACM,IAAI,IACd,WAAW,EAAEC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EACpC,OAAON,6BAA6B;AACxC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}