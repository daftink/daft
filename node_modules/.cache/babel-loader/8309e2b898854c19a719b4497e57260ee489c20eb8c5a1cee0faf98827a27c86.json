{"ast":null,"code":"import _objectSpread from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { useConnectionRecoveredListener } from './hooks/useConnectionRecoveredListener';\nimport { useMobileNavigation } from './hooks/useMobileNavigation';\nimport { usePaginatedChannels } from './hooks/usePaginatedChannels';\nimport { useChannelListShape, usePrepareShapeHandlers } from './hooks/useChannelListShape';\nimport { useStateStore } from '../../store';\nimport { ChannelListMessenger } from './ChannelListMessenger';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { ChannelPreview } from '../ChannelPreview/ChannelPreview';\nimport { ChannelSearch as DefaultChannelSearch } from '../ChannelSearch/ChannelSearch';\nimport { EmptyStateIndicator as DefaultEmptyStateIndicator } from '../EmptyStateIndicator';\nimport { LoadingChannels } from '../Loading/LoadingChannels';\nimport { LoadMorePaginator } from '../LoadMore/LoadMorePaginator';\nimport { ChannelListContextProvider, useChatContext, useComponentContext } from '../../context';\nimport { NullComponent } from '../UtilityComponents';\nimport { MAX_QUERY_CHANNELS_LIMIT, moveChannelUpwards } from './utils';\nconst DEFAULT_FILTERS = {};\nconst DEFAULT_OPTIONS = {};\nconst DEFAULT_SORT = {};\nconst searchControllerStateSelector = nextValue => ({\n  searchIsActive: nextValue.isActive\n});\nconst UnMemoizedChannelList = props => {\n  var _customClasses$chat, _customClasses$channe;\n  const {\n    additionalChannelSearchProps,\n    allowNewMessagesFromUnfilteredChannels = true,\n    Avatar = DefaultAvatar,\n    channelRenderFilterFn,\n    ChannelSearch = DefaultChannelSearch,\n    customActiveChannel,\n    customQueryChannels,\n    EmptyStateIndicator = DefaultEmptyStateIndicator,\n    filters = {},\n    getLatestMessagePreview,\n    List = ChannelListMessenger,\n    LoadingErrorIndicator = NullComponent,\n    LoadingIndicator = LoadingChannels,\n    lockChannelOrder = false,\n    onAddedToChannel,\n    onChannelDeleted,\n    onChannelHidden,\n    onChannelTruncated,\n    onChannelUpdated,\n    onChannelVisible,\n    onMessageNew,\n    onMessageNewHandler,\n    onRemovedFromChannel,\n    options,\n    Paginator = LoadMorePaginator,\n    Preview,\n    recoveryThrottleIntervalMs,\n    renderChannels,\n    sendChannelsToList = false,\n    setActiveChannelOnMount = true,\n    showChannelSearch = false,\n    sort = DEFAULT_SORT,\n    watchers = {}\n  } = props;\n  const {\n    channel,\n    channelsQueryState,\n    client,\n    closeMobileNav,\n    customClasses,\n    navOpen = false,\n    searchController,\n    setActiveChannel,\n    theme,\n    useImageFlagEmojisOnWindows\n  } = useChatContext('ChannelList');\n  const {\n    Search\n  } = useComponentContext(); // FIXME: us component context to retrieve ChannelPreview UI components too\n  const channelListRef = useRef(null);\n  const [channelUpdateCount, setChannelUpdateCount] = useState(0);\n  const [searchActive, setSearchActive] = useState(false);\n  // Indicator relevant when Search component that relies on SearchController is used\n  const {\n    searchIsActive\n  } = useStateStore(searchController.state, searchControllerStateSelector);\n  /**\n   * Set a channel with id {customActiveChannel} as active and move it to the top of the list.\n   * If customActiveChannel prop is absent, then set the first channel in list as active channel.\n   */\n  const activeChannelHandler = async (channels, setChannels) => {\n    if (!channels.length || channels.length > ((options === null || options === void 0 ? void 0 : options.limit) || MAX_QUERY_CHANNELS_LIMIT)) {\n      return;\n    }\n    if (customActiveChannel) {\n      // FIXME: this is wrong...\n      let customActiveChannelObject = channels.find(chan => chan.id === customActiveChannel);\n      if (!customActiveChannelObject) {\n        [customActiveChannelObject] = await client.queryChannels({\n          id: customActiveChannel\n        });\n      }\n      if (customActiveChannelObject) {\n        setActiveChannel(customActiveChannelObject, watchers);\n        const newChannels = moveChannelUpwards({\n          channels,\n          channelToMove: customActiveChannelObject,\n          sort\n        });\n        setChannels(newChannels);\n      }\n      return;\n    }\n    if (setActiveChannelOnMount) {\n      setActiveChannel(channels[0], watchers);\n    }\n  };\n  /**\n   * For some events, inner properties on the channel will update but the shallow comparison will not\n   * force a re-render. Incrementing this dummy variable ensures the channel previews update.\n   */\n  const forceUpdate = useCallback(() => setChannelUpdateCount(count => count + 1), []);\n  const onSearch = useCallback(event => {\n    var _additionalChannelSea;\n    setSearchActive(!!event.target.value);\n    additionalChannelSearchProps === null || additionalChannelSearchProps === void 0 || (_additionalChannelSea = additionalChannelSearchProps.onSearch) === null || _additionalChannelSea === void 0 || _additionalChannelSea.call(additionalChannelSearchProps, event);\n  }, [additionalChannelSearchProps]);\n  const onSearchExit = useCallback(() => {\n    var _additionalChannelSea2;\n    setSearchActive(false);\n    additionalChannelSearchProps === null || additionalChannelSearchProps === void 0 || (_additionalChannelSea2 = additionalChannelSearchProps.onSearchExit) === null || _additionalChannelSea2 === void 0 || _additionalChannelSea2.call(additionalChannelSearchProps);\n  }, [additionalChannelSearchProps]);\n  const {\n    channels,\n    hasNextPage,\n    loadNextPage,\n    setChannels\n  } = usePaginatedChannels(client, filters || DEFAULT_FILTERS, sort || DEFAULT_SORT, options || DEFAULT_OPTIONS, activeChannelHandler, recoveryThrottleIntervalMs, customQueryChannels);\n  const loadedChannels = channelRenderFilterFn ? channelRenderFilterFn(channels) : channels;\n  useMobileNavigation(channelListRef, navOpen, closeMobileNav);\n  const {\n    customHandler,\n    defaultHandler\n  } = usePrepareShapeHandlers({\n    allowNewMessagesFromUnfilteredChannels,\n    filters,\n    lockChannelOrder,\n    onAddedToChannel,\n    onChannelDeleted,\n    onChannelHidden,\n    onChannelTruncated,\n    onChannelUpdated,\n    onChannelVisible,\n    onMessageNew,\n    onMessageNewHandler,\n    onRemovedFromChannel,\n    setChannels,\n    sort\n    // TODO: implement\n    // customHandleChannelListShape\n  });\n  useChannelListShape(customHandler !== null && customHandler !== void 0 ? customHandler : defaultHandler);\n  // TODO: maybe move this too\n  useConnectionRecoveredListener(forceUpdate);\n  useEffect(() => {\n    const handleEvent = event => {\n      if (event.cid === (channel === null || channel === void 0 ? void 0 : channel.cid)) {\n        setActiveChannel();\n      }\n    };\n    client.on('channel.deleted', handleEvent);\n    client.on('channel.hidden', handleEvent);\n    return () => {\n      client.off('channel.deleted', handleEvent);\n      client.off('channel.hidden', handleEvent);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [channel === null || channel === void 0 ? void 0 : channel.cid]);\n  const renderChannel = item => {\n    const previewProps = {\n      activeChannel: channel,\n      Avatar,\n      channel: item,\n      // forces the update of preview component on channel update\n      channelUpdateCount,\n      getLatestMessagePreview,\n      key: item.cid,\n      Preview,\n      setActiveChannel,\n      watchers\n    };\n    return React.createElement(ChannelPreview, _objectSpread({}, previewProps));\n  };\n  const baseClass = 'str-chat__channel-list';\n  const className = clsx((_customClasses$chat = customClasses === null || customClasses === void 0 ? void 0 : customClasses.chat) !== null && _customClasses$chat !== void 0 ? _customClasses$chat : 'str-chat', theme, (_customClasses$channe = customClasses === null || customClasses === void 0 ? void 0 : customClasses.channelList) !== null && _customClasses$channe !== void 0 ? _customClasses$channe : \"\".concat(baseClass, \" \").concat(baseClass, \"-react\"), {\n    'str-chat--windows-flags': useImageFlagEmojisOnWindows && navigator.userAgent.match(/Win/),\n    [\"\".concat(baseClass, \"--open\")]: navOpen\n  });\n  const showChannelList = !searchActive && !searchIsActive || (additionalChannelSearchProps === null || additionalChannelSearchProps === void 0 ? void 0 : additionalChannelSearchProps.popupResults);\n  return React.createElement(ChannelListContextProvider, {\n    value: {\n      channels,\n      hasNextPage,\n      loadNextPage,\n      setChannels\n    }\n  }, React.createElement(\"div\", {\n    className: className,\n    ref: channelListRef\n  }, showChannelSearch && (Search ? React.createElement(Search, {\n    directMessagingChannelType: additionalChannelSearchProps === null || additionalChannelSearchProps === void 0 ? void 0 : additionalChannelSearchProps.channelType,\n    disabled: additionalChannelSearchProps === null || additionalChannelSearchProps === void 0 ? void 0 : additionalChannelSearchProps.disabled,\n    exitSearchOnInputBlur: additionalChannelSearchProps === null || additionalChannelSearchProps === void 0 ? void 0 : additionalChannelSearchProps.clearSearchOnClickOutside,\n    placeholder: additionalChannelSearchProps === null || additionalChannelSearchProps === void 0 ? void 0 : additionalChannelSearchProps.placeholder\n  }) : React.createElement(ChannelSearch, _objectSpread({\n    onSearch: onSearch,\n    onSearchExit: onSearchExit,\n    setChannels: setChannels\n  }, additionalChannelSearchProps))), showChannelList && React.createElement(List, {\n    error: channelsQueryState.error,\n    loadedChannels: sendChannelsToList ? loadedChannels : undefined,\n    loading: !!channelsQueryState.queryInProgress && ['reload', 'uninitialized'].includes(channelsQueryState.queryInProgress),\n    LoadingErrorIndicator: LoadingErrorIndicator,\n    LoadingIndicator: LoadingIndicator,\n    setChannels: setChannels\n  }, !(loadedChannels !== null && loadedChannels !== void 0 && loadedChannels.length) ? React.createElement(EmptyStateIndicator, {\n    listType: 'channel'\n  }) : React.createElement(Paginator, {\n    hasNextPage: hasNextPage,\n    isLoading: channelsQueryState.queryInProgress === 'load-more',\n    loadNextPage: loadNextPage\n  }, renderChannels ? renderChannels(loadedChannels, renderChannel) : loadedChannels.map(channel => renderChannel(channel))))));\n};\n/**\n * Renders a preview list of Channels, allowing you to select the Channel you want to open\n */\nexport const ChannelList = React.memo(UnMemoizedChannelList);","map":{"version":3,"names":["React","useCallback","useEffect","useRef","useState","clsx","useConnectionRecoveredListener","useMobileNavigation","usePaginatedChannels","useChannelListShape","usePrepareShapeHandlers","useStateStore","ChannelListMessenger","Avatar","DefaultAvatar","ChannelPreview","ChannelSearch","DefaultChannelSearch","EmptyStateIndicator","DefaultEmptyStateIndicator","LoadingChannels","LoadMorePaginator","ChannelListContextProvider","useChatContext","useComponentContext","NullComponent","MAX_QUERY_CHANNELS_LIMIT","moveChannelUpwards","DEFAULT_FILTERS","DEFAULT_OPTIONS","DEFAULT_SORT","searchControllerStateSelector","nextValue","searchIsActive","isActive","UnMemoizedChannelList","props","_customClasses$chat","_customClasses$channe","additionalChannelSearchProps","allowNewMessagesFromUnfilteredChannels","channelRenderFilterFn","customActiveChannel","customQueryChannels","filters","getLatestMessagePreview","List","LoadingErrorIndicator","LoadingIndicator","lockChannelOrder","onAddedToChannel","onChannelDeleted","onChannelHidden","onChannelTruncated","onChannelUpdated","onChannelVisible","onMessageNew","onMessageNewHandler","onRemovedFromChannel","options","Paginator","Preview","recoveryThrottleIntervalMs","renderChannels","sendChannelsToList","setActiveChannelOnMount","showChannelSearch","sort","watchers","channel","channelsQueryState","client","closeMobileNav","customClasses","navOpen","searchController","setActiveChannel","theme","useImageFlagEmojisOnWindows","Search","channelListRef","channelUpdateCount","setChannelUpdateCount","searchActive","setSearchActive","state","activeChannelHandler","channels","setChannels","length","limit","customActiveChannelObject","find","chan","id","queryChannels","newChannels","channelToMove","forceUpdate","count","onSearch","event","_additionalChannelSea","target","value","call","onSearchExit","_additionalChannelSea2","hasNextPage","loadNextPage","loadedChannels","customHandler","defaultHandler","handleEvent","cid","on","off","renderChannel","item","previewProps","activeChannel","key","createElement","_objectSpread","baseClass","className","chat","channelList","concat","navigator","userAgent","match","showChannelList","popupResults","ref","directMessagingChannelType","channelType","disabled","exitSearchOnInputBlur","clearSearchOnClickOutside","placeholder","error","undefined","loading","queryInProgress","includes","listType","isLoading","map","ChannelList","memo"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/ChannelList/ChannelList.js"],"sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { useConnectionRecoveredListener } from './hooks/useConnectionRecoveredListener';\nimport { useMobileNavigation } from './hooks/useMobileNavigation';\nimport { usePaginatedChannels } from './hooks/usePaginatedChannels';\nimport { useChannelListShape, usePrepareShapeHandlers, } from './hooks/useChannelListShape';\nimport { useStateStore } from '../../store';\nimport { ChannelListMessenger } from './ChannelListMessenger';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { ChannelPreview } from '../ChannelPreview/ChannelPreview';\nimport { ChannelSearch as DefaultChannelSearch } from '../ChannelSearch/ChannelSearch';\nimport { EmptyStateIndicator as DefaultEmptyStateIndicator } from '../EmptyStateIndicator';\nimport { LoadingChannels } from '../Loading/LoadingChannels';\nimport { LoadMorePaginator } from '../LoadMore/LoadMorePaginator';\nimport { ChannelListContextProvider, useChatContext, useComponentContext, } from '../../context';\nimport { NullComponent } from '../UtilityComponents';\nimport { MAX_QUERY_CHANNELS_LIMIT, moveChannelUpwards } from './utils';\nconst DEFAULT_FILTERS = {};\nconst DEFAULT_OPTIONS = {};\nconst DEFAULT_SORT = {};\nconst searchControllerStateSelector = (nextValue) => ({\n    searchIsActive: nextValue.isActive,\n});\nconst UnMemoizedChannelList = (props) => {\n    const { additionalChannelSearchProps, allowNewMessagesFromUnfilteredChannels = true, Avatar = DefaultAvatar, channelRenderFilterFn, ChannelSearch = DefaultChannelSearch, customActiveChannel, customQueryChannels, EmptyStateIndicator = DefaultEmptyStateIndicator, filters = {}, getLatestMessagePreview, List = ChannelListMessenger, LoadingErrorIndicator = NullComponent, LoadingIndicator = LoadingChannels, lockChannelOrder = false, onAddedToChannel, onChannelDeleted, onChannelHidden, onChannelTruncated, onChannelUpdated, onChannelVisible, onMessageNew, onMessageNewHandler, onRemovedFromChannel, options, Paginator = LoadMorePaginator, Preview, recoveryThrottleIntervalMs, renderChannels, sendChannelsToList = false, setActiveChannelOnMount = true, showChannelSearch = false, sort = DEFAULT_SORT, watchers = {}, } = props;\n    const { channel, channelsQueryState, client, closeMobileNav, customClasses, navOpen = false, searchController, setActiveChannel, theme, useImageFlagEmojisOnWindows, } = useChatContext('ChannelList');\n    const { Search } = useComponentContext(); // FIXME: us component context to retrieve ChannelPreview UI components too\n    const channelListRef = useRef(null);\n    const [channelUpdateCount, setChannelUpdateCount] = useState(0);\n    const [searchActive, setSearchActive] = useState(false);\n    // Indicator relevant when Search component that relies on SearchController is used\n    const { searchIsActive } = useStateStore(searchController.state, searchControllerStateSelector);\n    /**\n     * Set a channel with id {customActiveChannel} as active and move it to the top of the list.\n     * If customActiveChannel prop is absent, then set the first channel in list as active channel.\n     */\n    const activeChannelHandler = async (channels, setChannels) => {\n        if (!channels.length ||\n            channels.length > (options?.limit || MAX_QUERY_CHANNELS_LIMIT)) {\n            return;\n        }\n        if (customActiveChannel) {\n            // FIXME: this is wrong...\n            let customActiveChannelObject = channels.find((chan) => chan.id === customActiveChannel);\n            if (!customActiveChannelObject) {\n                [customActiveChannelObject] = await client.queryChannels({\n                    id: customActiveChannel,\n                });\n            }\n            if (customActiveChannelObject) {\n                setActiveChannel(customActiveChannelObject, watchers);\n                const newChannels = moveChannelUpwards({\n                    channels,\n                    channelToMove: customActiveChannelObject,\n                    sort,\n                });\n                setChannels(newChannels);\n            }\n            return;\n        }\n        if (setActiveChannelOnMount) {\n            setActiveChannel(channels[0], watchers);\n        }\n    };\n    /**\n     * For some events, inner properties on the channel will update but the shallow comparison will not\n     * force a re-render. Incrementing this dummy variable ensures the channel previews update.\n     */\n    const forceUpdate = useCallback(() => setChannelUpdateCount((count) => count + 1), []);\n    const onSearch = useCallback((event) => {\n        setSearchActive(!!event.target.value);\n        additionalChannelSearchProps?.onSearch?.(event);\n    }, [additionalChannelSearchProps]);\n    const onSearchExit = useCallback(() => {\n        setSearchActive(false);\n        additionalChannelSearchProps?.onSearchExit?.();\n    }, [additionalChannelSearchProps]);\n    const { channels, hasNextPage, loadNextPage, setChannels } = usePaginatedChannels(client, filters || DEFAULT_FILTERS, sort || DEFAULT_SORT, options || DEFAULT_OPTIONS, activeChannelHandler, recoveryThrottleIntervalMs, customQueryChannels);\n    const loadedChannels = channelRenderFilterFn\n        ? channelRenderFilterFn(channels)\n        : channels;\n    useMobileNavigation(channelListRef, navOpen, closeMobileNav);\n    const { customHandler, defaultHandler } = usePrepareShapeHandlers({\n        allowNewMessagesFromUnfilteredChannels,\n        filters,\n        lockChannelOrder,\n        onAddedToChannel,\n        onChannelDeleted,\n        onChannelHidden,\n        onChannelTruncated,\n        onChannelUpdated,\n        onChannelVisible,\n        onMessageNew,\n        onMessageNewHandler,\n        onRemovedFromChannel,\n        setChannels,\n        sort,\n        // TODO: implement\n        // customHandleChannelListShape\n    });\n    useChannelListShape(customHandler ?? defaultHandler);\n    // TODO: maybe move this too\n    useConnectionRecoveredListener(forceUpdate);\n    useEffect(() => {\n        const handleEvent = (event) => {\n            if (event.cid === channel?.cid) {\n                setActiveChannel();\n            }\n        };\n        client.on('channel.deleted', handleEvent);\n        client.on('channel.hidden', handleEvent);\n        return () => {\n            client.off('channel.deleted', handleEvent);\n            client.off('channel.hidden', handleEvent);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [channel?.cid]);\n    const renderChannel = (item) => {\n        const previewProps = {\n            activeChannel: channel,\n            Avatar,\n            channel: item,\n            // forces the update of preview component on channel update\n            channelUpdateCount,\n            getLatestMessagePreview,\n            key: item.cid,\n            Preview,\n            setActiveChannel,\n            watchers,\n        };\n        return React.createElement(ChannelPreview, { ...previewProps });\n    };\n    const baseClass = 'str-chat__channel-list';\n    const className = clsx(customClasses?.chat ?? 'str-chat', theme, customClasses?.channelList ?? `${baseClass} ${baseClass}-react`, {\n        'str-chat--windows-flags': useImageFlagEmojisOnWindows && navigator.userAgent.match(/Win/),\n        [`${baseClass}--open`]: navOpen,\n    });\n    const showChannelList = (!searchActive && !searchIsActive) || additionalChannelSearchProps?.popupResults;\n    return (React.createElement(ChannelListContextProvider, { value: { channels, hasNextPage, loadNextPage, setChannels } },\n        React.createElement(\"div\", { className: className, ref: channelListRef },\n            showChannelSearch &&\n                (Search ? (React.createElement(Search, { directMessagingChannelType: additionalChannelSearchProps?.channelType, disabled: additionalChannelSearchProps?.disabled, exitSearchOnInputBlur: additionalChannelSearchProps?.clearSearchOnClickOutside, placeholder: additionalChannelSearchProps?.placeholder })) : (React.createElement(ChannelSearch, { onSearch: onSearch, onSearchExit: onSearchExit, setChannels: setChannels, ...additionalChannelSearchProps }))),\n            showChannelList && (React.createElement(List, { error: channelsQueryState.error, loadedChannels: sendChannelsToList ? loadedChannels : undefined, loading: !!channelsQueryState.queryInProgress &&\n                    ['reload', 'uninitialized'].includes(channelsQueryState.queryInProgress), LoadingErrorIndicator: LoadingErrorIndicator, LoadingIndicator: LoadingIndicator, setChannels: setChannels }, !loadedChannels?.length ? (React.createElement(EmptyStateIndicator, { listType: 'channel' })) : (React.createElement(Paginator, { hasNextPage: hasNextPage, isLoading: channelsQueryState.queryInProgress === 'load-more', loadNextPage: loadNextPage }, renderChannels\n                ? renderChannels(loadedChannels, renderChannel)\n                : loadedChannels.map((channel) => renderChannel(channel)))))))));\n};\n/**\n * Renders a preview list of Channels, allowing you to select the Channel you want to open\n */\nexport const ChannelList = React.memo(UnMemoizedChannelList);\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACvE,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,8BAA8B,QAAQ,wCAAwC;AACvF,SAASC,mBAAmB,QAAQ,6BAA6B;AACjE,SAASC,oBAAoB,QAAQ,8BAA8B;AACnE,SAASC,mBAAmB,EAAEC,uBAAuB,QAAS,6BAA6B;AAC3F,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAASC,oBAAoB,QAAQ,wBAAwB;AAC7D,SAASC,MAAM,IAAIC,aAAa,QAAQ,WAAW;AACnD,SAASC,cAAc,QAAQ,kCAAkC;AACjE,SAASC,aAAa,IAAIC,oBAAoB,QAAQ,gCAAgC;AACtF,SAASC,mBAAmB,IAAIC,0BAA0B,QAAQ,wBAAwB;AAC1F,SAASC,eAAe,QAAQ,4BAA4B;AAC5D,SAASC,iBAAiB,QAAQ,+BAA+B;AACjE,SAASC,0BAA0B,EAAEC,cAAc,EAAEC,mBAAmB,QAAS,eAAe;AAChG,SAASC,aAAa,QAAQ,sBAAsB;AACpD,SAASC,wBAAwB,EAAEC,kBAAkB,QAAQ,SAAS;AACtE,MAAMC,eAAe,GAAG,CAAC,CAAC;AAC1B,MAAMC,eAAe,GAAG,CAAC,CAAC;AAC1B,MAAMC,YAAY,GAAG,CAAC,CAAC;AACvB,MAAMC,6BAA6B,GAAIC,SAAS,KAAM;EAClDC,cAAc,EAAED,SAAS,CAACE;AAC9B,CAAC,CAAC;AACF,MAAMC,qBAAqB,GAAIC,KAAK,IAAK;EAAA,IAAAC,mBAAA,EAAAC,qBAAA;EACrC,MAAM;IAAEC,4BAA4B;IAAEC,sCAAsC,GAAG,IAAI;IAAE3B,MAAM,GAAGC,aAAa;IAAE2B,qBAAqB;IAAEzB,aAAa,GAAGC,oBAAoB;IAAEyB,mBAAmB;IAAEC,mBAAmB;IAAEzB,mBAAmB,GAAGC,0BAA0B;IAAEyB,OAAO,GAAG,CAAC,CAAC;IAAEC,uBAAuB;IAAEC,IAAI,GAAGlC,oBAAoB;IAAEmC,qBAAqB,GAAGtB,aAAa;IAAEuB,gBAAgB,GAAG5B,eAAe;IAAE6B,gBAAgB,GAAG,KAAK;IAAEC,gBAAgB;IAAEC,gBAAgB;IAAEC,eAAe;IAAEC,kBAAkB;IAAEC,gBAAgB;IAAEC,gBAAgB;IAAEC,YAAY;IAAEC,mBAAmB;IAAEC,oBAAoB;IAAEC,OAAO;IAAEC,SAAS,GAAGvC,iBAAiB;IAAEwC,OAAO;IAAEC,0BAA0B;IAAEC,cAAc;IAAEC,kBAAkB,GAAG,KAAK;IAAEC,uBAAuB,GAAG,IAAI;IAAEC,iBAAiB,GAAG,KAAK;IAAEC,IAAI,GAAGrC,YAAY;IAAEsC,QAAQ,GAAG,CAAC;EAAG,CAAC,GAAGhC,KAAK;EACtzB,MAAM;IAAEiC,OAAO;IAAEC,kBAAkB;IAAEC,MAAM;IAAEC,cAAc;IAAEC,aAAa;IAAEC,OAAO,GAAG,KAAK;IAAEC,gBAAgB;IAAEC,gBAAgB;IAAEC,KAAK;IAAEC;EAA6B,CAAC,GAAGvD,cAAc,CAAC,aAAa,CAAC;EACtM,MAAM;IAAEwD;EAAO,CAAC,GAAGvD,mBAAmB,CAAC,CAAC,CAAC,CAAC;EAC1C,MAAMwD,cAAc,GAAG7E,MAAM,CAAC,IAAI,CAAC;EACnC,MAAM,CAAC8E,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG9E,QAAQ,CAAC,CAAC,CAAC;EAC/D,MAAM,CAAC+E,YAAY,EAAEC,eAAe,CAAC,GAAGhF,QAAQ,CAAC,KAAK,CAAC;EACvD;EACA,MAAM;IAAE6B;EAAe,CAAC,GAAGtB,aAAa,CAACgE,gBAAgB,CAACU,KAAK,EAAEtD,6BAA6B,CAAC;EAC/F;AACJ;AACA;AACA;EACI,MAAMuD,oBAAoB,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,WAAW,KAAK;IAC1D,IAAI,CAACD,QAAQ,CAACE,MAAM,IAChBF,QAAQ,CAACE,MAAM,IAAI,CAAA9B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE+B,KAAK,KAAIhE,wBAAwB,CAAC,EAAE;MAChE;IACJ;IACA,IAAIgB,mBAAmB,EAAE;MACrB;MACA,IAAIiD,yBAAyB,GAAGJ,QAAQ,CAACK,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKpD,mBAAmB,CAAC;MACxF,IAAI,CAACiD,yBAAyB,EAAE;QAC5B,CAACA,yBAAyB,CAAC,GAAG,MAAMpB,MAAM,CAACwB,aAAa,CAAC;UACrDD,EAAE,EAAEpD;QACR,CAAC,CAAC;MACN;MACA,IAAIiD,yBAAyB,EAAE;QAC3Bf,gBAAgB,CAACe,yBAAyB,EAAEvB,QAAQ,CAAC;QACrD,MAAM4B,WAAW,GAAGrE,kBAAkB,CAAC;UACnC4D,QAAQ;UACRU,aAAa,EAAEN,yBAAyB;UACxCxB;QACJ,CAAC,CAAC;QACFqB,WAAW,CAACQ,WAAW,CAAC;MAC5B;MACA;IACJ;IACA,IAAI/B,uBAAuB,EAAE;MACzBW,gBAAgB,CAACW,QAAQ,CAAC,CAAC,CAAC,EAAEnB,QAAQ,CAAC;IAC3C;EACJ,CAAC;EACD;AACJ;AACA;AACA;EACI,MAAM8B,WAAW,GAAGjG,WAAW,CAAC,MAAMiF,qBAAqB,CAAEiB,KAAK,IAAKA,KAAK,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC;EACtF,MAAMC,QAAQ,GAAGnG,WAAW,CAAEoG,KAAK,IAAK;IAAA,IAAAC,qBAAA;IACpClB,eAAe,CAAC,CAAC,CAACiB,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC;IACrCjE,4BAA4B,aAA5BA,4BAA4B,gBAAA+D,qBAAA,GAA5B/D,4BAA4B,CAAE6D,QAAQ,cAAAE,qBAAA,eAAtCA,qBAAA,CAAAG,IAAA,CAAAlE,4BAA4B,EAAa8D,KAAK,CAAC;EACnD,CAAC,EAAE,CAAC9D,4BAA4B,CAAC,CAAC;EAClC,MAAMmE,YAAY,GAAGzG,WAAW,CAAC,MAAM;IAAA,IAAA0G,sBAAA;IACnCvB,eAAe,CAAC,KAAK,CAAC;IACtB7C,4BAA4B,aAA5BA,4BAA4B,gBAAAoE,sBAAA,GAA5BpE,4BAA4B,CAAEmE,YAAY,cAAAC,sBAAA,eAA1CA,sBAAA,CAAAF,IAAA,CAAAlE,4BAA6C,CAAC;EAClD,CAAC,EAAE,CAACA,4BAA4B,CAAC,CAAC;EAClC,MAAM;IAAEgD,QAAQ;IAAEqB,WAAW;IAAEC,YAAY;IAAErB;EAAY,CAAC,GAAGhF,oBAAoB,CAAC+D,MAAM,EAAE3B,OAAO,IAAIhB,eAAe,EAAEuC,IAAI,IAAIrC,YAAY,EAAE6B,OAAO,IAAI9B,eAAe,EAAEyD,oBAAoB,EAAExB,0BAA0B,EAAEnB,mBAAmB,CAAC;EAC9O,MAAMmE,cAAc,GAAGrE,qBAAqB,GACtCA,qBAAqB,CAAC8C,QAAQ,CAAC,GAC/BA,QAAQ;EACdhF,mBAAmB,CAACyE,cAAc,EAAEN,OAAO,EAAEF,cAAc,CAAC;EAC5D,MAAM;IAAEuC,aAAa;IAAEC;EAAe,CAAC,GAAGtG,uBAAuB,CAAC;IAC9D8B,sCAAsC;IACtCI,OAAO;IACPK,gBAAgB;IAChBC,gBAAgB;IAChBC,gBAAgB;IAChBC,eAAe;IACfC,kBAAkB;IAClBC,gBAAgB;IAChBC,gBAAgB;IAChBC,YAAY;IACZC,mBAAmB;IACnBC,oBAAoB;IACpB8B,WAAW;IACXrB;IACA;IACA;EACJ,CAAC,CAAC;EACF1D,mBAAmB,CAACsG,aAAa,aAAbA,aAAa,cAAbA,aAAa,GAAIC,cAAc,CAAC;EACpD;EACA1G,8BAA8B,CAAC4F,WAAW,CAAC;EAC3ChG,SAAS,CAAC,MAAM;IACZ,MAAM+G,WAAW,GAAIZ,KAAK,IAAK;MAC3B,IAAIA,KAAK,CAACa,GAAG,MAAK7C,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE6C,GAAG,GAAE;QAC5BtC,gBAAgB,CAAC,CAAC;MACtB;IACJ,CAAC;IACDL,MAAM,CAAC4C,EAAE,CAAC,iBAAiB,EAAEF,WAAW,CAAC;IACzC1C,MAAM,CAAC4C,EAAE,CAAC,gBAAgB,EAAEF,WAAW,CAAC;IACxC,OAAO,MAAM;MACT1C,MAAM,CAAC6C,GAAG,CAAC,iBAAiB,EAAEH,WAAW,CAAC;MAC1C1C,MAAM,CAAC6C,GAAG,CAAC,gBAAgB,EAAEH,WAAW,CAAC;IAC7C,CAAC;IACD;EACJ,CAAC,EAAE,CAAC5C,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE6C,GAAG,CAAC,CAAC;EAClB,MAAMG,aAAa,GAAIC,IAAI,IAAK;IAC5B,MAAMC,YAAY,GAAG;MACjBC,aAAa,EAAEnD,OAAO;MACtBxD,MAAM;MACNwD,OAAO,EAAEiD,IAAI;MACb;MACArC,kBAAkB;MAClBpC,uBAAuB;MACvB4E,GAAG,EAAEH,IAAI,CAACJ,GAAG;MACbrD,OAAO;MACPe,gBAAgB;MAChBR;IACJ,CAAC;IACD,OAAOpE,KAAK,CAAC0H,aAAa,CAAC3G,cAAc,EAAA4G,aAAA,KAAOJ,YAAY,CAAE,CAAC;EACnE,CAAC;EACD,MAAMK,SAAS,GAAG,wBAAwB;EAC1C,MAAMC,SAAS,GAAGxH,IAAI,EAAAgC,mBAAA,GAACoC,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEqD,IAAI,cAAAzF,mBAAA,cAAAA,mBAAA,GAAI,UAAU,EAAEwC,KAAK,GAAAvC,qBAAA,GAAEmC,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEsD,WAAW,cAAAzF,qBAAA,cAAAA,qBAAA,MAAA0F,MAAA,CAAOJ,SAAS,OAAAI,MAAA,CAAIJ,SAAS,aAAU;IAC9H,yBAAyB,EAAE9C,2BAA2B,IAAImD,SAAS,CAACC,SAAS,CAACC,KAAK,CAAC,KAAK,CAAC;IAC1F,IAAAH,MAAA,CAAIJ,SAAS,cAAWlD;EAC5B,CAAC,CAAC;EACF,MAAM0D,eAAe,GAAI,CAACjD,YAAY,IAAI,CAAClD,cAAc,KAAKM,4BAA4B,aAA5BA,4BAA4B,uBAA5BA,4BAA4B,CAAE8F,YAAY;EACxG,OAAQrI,KAAK,CAAC0H,aAAa,CAACpG,0BAA0B,EAAE;IAAEkF,KAAK,EAAE;MAAEjB,QAAQ;MAAEqB,WAAW;MAAEC,YAAY;MAAErB;IAAY;EAAE,CAAC,EACnHxF,KAAK,CAAC0H,aAAa,CAAC,KAAK,EAAE;IAAEG,SAAS,EAAEA,SAAS;IAAES,GAAG,EAAEtD;EAAe,CAAC,EACpEd,iBAAiB,KACZa,MAAM,GAAI/E,KAAK,CAAC0H,aAAa,CAAC3C,MAAM,EAAE;IAAEwD,0BAA0B,EAAEhG,4BAA4B,aAA5BA,4BAA4B,uBAA5BA,4BAA4B,CAAEiG,WAAW;IAAEC,QAAQ,EAAElG,4BAA4B,aAA5BA,4BAA4B,uBAA5BA,4BAA4B,CAAEkG,QAAQ;IAAEC,qBAAqB,EAAEnG,4BAA4B,aAA5BA,4BAA4B,uBAA5BA,4BAA4B,CAAEoG,yBAAyB;IAAEC,WAAW,EAAErG,4BAA4B,aAA5BA,4BAA4B,uBAA5BA,4BAA4B,CAAEqG;EAAY,CAAC,CAAC,GAAK5I,KAAK,CAAC0H,aAAa,CAAC1G,aAAa,EAAA2G,aAAA;IAAIvB,QAAQ,EAAEA,QAAQ;IAAEM,YAAY,EAAEA,YAAY;IAAElB,WAAW,EAAEA;EAAW,GAAKjD,4BAA4B,CAAE,CAAE,CAAC,EACvc6F,eAAe,IAAKpI,KAAK,CAAC0H,aAAa,CAAC5E,IAAI,EAAE;IAAE+F,KAAK,EAAEvE,kBAAkB,CAACuE,KAAK;IAAE/B,cAAc,EAAE9C,kBAAkB,GAAG8C,cAAc,GAAGgC,SAAS;IAAEC,OAAO,EAAE,CAAC,CAACzE,kBAAkB,CAAC0E,eAAe,IACvL,CAAC,QAAQ,EAAE,eAAe,CAAC,CAACC,QAAQ,CAAC3E,kBAAkB,CAAC0E,eAAe,CAAC;IAAEjG,qBAAqB,EAAEA,qBAAqB;IAAEC,gBAAgB,EAAEA,gBAAgB;IAAEwC,WAAW,EAAEA;EAAY,CAAC,EAAE,EAACsB,cAAc,aAAdA,cAAc,eAAdA,cAAc,CAAErB,MAAM,IAAIzF,KAAK,CAAC0H,aAAa,CAACxG,mBAAmB,EAAE;IAAEgI,QAAQ,EAAE;EAAU,CAAC,CAAC,GAAKlJ,KAAK,CAAC0H,aAAa,CAAC9D,SAAS,EAAE;IAAEgD,WAAW,EAAEA,WAAW;IAAEuC,SAAS,EAAE7E,kBAAkB,CAAC0E,eAAe,KAAK,WAAW;IAAEnC,YAAY,EAAEA;EAAa,CAAC,EAAE9C,cAAc,GACjcA,cAAc,CAAC+C,cAAc,EAAEO,aAAa,CAAC,GAC7CP,cAAc,CAACsC,GAAG,CAAE/E,OAAO,IAAKgD,aAAa,CAAChD,OAAO,CAAC,CAAC,CAAE,CAAE,CAAC,CAAC;AAC/E,CAAC;AACD;AACA;AACA;AACA,OAAO,MAAMgF,WAAW,GAAGrJ,KAAK,CAACsJ,IAAI,CAACnH,qBAAqB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}