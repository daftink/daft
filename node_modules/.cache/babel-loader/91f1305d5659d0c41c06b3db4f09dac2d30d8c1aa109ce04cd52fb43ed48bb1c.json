{"ast":null,"code":"import React, { useMemo } from 'react';\nimport { CloseIcon } from './icons';\nimport { Attachment as DefaultAttachment } from '../Attachment';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { Poll } from '../Poll';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { useStateStore } from '../../store';\nimport { useMessageComposer } from './hooks';\nimport { renderText as defaultRenderText } from '../Message/renderText';\nconst messageComposerStateStoreSelector = state => ({\n  quotedMessage: state.quotedMessage\n});\nexport const QuotedMessagePreviewHeader = () => {\n  const {\n    t\n  } = useTranslationContext('QuotedMessagePreview');\n  const messageComposer = useMessageComposer();\n  const {\n    quotedMessage\n  } = useStateStore(messageComposer.state, messageComposerStateStoreSelector);\n  if (!quotedMessage) return null;\n  return React.createElement(\"div\", {\n    className: 'str-chat__quoted-message-preview-header'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__quoted-message-reply-to-message'\n  }, t('Reply to Message')), React.createElement(\"button\", {\n    \"aria-label\": t('aria/Cancel Reply'),\n    className: 'str-chat__quoted-message-remove',\n    onClick: () => messageComposer.setQuotedMessage(null)\n  }, React.createElement(CloseIcon, null)));\n};\nexport const QuotedMessagePreview = _ref => {\n  let {\n    renderText = defaultRenderText\n  } = _ref;\n  const {\n    client\n  } = useChatContext();\n  const {\n    Attachment = DefaultAttachment,\n    Avatar = DefaultAvatar\n  } = useComponentContext('QuotedMessagePreview');\n  const {\n    userLanguage\n  } = useTranslationContext('QuotedMessagePreview');\n  const messageComposer = useMessageComposer();\n  const {\n    quotedMessage\n  } = useStateStore(messageComposer.state, messageComposerStateStoreSelector);\n  const quotedMessageText = useMemo(() => {\n    var _quotedMessage$i18n;\n    return (quotedMessage === null || quotedMessage === void 0 || (_quotedMessage$i18n = quotedMessage.i18n) === null || _quotedMessage$i18n === void 0 ? void 0 : _quotedMessage$i18n[\"\".concat(userLanguage, \"_text\")]) || (quotedMessage === null || quotedMessage === void 0 ? void 0 : quotedMessage.text);\n  }, [quotedMessage === null || quotedMessage === void 0 ? void 0 : quotedMessage.i18n, quotedMessage === null || quotedMessage === void 0 ? void 0 : quotedMessage.text, userLanguage]);\n  const renderedText = useMemo(() => renderText(quotedMessageText, quotedMessage === null || quotedMessage === void 0 ? void 0 : quotedMessage.mentioned_users), [quotedMessage, quotedMessageText, renderText]);\n  const quotedMessageAttachments = useMemo(() => {\n    var _quotedMessage$attach;\n    return quotedMessage !== null && quotedMessage !== void 0 && (_quotedMessage$attach = quotedMessage.attachments) !== null && _quotedMessage$attach !== void 0 && _quotedMessage$attach.length ? quotedMessage.attachments.slice(0, 1) : [];\n  }, [quotedMessage]);\n  const poll = (quotedMessage === null || quotedMessage === void 0 ? void 0 : quotedMessage.poll_id) && client.polls.fromState(quotedMessage.poll_id);\n  if (!quotedMessageText && !quotedMessageAttachments.length && !poll) return null;\n  return React.createElement(\"div\", {\n    className: 'str-chat__quoted-message-preview',\n    \"data-testid\": 'quoted-message-preview'\n  }, (quotedMessage === null || quotedMessage === void 0 ? void 0 : quotedMessage.user) && React.createElement(Avatar, {\n    className: 'str-chat__avatar--quoted-message-sender',\n    image: quotedMessage.user.image,\n    name: quotedMessage.user.name || quotedMessage.user.id,\n    user: quotedMessage.user\n  }), React.createElement(\"div\", {\n    className: 'str-chat__quoted-message-bubble'\n  }, poll ? React.createElement(Poll, {\n    isQuoted: true,\n    poll: poll\n  }) : React.createElement(React.Fragment, null, !!quotedMessageAttachments.length && React.createElement(Attachment, {\n    attachments: quotedMessageAttachments,\n    isQuoted: true\n  }), React.createElement(\"div\", {\n    className: 'str-chat__quoted-message-text',\n    \"data-testid\": 'quoted-message-text'\n  }, renderedText))));\n};","map":{"version":3,"names":["React","useMemo","CloseIcon","Attachment","DefaultAttachment","Avatar","DefaultAvatar","Poll","useChatContext","useComponentContext","useTranslationContext","useStateStore","useMessageComposer","renderText","defaultRenderText","messageComposerStateStoreSelector","state","quotedMessage","QuotedMessagePreviewHeader","t","messageComposer","createElement","className","onClick","setQuotedMessage","QuotedMessagePreview","_ref","client","userLanguage","quotedMessageText","_quotedMessage$i18n","i18n","concat","text","renderedText","mentioned_users","quotedMessageAttachments","_quotedMessage$attach","attachments","length","slice","poll","poll_id","polls","fromState","user","image","name","id","isQuoted","Fragment"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/MessageInput/QuotedMessagePreview.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { CloseIcon } from './icons';\nimport { Attachment as DefaultAttachment } from '../Attachment';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { Poll } from '../Poll';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { useStateStore } from '../../store';\nimport { useMessageComposer } from './hooks';\nimport { renderText as defaultRenderText } from '../Message/renderText';\nconst messageComposerStateStoreSelector = (state) => ({\n    quotedMessage: state.quotedMessage,\n});\nexport const QuotedMessagePreviewHeader = () => {\n    const { t } = useTranslationContext('QuotedMessagePreview');\n    const messageComposer = useMessageComposer();\n    const { quotedMessage } = useStateStore(messageComposer.state, messageComposerStateStoreSelector);\n    if (!quotedMessage)\n        return null;\n    return (React.createElement(\"div\", { className: 'str-chat__quoted-message-preview-header' },\n        React.createElement(\"div\", { className: 'str-chat__quoted-message-reply-to-message' }, t('Reply to Message')),\n        React.createElement(\"button\", { \"aria-label\": t('aria/Cancel Reply'), className: 'str-chat__quoted-message-remove', onClick: () => messageComposer.setQuotedMessage(null) },\n            React.createElement(CloseIcon, null))));\n};\nexport const QuotedMessagePreview = ({ renderText = defaultRenderText, }) => {\n    const { client } = useChatContext();\n    const { Attachment = DefaultAttachment, Avatar = DefaultAvatar } = useComponentContext('QuotedMessagePreview');\n    const { userLanguage } = useTranslationContext('QuotedMessagePreview');\n    const messageComposer = useMessageComposer();\n    const { quotedMessage } = useStateStore(messageComposer.state, messageComposerStateStoreSelector);\n    const quotedMessageText = useMemo(() => quotedMessage?.i18n?.[`${userLanguage}_text`] ||\n        quotedMessage?.text, [quotedMessage?.i18n, quotedMessage?.text, userLanguage]);\n    const renderedText = useMemo(() => renderText(quotedMessageText, quotedMessage?.mentioned_users), [quotedMessage, quotedMessageText, renderText]);\n    const quotedMessageAttachments = useMemo(() => quotedMessage?.attachments?.length ? quotedMessage.attachments.slice(0, 1) : [], [quotedMessage]);\n    const poll = quotedMessage?.poll_id && client.polls.fromState(quotedMessage.poll_id);\n    if (!quotedMessageText && !quotedMessageAttachments.length && !poll)\n        return null;\n    return (React.createElement(\"div\", { className: 'str-chat__quoted-message-preview', \"data-testid\": 'quoted-message-preview' },\n        quotedMessage?.user && (React.createElement(Avatar, { className: 'str-chat__avatar--quoted-message-sender', image: quotedMessage.user.image, name: quotedMessage.user.name || quotedMessage.user.id, user: quotedMessage.user })),\n        React.createElement(\"div\", { className: 'str-chat__quoted-message-bubble' }, poll ? (React.createElement(Poll, { isQuoted: true, poll: poll })) : (React.createElement(React.Fragment, null,\n            !!quotedMessageAttachments.length && (React.createElement(Attachment, { attachments: quotedMessageAttachments, isQuoted: true })),\n            React.createElement(\"div\", { className: 'str-chat__quoted-message-text', \"data-testid\": 'quoted-message-text' }, renderedText))))));\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}