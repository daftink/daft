{"ast":null,"code":"import _objectSpread from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport React, { useEffect } from 'react';\nimport clsx from 'clsx';\nimport { LegacyThreadContext } from './LegacyThreadContext';\nimport { MESSAGE_ACTIONS } from '../Message';\nimport { MessageInput, MessageInputFlat } from '../MessageInput';\nimport { MessageList, VirtualizedMessageList } from '../MessageList';\nimport { ThreadHeader as DefaultThreadHeader } from './ThreadHeader';\nimport { ThreadHead as DefaultThreadHead } from '../Thread/ThreadHead';\nimport { useChannelActionContext, useChannelStateContext, useChatContext, useComponentContext } from '../../context';\nimport { useThreadContext } from '../Threads';\nimport { useStateStore } from '../../store';\n/**\n * The Thread component renders a parent Message with a list of replies\n */\nexport const Thread = props => {\n  var _ref;\n  const {\n    channel,\n    channelConfig,\n    thread\n  } = useChannelStateContext('Thread');\n  const threadInstance = useThreadContext();\n  if (!thread && !threadInstance) return null;\n  if ((channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.replies) === false) return null;\n  // the wrapper ensures a key variable is set and the component recreates on thread switch\n  return (\n    // FIXME: TS is having trouble here as at least one of the two would always be defined\n    React.createElement(ThreadInner, _objectSpread(_objectSpread({}, props), {}, {\n      key: \"thread-\".concat((_ref = thread !== null && thread !== void 0 ? thread : threadInstance) === null || _ref === void 0 ? void 0 : _ref.id, \"-\").concat(channel === null || channel === void 0 ? void 0 : channel.cid)\n    }))\n  );\n};\nconst selector = nextValue => ({\n  isLoadingNext: nextValue.pagination.isLoadingNext,\n  isLoadingPrev: nextValue.pagination.isLoadingPrev,\n  parentMessage: nextValue.parentMessage,\n  replies: nextValue.replies\n});\nconst ThreadInner = props => {\n  var _useStateStore, _ref2, _ref3;\n  const {\n    additionalMessageInputProps,\n    additionalMessageListProps,\n    additionalParentMessageProps,\n    additionalVirtualizedMessageListProps,\n    autoFocus = true,\n    enableDateSeparator = false,\n    Input: PropInput,\n    Message: PropMessage,\n    messageActions = Object.keys(MESSAGE_ACTIONS),\n    virtualized\n  } = props;\n  const threadInstance = useThreadContext();\n  const {\n    thread,\n    threadHasMore,\n    threadLoadingMore,\n    threadMessages = [],\n    threadSuppressAutoscroll\n  } = useChannelStateContext('Thread');\n  const {\n    closeThread,\n    loadMoreThread\n  } = useChannelActionContext('Thread');\n  const {\n    customClasses\n  } = useChatContext('Thread');\n  const {\n    Message: ContextMessage,\n    ThreadHead = DefaultThreadHead,\n    ThreadHeader = DefaultThreadHeader,\n    ThreadInput: ContextInput,\n    VirtualMessage\n  } = useComponentContext('Thread');\n  const {\n    isLoadingNext,\n    isLoadingPrev,\n    parentMessage,\n    replies\n  } = (_useStateStore = useStateStore(threadInstance === null || threadInstance === void 0 ? void 0 : threadInstance.state, selector)) !== null && _useStateStore !== void 0 ? _useStateStore : {};\n  const ThreadInput = (_ref2 = (_ref3 = PropInput !== null && PropInput !== void 0 ? PropInput : additionalMessageInputProps === null || additionalMessageInputProps === void 0 ? void 0 : additionalMessageInputProps.Input) !== null && _ref3 !== void 0 ? _ref3 : ContextInput) !== null && _ref2 !== void 0 ? _ref2 : MessageInputFlat;\n  const ThreadMessage = PropMessage || (additionalMessageListProps === null || additionalMessageListProps === void 0 ? void 0 : additionalMessageListProps.Message);\n  const FallbackMessage = virtualized && VirtualMessage ? VirtualMessage : ContextMessage;\n  const MessageUIComponent = ThreadMessage || FallbackMessage;\n  const ThreadMessageList = virtualized ? VirtualizedMessageList : MessageList;\n  useEffect(() => {\n    var _thread$reply_count;\n    if (threadInstance) return;\n    if (((_thread$reply_count = thread === null || thread === void 0 ? void 0 : thread.reply_count) !== null && _thread$reply_count !== void 0 ? _thread$reply_count : 0) > 0) {\n      // FIXME: integrators can customize channel query options but cannot customize channel.getReplies() options\n      loadMoreThread();\n    }\n  }, [thread, loadMoreThread, threadInstance]);\n  const threadProps = threadInstance ? {\n    loadingMore: isLoadingPrev,\n    loadingMoreNewer: isLoadingNext,\n    loadMore: threadInstance.loadPrevPage,\n    loadMoreNewer: threadInstance.loadNextPage,\n    messages: replies\n  } : {\n    hasMore: threadHasMore,\n    loadingMore: threadLoadingMore,\n    loadMore: loadMoreThread,\n    messages: threadMessages\n  };\n  const messageAsThread = thread !== null && thread !== void 0 ? thread : parentMessage;\n  if (!messageAsThread) return null;\n  const threadClass = (customClasses === null || customClasses === void 0 ? void 0 : customClasses.thread) || clsx('str-chat__thread-container str-chat__thread', {\n    'str-chat__thread--virtualized': virtualized\n  });\n  const head = React.createElement(ThreadHead, _objectSpread({\n    key: messageAsThread.id,\n    message: messageAsThread,\n    Message: MessageUIComponent\n  }, additionalParentMessageProps));\n  return (\n    // Thread component needs a context which we can use for message composer\n    React.createElement(LegacyThreadContext.Provider, {\n      value: {\n        legacyThread: thread !== null && thread !== void 0 ? thread : undefined\n      }\n    }, React.createElement(\"div\", {\n      className: threadClass\n    }, React.createElement(ThreadHeader, {\n      closeThread: closeThread,\n      thread: messageAsThread\n    }), React.createElement(ThreadMessageList, _objectSpread(_objectSpread({\n      disableDateSeparator: !enableDateSeparator,\n      head: head,\n      Message: MessageUIComponent,\n      messageActions: messageActions,\n      suppressAutoscroll: threadSuppressAutoscroll,\n      threadList: true\n    }, threadProps), virtualized ? additionalVirtualizedMessageListProps : additionalMessageListProps)), React.createElement(MessageInput, _objectSpread({\n      focus: autoFocus,\n      Input: ThreadInput,\n      isThreadInput: true,\n      parent: thread !== null && thread !== void 0 ? thread : parentMessage\n    }, additionalMessageInputProps))))\n  );\n};","map":{"version":3,"names":["React","useEffect","clsx","LegacyThreadContext","MESSAGE_ACTIONS","MessageInput","MessageInputFlat","MessageList","VirtualizedMessageList","ThreadHeader","DefaultThreadHeader","ThreadHead","DefaultThreadHead","useChannelActionContext","useChannelStateContext","useChatContext","useComponentContext","useThreadContext","useStateStore","Thread","props","_ref","channel","channelConfig","thread","threadInstance","replies","createElement","ThreadInner","_objectSpread","key","concat","id","cid","selector","nextValue","isLoadingNext","pagination","isLoadingPrev","parentMessage","_useStateStore","_ref2","_ref3","additionalMessageInputProps","additionalMessageListProps","additionalParentMessageProps","additionalVirtualizedMessageListProps","autoFocus","enableDateSeparator","Input","PropInput","Message","PropMessage","messageActions","Object","keys","virtualized","threadHasMore","threadLoadingMore","threadMessages","threadSuppressAutoscroll","closeThread","loadMoreThread","customClasses","ContextMessage","ThreadInput","ContextInput","VirtualMessage","state","ThreadMessage","FallbackMessage","MessageUIComponent","ThreadMessageList","_thread$reply_count","reply_count","threadProps","loadingMore","loadingMoreNewer","loadMore","loadPrevPage","loadMoreNewer","loadNextPage","messages","hasMore","messageAsThread","threadClass","head","message","Provider","value","legacyThread","undefined","className","disableDateSeparator","suppressAutoscroll","threadList","focus","isThreadInput","parent"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/Thread/Thread.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport clsx from 'clsx';\nimport { LegacyThreadContext } from './LegacyThreadContext';\nimport { MESSAGE_ACTIONS } from '../Message';\nimport { MessageInput, MessageInputFlat } from '../MessageInput';\nimport { MessageList, VirtualizedMessageList } from '../MessageList';\nimport { ThreadHeader as DefaultThreadHeader } from './ThreadHeader';\nimport { ThreadHead as DefaultThreadHead } from '../Thread/ThreadHead';\nimport { useChannelActionContext, useChannelStateContext, useChatContext, useComponentContext, } from '../../context';\nimport { useThreadContext } from '../Threads';\nimport { useStateStore } from '../../store';\n/**\n * The Thread component renders a parent Message with a list of replies\n */\nexport const Thread = (props) => {\n    const { channel, channelConfig, thread } = useChannelStateContext('Thread');\n    const threadInstance = useThreadContext();\n    if (!thread && !threadInstance)\n        return null;\n    if (channelConfig?.replies === false)\n        return null;\n    // the wrapper ensures a key variable is set and the component recreates on thread switch\n    return (\n    // FIXME: TS is having trouble here as at least one of the two would always be defined\n    React.createElement(ThreadInner, { ...props, key: `thread-${(thread ?? threadInstance)?.id}-${channel?.cid}` }));\n};\nconst selector = (nextValue) => ({\n    isLoadingNext: nextValue.pagination.isLoadingNext,\n    isLoadingPrev: nextValue.pagination.isLoadingPrev,\n    parentMessage: nextValue.parentMessage,\n    replies: nextValue.replies,\n});\nconst ThreadInner = (props) => {\n    const { additionalMessageInputProps, additionalMessageListProps, additionalParentMessageProps, additionalVirtualizedMessageListProps, autoFocus = true, enableDateSeparator = false, Input: PropInput, Message: PropMessage, messageActions = Object.keys(MESSAGE_ACTIONS), virtualized, } = props;\n    const threadInstance = useThreadContext();\n    const { thread, threadHasMore, threadLoadingMore, threadMessages = [], threadSuppressAutoscroll, } = useChannelStateContext('Thread');\n    const { closeThread, loadMoreThread } = useChannelActionContext('Thread');\n    const { customClasses } = useChatContext('Thread');\n    const { Message: ContextMessage, ThreadHead = DefaultThreadHead, ThreadHeader = DefaultThreadHeader, ThreadInput: ContextInput, VirtualMessage, } = useComponentContext('Thread');\n    const { isLoadingNext, isLoadingPrev, parentMessage, replies } = useStateStore(threadInstance?.state, selector) ?? {};\n    const ThreadInput = PropInput ?? additionalMessageInputProps?.Input ?? ContextInput ?? MessageInputFlat;\n    const ThreadMessage = PropMessage || additionalMessageListProps?.Message;\n    const FallbackMessage = virtualized && VirtualMessage ? VirtualMessage : ContextMessage;\n    const MessageUIComponent = ThreadMessage || FallbackMessage;\n    const ThreadMessageList = virtualized ? VirtualizedMessageList : MessageList;\n    useEffect(() => {\n        if (threadInstance)\n            return;\n        if ((thread?.reply_count ?? 0) > 0) {\n            // FIXME: integrators can customize channel query options but cannot customize channel.getReplies() options\n            loadMoreThread();\n        }\n    }, [thread, loadMoreThread, threadInstance]);\n    const threadProps = threadInstance\n        ? {\n            loadingMore: isLoadingPrev,\n            loadingMoreNewer: isLoadingNext,\n            loadMore: threadInstance.loadPrevPage,\n            loadMoreNewer: threadInstance.loadNextPage,\n            messages: replies,\n        }\n        : {\n            hasMore: threadHasMore,\n            loadingMore: threadLoadingMore,\n            loadMore: loadMoreThread,\n            messages: threadMessages,\n        };\n    const messageAsThread = thread ?? parentMessage;\n    if (!messageAsThread)\n        return null;\n    const threadClass = customClasses?.thread ||\n        clsx('str-chat__thread-container str-chat__thread', {\n            'str-chat__thread--virtualized': virtualized,\n        });\n    const head = (React.createElement(ThreadHead, { key: messageAsThread.id, message: messageAsThread, Message: MessageUIComponent, ...additionalParentMessageProps }));\n    return (\n    // Thread component needs a context which we can use for message composer\n    React.createElement(LegacyThreadContext.Provider, { value: {\n            legacyThread: thread ?? undefined,\n        } },\n        React.createElement(\"div\", { className: threadClass },\n            React.createElement(ThreadHeader, { closeThread: closeThread, thread: messageAsThread }),\n            React.createElement(ThreadMessageList, { disableDateSeparator: !enableDateSeparator, head: head, Message: MessageUIComponent, messageActions: messageActions, suppressAutoscroll: threadSuppressAutoscroll, threadList: true, ...threadProps, ...(virtualized\n                    ? additionalVirtualizedMessageListProps\n                    : additionalMessageListProps) }),\n            React.createElement(MessageInput, { focus: autoFocus, Input: ThreadInput, isThreadInput: true, parent: thread ?? parentMessage, ...additionalMessageInputProps }))));\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}