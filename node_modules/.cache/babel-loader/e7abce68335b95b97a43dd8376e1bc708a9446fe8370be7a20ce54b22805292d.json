{"ast":null,"code":"import { readFileAsArrayBuffer } from '../../ReactFileUtilities';\n/**\n * In the context of resampling audio data, AudioContext is used to decode the input audio file into an AudioBuffer,\n * which is a fundamental data structure representing audio data.\n * @param file\n */\nexport const toAudioBuffer = async file => {\n  const audioCtx = new AudioContext();\n  const arrayBuffer = await readFileAsArrayBuffer(file);\n  const decodedData = await audioCtx.decodeAudioData(arrayBuffer);\n  if (audioCtx.state !== 'closed') await audioCtx.close();\n  return decodedData;\n};\n/**\n * OfflineAudioContext is a specialized type of AudioContext that does not render audio in real-time and is used for offline audio processing tasks.\n * It allows performing audio processing and rendering without actually playing the audio through speakers or outputting it to a destination.\n * In the context of resampling audio data, OfflineAudioContext is used to resample the decoded AudioBuffer from a file to the desired sample rate.\n * It provides more flexibility and control over audio processing, as it can operate at different sample rates and durations compared to real-time audio contexts.\n * @param audioBuffer\n * @param sampleRate\n */\nexport const renderAudio = async (audioBuffer, sampleRate) => {\n  const offlineAudioCtx = new OfflineAudioContext(audioBuffer.numberOfChannels, audioBuffer.duration * sampleRate, sampleRate);\n  const source = offlineAudioCtx.createBufferSource();\n  source.buffer = audioBuffer;\n  source.connect(offlineAudioCtx.destination);\n  source.start();\n  return await offlineAudioCtx.startRendering();\n};","map":{"version":3,"names":["readFileAsArrayBuffer","toAudioBuffer","file","audioCtx","AudioContext","arrayBuffer","decodedData","decodeAudioData","state","close","renderAudio","audioBuffer","sampleRate","offlineAudioCtx","OfflineAudioContext","numberOfChannels","duration","source","createBufferSource","buffer","connect","destination","start","startRendering"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/MediaRecorder/transcode/audioProcessing.js"],"sourcesContent":["import { readFileAsArrayBuffer } from '../../ReactFileUtilities';\n/**\n * In the context of resampling audio data, AudioContext is used to decode the input audio file into an AudioBuffer,\n * which is a fundamental data structure representing audio data.\n * @param file\n */\nexport const toAudioBuffer = async (file) => {\n    const audioCtx = new AudioContext();\n    const arrayBuffer = await readFileAsArrayBuffer(file);\n    const decodedData = await audioCtx.decodeAudioData(arrayBuffer);\n    if (audioCtx.state !== 'closed')\n        await audioCtx.close();\n    return decodedData;\n};\n/**\n * OfflineAudioContext is a specialized type of AudioContext that does not render audio in real-time and is used for offline audio processing tasks.\n * It allows performing audio processing and rendering without actually playing the audio through speakers or outputting it to a destination.\n * In the context of resampling audio data, OfflineAudioContext is used to resample the decoded AudioBuffer from a file to the desired sample rate.\n * It provides more flexibility and control over audio processing, as it can operate at different sample rates and durations compared to real-time audio contexts.\n * @param audioBuffer\n * @param sampleRate\n */\nexport const renderAudio = async (audioBuffer, sampleRate) => {\n    const offlineAudioCtx = new OfflineAudioContext(audioBuffer.numberOfChannels, audioBuffer.duration * sampleRate, sampleRate);\n    const source = offlineAudioCtx.createBufferSource();\n    source.buffer = audioBuffer;\n    source.connect(offlineAudioCtx.destination);\n    source.start();\n    return await offlineAudioCtx.startRendering();\n};\n"],"mappings":"AAAA,SAASA,qBAAqB,QAAQ,0BAA0B;AAChE;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAG,MAAOC,IAAI,IAAK;EACzC,MAAMC,QAAQ,GAAG,IAAIC,YAAY,CAAC,CAAC;EACnC,MAAMC,WAAW,GAAG,MAAML,qBAAqB,CAACE,IAAI,CAAC;EACrD,MAAMI,WAAW,GAAG,MAAMH,QAAQ,CAACI,eAAe,CAACF,WAAW,CAAC;EAC/D,IAAIF,QAAQ,CAACK,KAAK,KAAK,QAAQ,EAC3B,MAAML,QAAQ,CAACM,KAAK,CAAC,CAAC;EAC1B,OAAOH,WAAW;AACtB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,WAAW,GAAG,MAAAA,CAAOC,WAAW,EAAEC,UAAU,KAAK;EAC1D,MAAMC,eAAe,GAAG,IAAIC,mBAAmB,CAACH,WAAW,CAACI,gBAAgB,EAAEJ,WAAW,CAACK,QAAQ,GAAGJ,UAAU,EAAEA,UAAU,CAAC;EAC5H,MAAMK,MAAM,GAAGJ,eAAe,CAACK,kBAAkB,CAAC,CAAC;EACnDD,MAAM,CAACE,MAAM,GAAGR,WAAW;EAC3BM,MAAM,CAACG,OAAO,CAACP,eAAe,CAACQ,WAAW,CAAC;EAC3CJ,MAAM,CAACK,KAAK,CAAC,CAAC;EACd,OAAO,MAAMT,eAAe,CAACU,cAAc,CAAC,CAAC;AACjD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}