{"ast":null,"code":"import { useEffect } from 'react';\nimport uniqBy from 'lodash.uniqby';\nimport { getChannel } from '../../../utils/getChannel';\nimport { useChatContext } from '../../../context/ChatContext';\nexport const useNotificationMessageNewListener = function (setChannels, customHandler) {\n  let allowNewMessagesFromUnfilteredChannels = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  const {\n    client\n  } = useChatContext('useNotificationMessageNewListener');\n  useEffect(() => {\n    const handleEvent = async event => {\n      var _event$channel;\n      if (customHandler && typeof customHandler === 'function') {\n        customHandler(setChannels, event);\n      } else if (allowNewMessagesFromUnfilteredChannels && (_event$channel = event.channel) !== null && _event$channel !== void 0 && _event$channel.type) {\n        const channel = await getChannel({\n          client,\n          id: event.channel.id,\n          type: event.channel.type\n        });\n        setChannels(channels => uniqBy([channel, ...channels], 'cid'));\n      }\n    };\n    client.on('notification.message_new', handleEvent);\n    return () => {\n      client.off('notification.message_new', handleEvent);\n    };\n  }, [allowNewMessagesFromUnfilteredChannels, client, customHandler, setChannels]);\n};","map":{"version":3,"names":["useEffect","uniqBy","getChannel","useChatContext","useNotificationMessageNewListener","setChannels","customHandler","allowNewMessagesFromUnfilteredChannels","arguments","length","undefined","client","handleEvent","event","_event$channel","channel","type","id","channels","on","off"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/ChannelList/hooks/useNotificationMessageNewListener.js"],"sourcesContent":["import { useEffect } from 'react';\nimport uniqBy from 'lodash.uniqby';\nimport { getChannel } from '../../../utils/getChannel';\nimport { useChatContext } from '../../../context/ChatContext';\nexport const useNotificationMessageNewListener = (setChannels, customHandler, allowNewMessagesFromUnfilteredChannels = true) => {\n    const { client } = useChatContext('useNotificationMessageNewListener');\n    useEffect(() => {\n        const handleEvent = async (event) => {\n            if (customHandler && typeof customHandler === 'function') {\n                customHandler(setChannels, event);\n            }\n            else if (allowNewMessagesFromUnfilteredChannels && event.channel?.type) {\n                const channel = await getChannel({\n                    client,\n                    id: event.channel.id,\n                    type: event.channel.type,\n                });\n                setChannels((channels) => uniqBy([channel, ...channels], 'cid'));\n            }\n        };\n        client.on('notification.message_new', handleEvent);\n        return () => {\n            client.off('notification.message_new', handleEvent);\n        };\n    }, [allowNewMessagesFromUnfilteredChannels, client, customHandler, setChannels]);\n};\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,OAAOC,MAAM,MAAM,eAAe;AAClC,SAASC,UAAU,QAAQ,2BAA2B;AACtD,SAASC,cAAc,QAAQ,8BAA8B;AAC7D,OAAO,MAAMC,iCAAiC,GAAG,SAAAA,CAACC,WAAW,EAAEC,aAAa,EAAoD;EAAA,IAAlDC,sCAAsC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EACvH,MAAM;IAAEG;EAAO,CAAC,GAAGR,cAAc,CAAC,mCAAmC,CAAC;EACtEH,SAAS,CAAC,MAAM;IACZ,MAAMY,WAAW,GAAG,MAAOC,KAAK,IAAK;MAAA,IAAAC,cAAA;MACjC,IAAIR,aAAa,IAAI,OAAOA,aAAa,KAAK,UAAU,EAAE;QACtDA,aAAa,CAACD,WAAW,EAAEQ,KAAK,CAAC;MACrC,CAAC,MACI,IAAIN,sCAAsC,KAAAO,cAAA,GAAID,KAAK,CAACE,OAAO,cAAAD,cAAA,eAAbA,cAAA,CAAeE,IAAI,EAAE;QACpE,MAAMD,OAAO,GAAG,MAAMb,UAAU,CAAC;UAC7BS,MAAM;UACNM,EAAE,EAAEJ,KAAK,CAACE,OAAO,CAACE,EAAE;UACpBD,IAAI,EAAEH,KAAK,CAACE,OAAO,CAACC;QACxB,CAAC,CAAC;QACFX,WAAW,CAAEa,QAAQ,IAAKjB,MAAM,CAAC,CAACc,OAAO,EAAE,GAAGG,QAAQ,CAAC,EAAE,KAAK,CAAC,CAAC;MACpE;IACJ,CAAC;IACDP,MAAM,CAACQ,EAAE,CAAC,0BAA0B,EAAEP,WAAW,CAAC;IAClD,OAAO,MAAM;MACTD,MAAM,CAACS,GAAG,CAAC,0BAA0B,EAAER,WAAW,CAAC;IACvD,CAAC;EACL,CAAC,EAAE,CAACL,sCAAsC,EAAEI,MAAM,EAAEL,aAAa,EAAED,WAAW,CAAC,CAAC;AACpF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}