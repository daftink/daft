{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { StreamChat } from 'stream-chat';\n/**\n * React hook to create, connect and return `StreamChat` client.\n */\nexport const useCreateChatClient = _ref => {\n  let {\n    apiKey,\n    options,\n    tokenOrProvider,\n    userData\n  } = _ref;\n  const [chatClient, setChatClient] = useState(null);\n  const [cachedUserData, setCachedUserData] = useState(userData);\n  if (userData.id !== cachedUserData.id) {\n    setCachedUserData(userData);\n  }\n  const [cachedOptions] = useState(options);\n  useEffect(() => {\n    const client = new StreamChat(apiKey, undefined, cachedOptions);\n    let didUserConnectInterrupt = false;\n    const connectionPromise = client.connectUser(cachedUserData, tokenOrProvider).then(() => {\n      if (!didUserConnectInterrupt) setChatClient(client);\n    });\n    return () => {\n      didUserConnectInterrupt = true;\n      setChatClient(null);\n      connectionPromise.then(() => client.disconnectUser()).then(() => {\n        console.log(\"Connection for user \\\"\".concat(cachedUserData.id, \"\\\" has been closed\"));\n      });\n    };\n  }, [apiKey, cachedUserData, cachedOptions, tokenOrProvider]);\n  return chatClient;\n};","map":{"version":3,"names":["useEffect","useState","StreamChat","useCreateChatClient","_ref","apiKey","options","tokenOrProvider","userData","chatClient","setChatClient","cachedUserData","setCachedUserData","id","cachedOptions","client","undefined","didUserConnectInterrupt","connectionPromise","connectUser","then","disconnectUser","console","log","concat"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/Chat/hooks/useCreateChatClient.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { StreamChat } from 'stream-chat';\n/**\n * React hook to create, connect and return `StreamChat` client.\n */\nexport const useCreateChatClient = ({ apiKey, options, tokenOrProvider, userData, }) => {\n    const [chatClient, setChatClient] = useState(null);\n    const [cachedUserData, setCachedUserData] = useState(userData);\n    if (userData.id !== cachedUserData.id) {\n        setCachedUserData(userData);\n    }\n    const [cachedOptions] = useState(options);\n    useEffect(() => {\n        const client = new StreamChat(apiKey, undefined, cachedOptions);\n        let didUserConnectInterrupt = false;\n        const connectionPromise = client\n            .connectUser(cachedUserData, tokenOrProvider)\n            .then(() => {\n            if (!didUserConnectInterrupt)\n                setChatClient(client);\n        });\n        return () => {\n            didUserConnectInterrupt = true;\n            setChatClient(null);\n            connectionPromise\n                .then(() => client.disconnectUser())\n                .then(() => {\n                console.log(`Connection for user \"${cachedUserData.id}\" has been closed`);\n            });\n        };\n    }, [apiKey, cachedUserData, cachedOptions, tokenOrProvider]);\n    return chatClient;\n};\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,UAAU,QAAQ,aAAa;AACxC;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,GAAGC,IAAA,IAAqD;EAAA,IAApD;IAAEC,MAAM;IAAEC,OAAO;IAAEC,eAAe;IAAEC;EAAU,CAAC,GAAAJ,IAAA;EAC/E,MAAM,CAACK,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACU,cAAc,EAAEC,iBAAiB,CAAC,GAAGX,QAAQ,CAACO,QAAQ,CAAC;EAC9D,IAAIA,QAAQ,CAACK,EAAE,KAAKF,cAAc,CAACE,EAAE,EAAE;IACnCD,iBAAiB,CAACJ,QAAQ,CAAC;EAC/B;EACA,MAAM,CAACM,aAAa,CAAC,GAAGb,QAAQ,CAACK,OAAO,CAAC;EACzCN,SAAS,CAAC,MAAM;IACZ,MAAMe,MAAM,GAAG,IAAIb,UAAU,CAACG,MAAM,EAAEW,SAAS,EAAEF,aAAa,CAAC;IAC/D,IAAIG,uBAAuB,GAAG,KAAK;IACnC,MAAMC,iBAAiB,GAAGH,MAAM,CAC3BI,WAAW,CAACR,cAAc,EAAEJ,eAAe,CAAC,CAC5Ca,IAAI,CAAC,MAAM;MACZ,IAAI,CAACH,uBAAuB,EACxBP,aAAa,CAACK,MAAM,CAAC;IAC7B,CAAC,CAAC;IACF,OAAO,MAAM;MACTE,uBAAuB,GAAG,IAAI;MAC9BP,aAAa,CAAC,IAAI,CAAC;MACnBQ,iBAAiB,CACZE,IAAI,CAAC,MAAML,MAAM,CAACM,cAAc,CAAC,CAAC,CAAC,CACnCD,IAAI,CAAC,MAAM;QACZE,OAAO,CAACC,GAAG,0BAAAC,MAAA,CAAyBb,cAAc,CAACE,EAAE,uBAAmB,CAAC;MAC7E,CAAC,CAAC;IACN,CAAC;EACL,CAAC,EAAE,CAACR,MAAM,EAAEM,cAAc,EAAEG,aAAa,EAAEP,eAAe,CAAC,CAAC;EAC5D,OAAOE,UAAU;AACrB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}