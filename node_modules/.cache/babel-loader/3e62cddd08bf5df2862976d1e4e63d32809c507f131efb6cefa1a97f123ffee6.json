{"ast":null,"code":"import _objectSpread from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"className\", \"closeSuggestionsOnClickOutside\", \"containerClassName\", \"listClassName\", \"maxRows\", \"minRows\", \"onBlur\", \"onChange\", \"onKeyDown\", \"onScroll\", \"onSelect\", \"placeholder\", \"shouldSubmit\"];\nimport clsx from 'clsx';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport Textarea from 'react-textarea-autosize';\nimport { useMessageComposer } from '../MessageInput';\nimport { useComponentContext, useMessageInputContext, useTranslationContext } from '../../context';\nimport { useStateStore } from '../../store';\nimport { SuggestionList as DefaultSuggestionList } from './SuggestionList';\nconst textComposerStateSelector = state => ({\n  selection: state.selection,\n  suggestions: state.suggestions,\n  text: state.text\n});\nconst searchSourceStateSelector = state => ({\n  isLoadingItems: state.isLoading,\n  items: state.items\n});\nconst configStateSelector = state => ({\n  enabled: state.text.enabled\n});\n/**\n * isComposing prevents double submissions in Korean and other languages.\n * starting point for a read:\n * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/isComposing\n * In the long term, the fix should happen by handling keypress, but changing this has unknown implications.\n */\nconst defaultShouldSubmit = event => event.key === 'Enter' && !event.shiftKey && !event.nativeEvent.isComposing;\nexport const TextareaComposer = _ref => {\n  var _ref2, _ref3, _useStateStore;\n  let {\n      className,\n      closeSuggestionsOnClickOutside,\n      containerClassName,\n      listClassName,\n      maxRows: maxRowsProp,\n      minRows: minRowsProp,\n      onBlur,\n      onChange,\n      onKeyDown,\n      onScroll,\n      onSelect,\n      placeholder: placeholderProp,\n      shouldSubmit: shouldSubmitProp\n    } = _ref,\n    restTextareaProps = _objectWithoutProperties(_ref, _excluded);\n  const {\n    t\n  } = useTranslationContext();\n  const {\n    AutocompleteSuggestionList = DefaultSuggestionList\n  } = useComponentContext();\n  const {\n    additionalTextareaProps,\n    cooldownRemaining,\n    handleSubmit,\n    maxRows: maxRowsContext,\n    minRows: minRowsContext,\n    onPaste,\n    shouldSubmit: shouldSubmitContext,\n    textareaRef\n  } = useMessageInputContext();\n  const maxRows = (_ref2 = maxRowsProp !== null && maxRowsProp !== void 0 ? maxRowsProp : maxRowsContext) !== null && _ref2 !== void 0 ? _ref2 : 1;\n  const minRows = minRowsProp !== null && minRowsProp !== void 0 ? minRowsProp : minRowsContext;\n  const placeholder = placeholderProp !== null && placeholderProp !== void 0 ? placeholderProp : additionalTextareaProps === null || additionalTextareaProps === void 0 ? void 0 : additionalTextareaProps.placeholder;\n  const shouldSubmit = (_ref3 = shouldSubmitProp !== null && shouldSubmitProp !== void 0 ? shouldSubmitProp : shouldSubmitContext) !== null && _ref3 !== void 0 ? _ref3 : defaultShouldSubmit;\n  const messageComposer = useMessageComposer();\n  const {\n    textComposer\n  } = messageComposer;\n  const {\n    selection,\n    suggestions,\n    text\n  } = useStateStore(textComposer.state, textComposerStateSelector);\n  const {\n    enabled\n  } = useStateStore(messageComposer.configState, configStateSelector);\n  const {\n    isLoadingItems\n  } = (_useStateStore = useStateStore(suggestions === null || suggestions === void 0 ? void 0 : suggestions.searchSource.state, searchSourceStateSelector)) !== null && _useStateStore !== void 0 ? _useStateStore : {};\n  const containerRef = useRef(null);\n  const [focusedItemIndex, setFocusedItemIndex] = useState(0);\n  const [isComposing, setIsComposing] = useState(false);\n  const changeHandler = useCallback(e => {\n    if (onChange) {\n      onChange(e);\n      return;\n    }\n    if (!textareaRef.current) return;\n    textComposer.handleChange({\n      selection: {\n        end: textareaRef.current.selectionEnd,\n        start: textareaRef.current.selectionStart\n      },\n      text: e.target.value\n    });\n  }, [onChange, textComposer, textareaRef]);\n  const onCompositionEnd = useCallback(() => {\n    setIsComposing(false);\n  }, []);\n  const onCompositionStart = useCallback(() => {\n    setIsComposing(true);\n  }, []);\n  const keyDownHandler = useCallback(event => {\n    var _textComposer$suggest;\n    if (onKeyDown) {\n      onKeyDown(event);\n      return;\n    }\n    if (textComposer.suggestions && (_textComposer$suggest = textComposer.suggestions.searchSource.items) !== null && _textComposer$suggest !== void 0 && _textComposer$suggest.length) {\n      if (event.key === 'Escape') return textComposer.closeSuggestions();\n      const loadedItems = textComposer.suggestions.searchSource.items;\n      if (event.key === 'Enter') {\n        event.preventDefault();\n        textComposer.handleSelect(loadedItems[focusedItemIndex]);\n      }\n      if (event.key === 'ArrowUp') {\n        event.preventDefault();\n        setFocusedItemIndex(prev => {\n          let nextIndex = prev - 1;\n          if (suggestions !== null && suggestions !== void 0 && suggestions.searchSource.hasNext) {\n            nextIndex = prev;\n          } else if (nextIndex < 0) {\n            nextIndex = loadedItems.length - 1;\n          }\n          return nextIndex;\n        });\n      }\n      if (event.key === 'ArrowDown') {\n        event.preventDefault();\n        setFocusedItemIndex(prev => {\n          let nextIndex = prev + 1;\n          if (suggestions !== null && suggestions !== void 0 && suggestions.searchSource.hasNext) {\n            nextIndex = prev;\n          } else if (nextIndex >= loadedItems.length) {\n            nextIndex = 0;\n          }\n          return nextIndex;\n        });\n      }\n    } else if (shouldSubmit(event) && textareaRef.current) {\n      if (event.key === 'Enter') {\n        // prevent adding newline when submitting a message with\n        event.preventDefault();\n      }\n      handleSubmit();\n      textareaRef.current.selectionEnd = 0;\n    }\n  }, [focusedItemIndex, handleSubmit, onKeyDown, shouldSubmit, suggestions, textComposer, textareaRef]);\n  const scrollHandler = useCallback(event => {\n    if (onScroll) {\n      onScroll(event);\n    } else {\n      textComposer.closeSuggestions();\n    }\n  }, [onScroll, textComposer]);\n  const setSelectionDebounced = useCallback(e => {\n    onSelect === null || onSelect === void 0 || onSelect(e);\n    textComposer.setSelection({\n      end: e.target.selectionEnd,\n      start: e.target.selectionStart\n    });\n  }, [onSelect, textComposer]);\n  useEffect(() => {\n    // FIXME: find the real reason for cursor being set to the end on each change\n    // This is a workaround to prevent the cursor from jumping\n    // to the end of the textarea when the user is typing\n    // at the position that is not at the end of the textarea value.\n    if (textareaRef.current && !isComposing) {\n      textareaRef.current.selectionStart = selection.start;\n      textareaRef.current.selectionEnd = selection.end;\n    }\n  }, [text, textareaRef, selection.start, selection.end, isComposing]);\n  useEffect(() => {\n    if (textComposer.suggestions) {\n      setFocusedItemIndex(0);\n    }\n  }, [textComposer.suggestions]);\n  return React.createElement(\"div\", {\n    className: clsx('rta', 'str-chat__textarea str-chat__message-textarea-react-host', containerClassName, {\n      ['rta--loading']: isLoadingItems\n    }),\n    ref: containerRef\n  }, React.createElement(Textarea, _objectSpread(_objectSpread(_objectSpread({}, additionalTextareaProps), restTextareaProps), {}, {\n    \"aria-label\": cooldownRemaining ? t('Slow Mode ON') : placeholder,\n    className: clsx('rta__textarea', 'str-chat__textarea__textarea str-chat__message-textarea', className),\n    \"data-testid\": 'message-input',\n    disabled: !enabled || !!cooldownRemaining,\n    maxRows: maxRows,\n    minRows: minRows,\n    onBlur: onBlur,\n    onChange: changeHandler,\n    onCompositionEnd: onCompositionEnd,\n    onCompositionStart: onCompositionStart,\n    onKeyDown: keyDownHandler,\n    onPaste: onPaste,\n    onScroll: scrollHandler,\n    onSelect: setSelectionDebounced,\n    placeholder: placeholder || t('Type your message'),\n    ref: ref => {\n      textareaRef.current = ref;\n    },\n    value: text\n  })), !isComposing && React.createElement(AutocompleteSuggestionList, {\n    className: listClassName,\n    closeOnClickOutside: closeSuggestionsOnClickOutside,\n    focusedItemIndex: focusedItemIndex,\n    setFocusedItemIndex: setFocusedItemIndex\n  }));\n};","map":{"version":3,"names":["clsx","React","useCallback","useEffect","useRef","useState","Textarea","useMessageComposer","useComponentContext","useMessageInputContext","useTranslationContext","useStateStore","SuggestionList","DefaultSuggestionList","textComposerStateSelector","state","selection","suggestions","text","searchSourceStateSelector","isLoadingItems","isLoading","items","configStateSelector","enabled","defaultShouldSubmit","event","key","shiftKey","nativeEvent","isComposing","TextareaComposer","_ref","_ref2","_ref3","_useStateStore","className","closeSuggestionsOnClickOutside","containerClassName","listClassName","maxRows","maxRowsProp","minRows","minRowsProp","onBlur","onChange","onKeyDown","onScroll","onSelect","placeholder","placeholderProp","shouldSubmit","shouldSubmitProp","restTextareaProps","_objectWithoutProperties","_excluded","t","AutocompleteSuggestionList","additionalTextareaProps","cooldownRemaining","handleSubmit","maxRowsContext","minRowsContext","onPaste","shouldSubmitContext","textareaRef","messageComposer","textComposer","configState","searchSource","containerRef","focusedItemIndex","setFocusedItemIndex","setIsComposing","changeHandler","e","current","handleChange","end","selectionEnd","start","selectionStart","target","value","onCompositionEnd","onCompositionStart","keyDownHandler","_textComposer$suggest","length","closeSuggestions","loadedItems","preventDefault","handleSelect","prev","nextIndex","hasNext","scrollHandler","setSelectionDebounced","setSelection","createElement","ref","_objectSpread","disabled","closeOnClickOutside"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/TextareaComposer/TextareaComposer.js"],"sourcesContent":["import clsx from 'clsx';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport Textarea from 'react-textarea-autosize';\nimport { useMessageComposer } from '../MessageInput';\nimport { useComponentContext, useMessageInputContext, useTranslationContext, } from '../../context';\nimport { useStateStore } from '../../store';\nimport { SuggestionList as DefaultSuggestionList } from './SuggestionList';\nconst textComposerStateSelector = (state) => ({\n    selection: state.selection,\n    suggestions: state.suggestions,\n    text: state.text,\n});\nconst searchSourceStateSelector = (state) => ({\n    isLoadingItems: state.isLoading,\n    items: state.items,\n});\nconst configStateSelector = (state) => ({\n    enabled: state.text.enabled,\n});\n/**\n * isComposing prevents double submissions in Korean and other languages.\n * starting point for a read:\n * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/isComposing\n * In the long term, the fix should happen by handling keypress, but changing this has unknown implications.\n */\nconst defaultShouldSubmit = (event) => event.key === 'Enter' && !event.shiftKey && !event.nativeEvent.isComposing;\nexport const TextareaComposer = ({ className, closeSuggestionsOnClickOutside, containerClassName, listClassName, maxRows: maxRowsProp, minRows: minRowsProp, onBlur, onChange, onKeyDown, onScroll, onSelect, placeholder: placeholderProp, shouldSubmit: shouldSubmitProp, ...restTextareaProps }) => {\n    const { t } = useTranslationContext();\n    const { AutocompleteSuggestionList = DefaultSuggestionList } = useComponentContext();\n    const { additionalTextareaProps, cooldownRemaining, handleSubmit, maxRows: maxRowsContext, minRows: minRowsContext, onPaste, shouldSubmit: shouldSubmitContext, textareaRef, } = useMessageInputContext();\n    const maxRows = maxRowsProp ?? maxRowsContext ?? 1;\n    const minRows = minRowsProp ?? minRowsContext;\n    const placeholder = placeholderProp ?? additionalTextareaProps?.placeholder;\n    const shouldSubmit = shouldSubmitProp ?? shouldSubmitContext ?? defaultShouldSubmit;\n    const messageComposer = useMessageComposer();\n    const { textComposer } = messageComposer;\n    const { selection, suggestions, text } = useStateStore(textComposer.state, textComposerStateSelector);\n    const { enabled } = useStateStore(messageComposer.configState, configStateSelector);\n    const { isLoadingItems } = useStateStore(suggestions?.searchSource.state, searchSourceStateSelector) ?? {};\n    const containerRef = useRef(null);\n    const [focusedItemIndex, setFocusedItemIndex] = useState(0);\n    const [isComposing, setIsComposing] = useState(false);\n    const changeHandler = useCallback((e) => {\n        if (onChange) {\n            onChange(e);\n            return;\n        }\n        if (!textareaRef.current)\n            return;\n        textComposer.handleChange({\n            selection: {\n                end: textareaRef.current.selectionEnd,\n                start: textareaRef.current.selectionStart,\n            },\n            text: e.target.value,\n        });\n    }, [onChange, textComposer, textareaRef]);\n    const onCompositionEnd = useCallback(() => {\n        setIsComposing(false);\n    }, []);\n    const onCompositionStart = useCallback(() => {\n        setIsComposing(true);\n    }, []);\n    const keyDownHandler = useCallback((event) => {\n        if (onKeyDown) {\n            onKeyDown(event);\n            return;\n        }\n        if (textComposer.suggestions &&\n            textComposer.suggestions.searchSource.items?.length) {\n            if (event.key === 'Escape')\n                return textComposer.closeSuggestions();\n            const loadedItems = textComposer.suggestions.searchSource.items;\n            if (event.key === 'Enter') {\n                event.preventDefault();\n                textComposer.handleSelect(loadedItems[focusedItemIndex]);\n            }\n            if (event.key === 'ArrowUp') {\n                event.preventDefault();\n                setFocusedItemIndex((prev) => {\n                    let nextIndex = prev - 1;\n                    if (suggestions?.searchSource.hasNext) {\n                        nextIndex = prev;\n                    }\n                    else if (nextIndex < 0) {\n                        nextIndex = loadedItems.length - 1;\n                    }\n                    return nextIndex;\n                });\n            }\n            if (event.key === 'ArrowDown') {\n                event.preventDefault();\n                setFocusedItemIndex((prev) => {\n                    let nextIndex = prev + 1;\n                    if (suggestions?.searchSource.hasNext) {\n                        nextIndex = prev;\n                    }\n                    else if (nextIndex >= loadedItems.length) {\n                        nextIndex = 0;\n                    }\n                    return nextIndex;\n                });\n            }\n        }\n        else if (shouldSubmit(event) && textareaRef.current) {\n            if (event.key === 'Enter') {\n                // prevent adding newline when submitting a message with\n                event.preventDefault();\n            }\n            handleSubmit();\n            textareaRef.current.selectionEnd = 0;\n        }\n    }, [\n        focusedItemIndex,\n        handleSubmit,\n        onKeyDown,\n        shouldSubmit,\n        suggestions,\n        textComposer,\n        textareaRef,\n    ]);\n    const scrollHandler = useCallback((event) => {\n        if (onScroll) {\n            onScroll(event);\n        }\n        else {\n            textComposer.closeSuggestions();\n        }\n    }, [onScroll, textComposer]);\n    const setSelectionDebounced = useCallback((e) => {\n        onSelect?.(e);\n        textComposer.setSelection({\n            end: e.target.selectionEnd,\n            start: e.target.selectionStart,\n        });\n    }, [onSelect, textComposer]);\n    useEffect(() => {\n        // FIXME: find the real reason for cursor being set to the end on each change\n        // This is a workaround to prevent the cursor from jumping\n        // to the end of the textarea when the user is typing\n        // at the position that is not at the end of the textarea value.\n        if (textareaRef.current && !isComposing) {\n            textareaRef.current.selectionStart = selection.start;\n            textareaRef.current.selectionEnd = selection.end;\n        }\n    }, [text, textareaRef, selection.start, selection.end, isComposing]);\n    useEffect(() => {\n        if (textComposer.suggestions) {\n            setFocusedItemIndex(0);\n        }\n    }, [textComposer.suggestions]);\n    return (React.createElement(\"div\", { className: clsx('rta', 'str-chat__textarea str-chat__message-textarea-react-host', containerClassName, {\n            ['rta--loading']: isLoadingItems,\n        }), ref: containerRef },\n        React.createElement(Textarea, { ...additionalTextareaProps, ...restTextareaProps, \"aria-label\": cooldownRemaining ? t('Slow Mode ON') : placeholder, className: clsx('rta__textarea', 'str-chat__textarea__textarea str-chat__message-textarea', className), \"data-testid\": 'message-input', disabled: !enabled || !!cooldownRemaining, maxRows: maxRows, minRows: minRows, onBlur: onBlur, onChange: changeHandler, onCompositionEnd: onCompositionEnd, onCompositionStart: onCompositionStart, onKeyDown: keyDownHandler, onPaste: onPaste, onScroll: scrollHandler, onSelect: setSelectionDebounced, placeholder: placeholder || t('Type your message'), ref: (ref) => {\n                textareaRef.current = ref;\n            }, value: text }),\n        !isComposing && (React.createElement(AutocompleteSuggestionList, { className: listClassName, closeOnClickOutside: closeSuggestionsOnClickOutside, focusedItemIndex: focusedItemIndex, setFocusedItemIndex: setFocusedItemIndex }))));\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}