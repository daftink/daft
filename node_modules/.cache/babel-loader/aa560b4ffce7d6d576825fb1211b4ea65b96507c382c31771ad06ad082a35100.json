{"ast":null,"code":"import React from 'react';\nimport { CloseIcon } from './icons';\nimport { useChannelActionContext, useTranslationContext } from '../../context';\nexport const UnreadMessagesNotification = _ref => {\n  let {\n    queryMessageLimit,\n    showCount,\n    unreadCount\n  } = _ref;\n  const {\n    jumpToFirstUnreadMessage,\n    markRead\n  } = useChannelActionContext('UnreadMessagesNotification');\n  const {\n    t\n  } = useTranslationContext('UnreadMessagesNotification');\n  return React.createElement(\"div\", {\n    className: 'str-chat__unread-messages-notification',\n    \"data-testid\": 'unread-messages-notification'\n  }, React.createElement(\"button\", {\n    onClick: () => jumpToFirstUnreadMessage(queryMessageLimit)\n  }, unreadCount && showCount ? t('{{count}} unread', {\n    count: unreadCount !== null && unreadCount !== void 0 ? unreadCount : 0\n  }) : t('Unread messages')), React.createElement(\"button\", {\n    onClick: () => markRead()\n  }, React.createElement(CloseIcon, null)));\n};","map":{"version":3,"names":["React","CloseIcon","useChannelActionContext","useTranslationContext","UnreadMessagesNotification","_ref","queryMessageLimit","showCount","unreadCount","jumpToFirstUnreadMessage","markRead","t","createElement","className","onClick","count"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/MessageList/UnreadMessagesNotification.js"],"sourcesContent":["import React from 'react';\nimport { CloseIcon } from './icons';\nimport { useChannelActionContext, useTranslationContext } from '../../context';\nexport const UnreadMessagesNotification = ({ queryMessageLimit, showCount, unreadCount, }) => {\n    const { jumpToFirstUnreadMessage, markRead } = useChannelActionContext('UnreadMessagesNotification');\n    const { t } = useTranslationContext('UnreadMessagesNotification');\n    return (React.createElement(\"div\", { className: 'str-chat__unread-messages-notification', \"data-testid\": 'unread-messages-notification' },\n        React.createElement(\"button\", { onClick: () => jumpToFirstUnreadMessage(queryMessageLimit) }, unreadCount && showCount\n            ? t('{{count}} unread', { count: unreadCount ?? 0 })\n            : t('Unread messages')),\n        React.createElement(\"button\", { onClick: () => markRead() },\n            React.createElement(CloseIcon, null))));\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,SAAS;AACnC,SAASC,uBAAuB,EAAEC,qBAAqB,QAAQ,eAAe;AAC9E,OAAO,MAAMC,0BAA0B,GAAGC,IAAA,IAAoD;EAAA,IAAnD;IAAEC,iBAAiB;IAAEC,SAAS;IAAEC;EAAa,CAAC,GAAAH,IAAA;EACrF,MAAM;IAAEI,wBAAwB;IAAEC;EAAS,CAAC,GAAGR,uBAAuB,CAAC,4BAA4B,CAAC;EACpG,MAAM;IAAES;EAAE,CAAC,GAAGR,qBAAqB,CAAC,4BAA4B,CAAC;EACjE,OAAQH,KAAK,CAACY,aAAa,CAAC,KAAK,EAAE;IAAEC,SAAS,EAAE,wCAAwC;IAAE,aAAa,EAAE;EAA+B,CAAC,EACrIb,KAAK,CAACY,aAAa,CAAC,QAAQ,EAAE;IAAEE,OAAO,EAAEA,CAAA,KAAML,wBAAwB,CAACH,iBAAiB;EAAE,CAAC,EAAEE,WAAW,IAAID,SAAS,GAChHI,CAAC,CAAC,kBAAkB,EAAE;IAAEI,KAAK,EAAEP,WAAW,aAAXA,WAAW,cAAXA,WAAW,GAAI;EAAE,CAAC,CAAC,GAClDG,CAAC,CAAC,iBAAiB,CAAC,CAAC,EAC3BX,KAAK,CAACY,aAAa,CAAC,QAAQ,EAAE;IAAEE,OAAO,EAAEA,CAAA,KAAMJ,QAAQ,CAAC;EAAE,CAAC,EACvDV,KAAK,CAACY,aAAa,CAACX,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;AAClD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}