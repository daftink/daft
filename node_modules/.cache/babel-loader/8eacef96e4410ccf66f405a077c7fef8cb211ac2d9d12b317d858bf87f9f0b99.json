{"ast":null,"code":"export const attachmentUploadBlockedNotificationTranslator = _ref => {\n  var _notification$metadat, _notification$metadat2;\n  let {\n    options,\n    t\n  } = _ref;\n  const {\n    notification\n  } = options;\n  if (!notification) return null;\n  if (typeof ((_notification$metadat = notification.metadata) === null || _notification$metadat === void 0 ? void 0 : _notification$metadat.reason) !== 'string') {\n    const reason = t('unknown error');\n    return t('Attachment upload blocked due to {{reason}}', {\n      reason\n    });\n  }\n  if (((_notification$metadat2 = notification.metadata) === null || _notification$metadat2 === void 0 ? void 0 : _notification$metadat2.reason) === 'size_limit') {\n    const reason = t('size limit');\n    return t('Attachment upload blocked due to {{reason}}', {\n      reason\n    });\n  }\n  const reason = t('unsupported file type');\n  return t('Attachment upload blocked due to {{reason}}', {\n    reason\n  });\n};\nexport const attachmentUploadFailedNotificationTranslator = _ref2 => {\n  var _notification$metadat3;\n  let {\n    options,\n    t\n  } = _ref2;\n  const {\n    notification\n  } = options;\n  if (!notification) return null;\n  const {\n    reason: originalReason\n  } = (_notification$metadat3 = notification.metadata) !== null && _notification$metadat3 !== void 0 ? _notification$metadat3 : {};\n  if (typeof originalReason !== 'string') {\n    const reason = t('unknown error');\n    return t('Attachment upload failed due to {{reason}}', {\n      reason\n    });\n  }\n  let reason = originalReason.toLowerCase();\n  if (reason === 'network error') {\n    reason = t('network error');\n    return t('Attachment upload failed due to {{reason}}', {\n      reason\n    });\n  }\n  // custom reason string\n  return t('Attachment upload failed due to {{reason}}', {\n    reason\n  });\n};","map":{"version":3,"names":["attachmentUploadBlockedNotificationTranslator","_ref","_notification$metadat","_notification$metadat2","options","t","notification","metadata","reason","attachmentUploadFailedNotificationTranslator","_ref2","_notification$metadat3","originalReason","toLowerCase"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/i18n/TranslationBuilder/notifications/attachmentUpload.js"],"sourcesContent":["export const attachmentUploadBlockedNotificationTranslator = ({ options, t }) => {\n    const { notification } = options;\n    if (!notification)\n        return null;\n    if (typeof notification.metadata?.reason !== 'string') {\n        const reason = t('unknown error');\n        return t('Attachment upload blocked due to {{reason}}', { reason });\n    }\n    if (notification.metadata?.reason === 'size_limit') {\n        const reason = t('size limit');\n        return t('Attachment upload blocked due to {{reason}}', { reason });\n    }\n    const reason = t('unsupported file type');\n    return t('Attachment upload blocked due to {{reason}}', { reason });\n};\nexport const attachmentUploadFailedNotificationTranslator = ({ options, t }) => {\n    const { notification } = options;\n    if (!notification)\n        return null;\n    const { reason: originalReason } = notification.metadata ?? {};\n    if (typeof originalReason !== 'string') {\n        const reason = t('unknown error');\n        return t('Attachment upload failed due to {{reason}}', { reason });\n    }\n    let reason = originalReason.toLowerCase();\n    if (reason === 'network error') {\n        reason = t('network error');\n        return t('Attachment upload failed due to {{reason}}', { reason });\n    }\n    // custom reason string\n    return t('Attachment upload failed due to {{reason}}', { reason });\n};\n"],"mappings":"AAAA,OAAO,MAAMA,6CAA6C,GAAGC,IAAA,IAAoB;EAAA,IAAAC,qBAAA,EAAAC,sBAAA;EAAA,IAAnB;IAAEC,OAAO;IAAEC;EAAE,CAAC,GAAAJ,IAAA;EACxE,MAAM;IAAEK;EAAa,CAAC,GAAGF,OAAO;EAChC,IAAI,CAACE,YAAY,EACb,OAAO,IAAI;EACf,IAAI,SAAAJ,qBAAA,GAAOI,YAAY,CAACC,QAAQ,cAAAL,qBAAA,uBAArBA,qBAAA,CAAuBM,MAAM,MAAK,QAAQ,EAAE;IACnD,MAAMA,MAAM,GAAGH,CAAC,CAAC,eAAe,CAAC;IACjC,OAAOA,CAAC,CAAC,6CAA6C,EAAE;MAAEG;IAAO,CAAC,CAAC;EACvE;EACA,IAAI,EAAAL,sBAAA,GAAAG,YAAY,CAACC,QAAQ,cAAAJ,sBAAA,uBAArBA,sBAAA,CAAuBK,MAAM,MAAK,YAAY,EAAE;IAChD,MAAMA,MAAM,GAAGH,CAAC,CAAC,YAAY,CAAC;IAC9B,OAAOA,CAAC,CAAC,6CAA6C,EAAE;MAAEG;IAAO,CAAC,CAAC;EACvE;EACA,MAAMA,MAAM,GAAGH,CAAC,CAAC,uBAAuB,CAAC;EACzC,OAAOA,CAAC,CAAC,6CAA6C,EAAE;IAAEG;EAAO,CAAC,CAAC;AACvE,CAAC;AACD,OAAO,MAAMC,4CAA4C,GAAGC,KAAA,IAAoB;EAAA,IAAAC,sBAAA;EAAA,IAAnB;IAAEP,OAAO;IAAEC;EAAE,CAAC,GAAAK,KAAA;EACvE,MAAM;IAAEJ;EAAa,CAAC,GAAGF,OAAO;EAChC,IAAI,CAACE,YAAY,EACb,OAAO,IAAI;EACf,MAAM;IAAEE,MAAM,EAAEI;EAAe,CAAC,IAAAD,sBAAA,GAAGL,YAAY,CAACC,QAAQ,cAAAI,sBAAA,cAAAA,sBAAA,GAAI,CAAC,CAAC;EAC9D,IAAI,OAAOC,cAAc,KAAK,QAAQ,EAAE;IACpC,MAAMJ,MAAM,GAAGH,CAAC,CAAC,eAAe,CAAC;IACjC,OAAOA,CAAC,CAAC,4CAA4C,EAAE;MAAEG;IAAO,CAAC,CAAC;EACtE;EACA,IAAIA,MAAM,GAAGI,cAAc,CAACC,WAAW,CAAC,CAAC;EACzC,IAAIL,MAAM,KAAK,eAAe,EAAE;IAC5BA,MAAM,GAAGH,CAAC,CAAC,eAAe,CAAC;IAC3B,OAAOA,CAAC,CAAC,4CAA4C,EAAE;MAAEG;IAAO,CAAC,CAAC;EACtE;EACA;EACA,OAAOH,CAAC,CAAC,4CAA4C,EAAE;IAAEG;EAAO,CAAC,CAAC;AACtE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}