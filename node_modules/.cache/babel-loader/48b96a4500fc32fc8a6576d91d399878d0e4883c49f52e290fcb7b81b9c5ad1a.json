{"ast":null,"code":"import _objectSpread from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { useEffect, useMemo } from 'react';\nimport { FixedSizeQueueCache, MessageComposer } from 'stream-chat';\nimport { useThreadContext } from '../../Threads';\nimport { useChannelStateContext, useChatContext, useMessageContext } from '../../../context';\nimport { useLegacyThreadContext } from '../../Thread';\nconst queueCache = new FixedSizeQueueCache(64);\nexport const useMessageComposer = () => {\n  const {\n    client\n  } = useChatContext();\n  const {\n    channel\n  } = useChannelStateContext();\n  const {\n    editing,\n    message: editedMessage\n  } = useMessageContext();\n  // legacy thread will receive new composer\n  const {\n    legacyThread: parentMessage\n  } = useLegacyThreadContext();\n  const threadInstance = useThreadContext();\n  const cachedEditedMessage = useMemo(() => {\n    if (!editedMessage) return undefined;\n    return editedMessage;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editedMessage === null || editedMessage === void 0 ? void 0 : editedMessage.id]);\n  const cachedParentMessage = useMemo(() => {\n    if (!parentMessage) return undefined;\n    return parentMessage;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.id]);\n  // composer hierarchy\n  // edited message (always new) -> thread instance (own) -> thread message (always new) -> channel (own)\n  // editedMessage ?? thread ?? parentMessage ?? channel;\n  const messageComposer = useMemo(() => {\n    if (editing && cachedEditedMessage) {\n      const tag = MessageComposer.constructTag(cachedEditedMessage);\n      const cachedComposer = queueCache.get(tag);\n      if (cachedComposer) return cachedComposer;\n      return new MessageComposer({\n        client,\n        composition: cachedEditedMessage,\n        compositionContext: cachedEditedMessage\n      });\n    } else if (threadInstance) {\n      return threadInstance.messageComposer;\n    } else if (cachedParentMessage) {\n      const compositionContext = _objectSpread(_objectSpread({}, cachedParentMessage), {}, {\n        legacyThreadId: cachedParentMessage.id\n      });\n      const tag = MessageComposer.constructTag(compositionContext);\n      const cachedComposer = queueCache.get(tag);\n      if (cachedComposer) return cachedComposer;\n      return new MessageComposer({\n        client,\n        compositionContext\n      });\n    } else {\n      return channel.messageComposer;\n    }\n  }, [cachedEditedMessage, cachedParentMessage, channel, client, editing, threadInstance]);\n  if (['legacy_thread', 'message'].includes(messageComposer.contextType) && !queueCache.peek(messageComposer.tag)) {\n    queueCache.add(messageComposer.tag, messageComposer);\n  }\n  useEffect(() => {\n    const unsubscribe = messageComposer.registerSubscriptions();\n    return () => {\n      unsubscribe();\n    };\n  }, [messageComposer]);\n  return messageComposer;\n};","map":{"version":3,"names":["useEffect","useMemo","FixedSizeQueueCache","MessageComposer","useThreadContext","useChannelStateContext","useChatContext","useMessageContext","useLegacyThreadContext","queueCache","useMessageComposer","client","channel","editing","message","editedMessage","legacyThread","parentMessage","threadInstance","cachedEditedMessage","undefined","id","cachedParentMessage","messageComposer","tag","constructTag","cachedComposer","get","composition","compositionContext","_objectSpread","legacyThreadId","includes","contextType","peek","add","unsubscribe","registerSubscriptions"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/MessageInput/hooks/useMessageComposer.js"],"sourcesContent":["import { useEffect, useMemo } from 'react';\nimport { FixedSizeQueueCache, MessageComposer } from 'stream-chat';\nimport { useThreadContext } from '../../Threads';\nimport { useChannelStateContext, useChatContext, useMessageContext, } from '../../../context';\nimport { useLegacyThreadContext } from '../../Thread';\nconst queueCache = new FixedSizeQueueCache(64);\nexport const useMessageComposer = () => {\n    const { client } = useChatContext();\n    const { channel } = useChannelStateContext();\n    const { editing, message: editedMessage } = useMessageContext();\n    // legacy thread will receive new composer\n    const { legacyThread: parentMessage } = useLegacyThreadContext();\n    const threadInstance = useThreadContext();\n    const cachedEditedMessage = useMemo(() => {\n        if (!editedMessage)\n            return undefined;\n        return editedMessage;\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [editedMessage?.id]);\n    const cachedParentMessage = useMemo(() => {\n        if (!parentMessage)\n            return undefined;\n        return parentMessage;\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [parentMessage?.id]);\n    // composer hierarchy\n    // edited message (always new) -> thread instance (own) -> thread message (always new) -> channel (own)\n    // editedMessage ?? thread ?? parentMessage ?? channel;\n    const messageComposer = useMemo(() => {\n        if (editing && cachedEditedMessage) {\n            const tag = MessageComposer.constructTag(cachedEditedMessage);\n            const cachedComposer = queueCache.get(tag);\n            if (cachedComposer)\n                return cachedComposer;\n            return new MessageComposer({\n                client,\n                composition: cachedEditedMessage,\n                compositionContext: cachedEditedMessage,\n            });\n        }\n        else if (threadInstance) {\n            return threadInstance.messageComposer;\n        }\n        else if (cachedParentMessage) {\n            const compositionContext = {\n                ...cachedParentMessage,\n                legacyThreadId: cachedParentMessage.id,\n            };\n            const tag = MessageComposer.constructTag(compositionContext);\n            const cachedComposer = queueCache.get(tag);\n            if (cachedComposer)\n                return cachedComposer;\n            return new MessageComposer({\n                client,\n                compositionContext,\n            });\n        }\n        else {\n            return channel.messageComposer;\n        }\n    }, [\n        cachedEditedMessage,\n        cachedParentMessage,\n        channel,\n        client,\n        editing,\n        threadInstance,\n    ]);\n    if (['legacy_thread', 'message'].includes(messageComposer.contextType) &&\n        !queueCache.peek(messageComposer.tag)) {\n        queueCache.add(messageComposer.tag, messageComposer);\n    }\n    useEffect(() => {\n        const unsubscribe = messageComposer.registerSubscriptions();\n        return () => {\n            unsubscribe();\n        };\n    }, [messageComposer]);\n    return messageComposer;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}