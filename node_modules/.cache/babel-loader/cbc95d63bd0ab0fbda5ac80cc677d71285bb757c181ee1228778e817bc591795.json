{"ast":null,"code":"import _objectSpread from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport React, { useContext } from 'react';\nexport const MessageContext = React.createContext(undefined);\nexport const MessageProvider = _ref => {\n  let {\n    children,\n    value\n  } = _ref;\n  return React.createElement(MessageContext.Provider, {\n    value: value\n  }, children);\n};\nexport const useMessageContext = (\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n_componentName) => {\n  const contextValue = useContext(MessageContext);\n  if (!contextValue) {\n    return {};\n  }\n  return contextValue;\n};\n/**\n * Typescript currently does not support partial inference, so if MessageContext\n * typing is desired while using the HOC withMessageContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withMessageContext = Component => {\n  const WithMessageContextComponent = props => {\n    const messageContext = useMessageContext();\n    return React.createElement(Component, _objectSpread(_objectSpread({}, props), messageContext));\n  };\n  WithMessageContextComponent.displayName = (Component.displayName || Component.name || 'Component').replace('Base', '');\n  return WithMessageContextComponent;\n};","map":{"version":3,"names":["React","useContext","MessageContext","createContext","undefined","MessageProvider","_ref","children","value","createElement","Provider","useMessageContext","_componentName","contextValue","withMessageContext","Component","WithMessageContextComponent","props","messageContext","_objectSpread","displayName","name","replace"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/context/MessageContext.js"],"sourcesContent":["import React, { useContext } from 'react';\nexport const MessageContext = React.createContext(undefined);\nexport const MessageProvider = ({ children, value, }) => (React.createElement(MessageContext.Provider, { value: value }, children));\nexport const useMessageContext = (\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n_componentName) => {\n    const contextValue = useContext(MessageContext);\n    if (!contextValue) {\n        return {};\n    }\n    return contextValue;\n};\n/**\n * Typescript currently does not support partial inference, so if MessageContext\n * typing is desired while using the HOC withMessageContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withMessageContext = (Component) => {\n    const WithMessageContextComponent = (props) => {\n        const messageContext = useMessageContext();\n        return React.createElement(Component, { ...props, ...messageContext });\n    };\n    WithMessageContextComponent.displayName = (Component.displayName ||\n        Component.name ||\n        'Component').replace('Base', '');\n    return WithMessageContextComponent;\n};\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAO,MAAMC,cAAc,GAAGF,KAAK,CAACG,aAAa,CAACC,SAAS,CAAC;AAC5D,OAAO,MAAMC,eAAe,GAAGC,IAAA;EAAA,IAAC;IAAEC,QAAQ;IAAEC;EAAO,CAAC,GAAAF,IAAA;EAAA,OAAMN,KAAK,CAACS,aAAa,CAACP,cAAc,CAACQ,QAAQ,EAAE;IAAEF,KAAK,EAAEA;EAAM,CAAC,EAAED,QAAQ,CAAC;AAAA,CAAC;AACnI,OAAO,MAAMI,iBAAiB,GAAGA;AACjC;AACAC,cAAc,KAAK;EACf,MAAMC,YAAY,GAAGZ,UAAU,CAACC,cAAc,CAAC;EAC/C,IAAI,CAACW,YAAY,EAAE;IACf,OAAO,CAAC,CAAC;EACb;EACA,OAAOA,YAAY;AACvB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,GAAIC,SAAS,IAAK;EAC7C,MAAMC,2BAA2B,GAAIC,KAAK,IAAK;IAC3C,MAAMC,cAAc,GAAGP,iBAAiB,CAAC,CAAC;IAC1C,OAAOX,KAAK,CAACS,aAAa,CAACM,SAAS,EAAAI,aAAA,CAAAA,aAAA,KAAOF,KAAK,GAAKC,cAAc,CAAE,CAAC;EAC1E,CAAC;EACDF,2BAA2B,CAACI,WAAW,GAAG,CAACL,SAAS,CAACK,WAAW,IAC5DL,SAAS,CAACM,IAAI,IACd,WAAW,EAAEC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EACpC,OAAON,2BAA2B;AACtC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}