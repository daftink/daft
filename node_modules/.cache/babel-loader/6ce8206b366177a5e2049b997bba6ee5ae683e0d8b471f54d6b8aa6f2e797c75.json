{"ast":null,"code":"import _objectWithoutProperties from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"handleFetchReactions\", \"reactionDetailsSort\", \"reverse\", \"sortReactionDetails\"];\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { ReactionsListModal as DefaultReactionsListModal } from './ReactionsListModal';\nimport { useProcessReactions } from './hooks/useProcessReactions';\nimport { useComponentContext, useTranslationContext } from '../../context';\nimport { MAX_MESSAGE_REACTIONS_TO_FETCH } from '../Message/hooks';\nconst UnMemoizedReactionsList = props => {\n  const {\n      handleFetchReactions,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      reactionDetailsSort,\n      reverse = false,\n      sortReactionDetails\n    } = props,\n    rest = _objectWithoutProperties(props, _excluded);\n  const {\n    existingReactions,\n    hasReactions,\n    totalReactionCount\n  } = useProcessReactions(rest);\n  const [selectedReactionType, setSelectedReactionType] = useState(null);\n  const {\n    t\n  } = useTranslationContext('ReactionsList');\n  const {\n    ReactionsListModal = DefaultReactionsListModal\n  } = useComponentContext();\n  const handleReactionButtonClick = reactionType => {\n    if (totalReactionCount > MAX_MESSAGE_REACTIONS_TO_FETCH) {\n      return;\n    }\n    setSelectedReactionType(reactionType);\n  };\n  if (!hasReactions) return null;\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    \"aria-label\": t('aria/Reaction list'),\n    className: clsx('str-chat__reaction-list str-chat__message-reactions-container', {\n      // we are stuck with both classes as both are used in CSS\n      'str-chat__reaction-list--reverse': reverse\n    }),\n    \"data-testid\": 'reaction-list',\n    role: 'figure'\n  }, React.createElement(\"ul\", {\n    className: 'str-chat__message-reactions'\n  }, existingReactions.map(_ref => {\n    let {\n      EmojiComponent,\n      isOwnReaction,\n      reactionCount,\n      reactionType\n    } = _ref;\n    return EmojiComponent && React.createElement(\"li\", {\n      className: clsx('str-chat__message-reaction', {\n        'str-chat__message-reaction-own': isOwnReaction\n      }),\n      key: reactionType\n    }, React.createElement(\"button\", {\n      \"aria-label\": \"Reactions: \".concat(reactionType),\n      \"data-testid\": \"reactions-list-button-\".concat(reactionType),\n      onClick: () => handleReactionButtonClick(reactionType),\n      type: 'button'\n    }, React.createElement(\"span\", {\n      className: 'str-chat__message-reaction-emoji'\n    }, React.createElement(EmojiComponent, null)), \"\\u00A0\", React.createElement(\"span\", {\n      className: 'str-chat__message-reaction-count',\n      \"data-testclass\": 'reaction-list-reaction-count'\n    }, reactionCount)));\n  }), React.createElement(\"li\", null, React.createElement(\"span\", {\n    className: 'str-chat__reaction-list--counter'\n  }, totalReactionCount)))), selectedReactionType !== null && React.createElement(ReactionsListModal, {\n    handleFetchReactions: handleFetchReactions,\n    onClose: () => setSelectedReactionType(null),\n    onSelectedReactionTypeChange: setSelectedReactionType,\n    open: selectedReactionType !== null,\n    reactions: existingReactions,\n    selectedReactionType: selectedReactionType,\n    sortReactionDetails: sortReactionDetails\n  }));\n};\n/**\n * Component that displays a list of reactions on a message.\n */\nexport const ReactionsList = React.memo(UnMemoizedReactionsList);","map":{"version":3,"names":["React","useState","clsx","ReactionsListModal","DefaultReactionsListModal","useProcessReactions","useComponentContext","useTranslationContext","MAX_MESSAGE_REACTIONS_TO_FETCH","UnMemoizedReactionsList","props","handleFetchReactions","reactionDetailsSort","reverse","sortReactionDetails","rest","_objectWithoutProperties","_excluded","existingReactions","hasReactions","totalReactionCount","selectedReactionType","setSelectedReactionType","t","handleReactionButtonClick","reactionType","createElement","Fragment","className","role","map","_ref","EmojiComponent","isOwnReaction","reactionCount","key","concat","onClick","type","onClose","onSelectedReactionTypeChange","open","reactions","ReactionsList","memo"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/Reactions/ReactionsList.js"],"sourcesContent":["import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { ReactionsListModal as DefaultReactionsListModal } from './ReactionsListModal';\nimport { useProcessReactions } from './hooks/useProcessReactions';\nimport { useComponentContext, useTranslationContext } from '../../context';\nimport { MAX_MESSAGE_REACTIONS_TO_FETCH } from '../Message/hooks';\nconst UnMemoizedReactionsList = (props) => {\n    const { handleFetchReactions, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    reactionDetailsSort, reverse = false, sortReactionDetails, ...rest } = props;\n    const { existingReactions, hasReactions, totalReactionCount } = useProcessReactions(rest);\n    const [selectedReactionType, setSelectedReactionType] = useState(null);\n    const { t } = useTranslationContext('ReactionsList');\n    const { ReactionsListModal = DefaultReactionsListModal } = useComponentContext();\n    const handleReactionButtonClick = (reactionType) => {\n        if (totalReactionCount > MAX_MESSAGE_REACTIONS_TO_FETCH) {\n            return;\n        }\n        setSelectedReactionType(reactionType);\n    };\n    if (!hasReactions)\n        return null;\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { \"aria-label\": t('aria/Reaction list'), className: clsx('str-chat__reaction-list str-chat__message-reactions-container', {\n                // we are stuck with both classes as both are used in CSS\n                'str-chat__reaction-list--reverse': reverse,\n            }), \"data-testid\": 'reaction-list', role: 'figure' },\n            React.createElement(\"ul\", { className: 'str-chat__message-reactions' },\n                existingReactions.map(({ EmojiComponent, isOwnReaction, reactionCount, reactionType }) => EmojiComponent && (React.createElement(\"li\", { className: clsx('str-chat__message-reaction', {\n                        'str-chat__message-reaction-own': isOwnReaction,\n                    }), key: reactionType },\n                    React.createElement(\"button\", { \"aria-label\": `Reactions: ${reactionType}`, \"data-testid\": `reactions-list-button-${reactionType}`, onClick: () => handleReactionButtonClick(reactionType), type: 'button' },\n                        React.createElement(\"span\", { className: 'str-chat__message-reaction-emoji' },\n                            React.createElement(EmojiComponent, null)),\n                        \"\\u00A0\",\n                        React.createElement(\"span\", { className: 'str-chat__message-reaction-count', \"data-testclass\": 'reaction-list-reaction-count' }, reactionCount))))),\n                React.createElement(\"li\", null,\n                    React.createElement(\"span\", { className: 'str-chat__reaction-list--counter' }, totalReactionCount)))),\n        selectedReactionType !== null && (React.createElement(ReactionsListModal, { handleFetchReactions: handleFetchReactions, onClose: () => setSelectedReactionType(null), onSelectedReactionTypeChange: setSelectedReactionType, open: selectedReactionType !== null, reactions: existingReactions, selectedReactionType: selectedReactionType, sortReactionDetails: sortReactionDetails }))));\n};\n/**\n * Component that displays a list of reactions on a message.\n */\nexport const ReactionsList = React.memo(UnMemoizedReactionsList);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}