{"ast":null,"code":"import { encodeToWaw } from './wav';\nimport { createFileFromBlobs, getExtensionFromMimeType } from '../../ReactFileUtilities';\nexport const transcode = _ref => {\n  let {\n    blob,\n    encoder = encodeToWaw,\n    sampleRate\n  } = _ref;\n  return encoder(createFileFromBlobs({\n    blobsArray: [blob],\n    fileName: \"audio_recording_\".concat(new Date().toISOString(), \".\").concat(getExtensionFromMimeType(blob.type)),\n    mimeType: blob.type\n  }), sampleRate);\n};","map":{"version":3,"names":["encodeToWaw","createFileFromBlobs","getExtensionFromMimeType","transcode","_ref","blob","encoder","sampleRate","blobsArray","fileName","concat","Date","toISOString","type","mimeType"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/MediaRecorder/transcode/index.js"],"sourcesContent":["import { encodeToWaw } from './wav';\nimport { createFileFromBlobs, getExtensionFromMimeType } from '../../ReactFileUtilities';\nexport const transcode = ({ blob, encoder = encodeToWaw, sampleRate, }) => encoder(createFileFromBlobs({\n    blobsArray: [blob],\n    fileName: `audio_recording_${new Date().toISOString()}.${getExtensionFromMimeType(blob.type)}`,\n    mimeType: blob.type,\n}), sampleRate);\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,mBAAmB,EAAEC,wBAAwB,QAAQ,0BAA0B;AACxF,OAAO,MAAMC,SAAS,GAAGC,IAAA;EAAA,IAAC;IAAEC,IAAI;IAAEC,OAAO,GAAGN,WAAW;IAAEO;EAAY,CAAC,GAAAH,IAAA;EAAA,OAAKE,OAAO,CAACL,mBAAmB,CAAC;IACnGO,UAAU,EAAE,CAACH,IAAI,CAAC;IAClBI,QAAQ,qBAAAC,MAAA,CAAqB,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,OAAAF,MAAA,CAAIR,wBAAwB,CAACG,IAAI,CAACQ,IAAI,CAAC,CAAE;IAC9FC,QAAQ,EAAET,IAAI,CAACQ;EACnB,CAAC,CAAC,EAAEN,UAAU,CAAC;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}