{"ast":null,"code":"import React,{useEffect,useState}from'react';import{StreamChat}from'stream-chat';import{Chat,ChannelList,Channel,ChannelHeader,MessageList,MessageInput,Thread,Window}from'stream-chat-react';import'stream-chat-css/dist/css/index.css';import'./App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const API_KEY='3nkn6wg7k7zt';const USER_ID='daftuser';export default function App(){const[client,setClient]=useState(null);const[theme,setTheme]=useState('messaging light');const[activeChannel,setActiveChannel]=useState(null);useEffect(()=>{(async()=>{const res=await fetch('/token',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({userId:USER_ID})});if(!res.ok)throw new Error('Token fetch failed: '+res.status);const{token}=await res.json();const c=StreamChat.getInstance(API_KEY);await c.connectUser({id:USER_ID,name:'Daft User'},token);setClient(c);})();return()=>client===null||client===void 0?void 0:client.disconnectUser();},[]);if(!client)return/*#__PURE__*/_jsx(\"div\",{className:\"loading\",children:\"Loading chat\\u2026\"});const filters={type:'messaging'};const options={state:true,watch:true};return/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",children:[/*#__PURE__*/_jsxs(\"header\",{className:\"app-header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Daft Chat\"}),/*#__PURE__*/_jsx(\"button\",{className:\"theme-toggle\",onClick:()=>setTheme(t=>t.includes('dark')?'messaging light':'messaging dark'),children:theme.includes('dark')?'Light Mode':'Dark Mode'})]}),/*#__PURE__*/_jsx(Chat,{client:client,theme:theme,children:/*#__PURE__*/_jsxs(\"div\",{className:\"main-layout\",children:[/*#__PURE__*/_jsx(\"aside\",{className:\"channel-list\",children:/*#__PURE__*/_jsx(ChannelList,{filters:filters,options:options,onChannelSelect:channel=>setActiveChannel(channel)})}),/*#__PURE__*/_jsx(\"section\",{className:\"chat-panel\",children:activeChannel?/*#__PURE__*/_jsxs(Channel,{channel:activeChannel,children:[/*#__PURE__*/_jsxs(Window,{children:[/*#__PURE__*/_jsx(ChannelHeader,{}),/*#__PURE__*/_jsx(MessageList,{}),/*#__PURE__*/_jsx(MessageInput,{})]}),/*#__PURE__*/_jsx(Thread,{})]}):/*#__PURE__*/_jsx(\"div\",{className:\"no-channel\",children:\"Select a channel to start\"})})]})})]});}","map":{"version":3,"names":["React","useEffect","useState","StreamChat","Chat","ChannelList","Channel","ChannelHeader","MessageList","MessageInput","Thread","Window","jsx","_jsx","jsxs","_jsxs","API_KEY","USER_ID","App","client","setClient","theme","setTheme","activeChannel","setActiveChannel","res","fetch","method","headers","body","JSON","stringify","userId","ok","Error","status","token","json","c","getInstance","connectUser","id","name","disconnectUser","className","children","filters","type","options","state","watch","onClick","t","includes","onChannelSelect","channel"],"sources":["/tmp/daft-chat-temp/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { StreamChat } from 'stream-chat';\nimport {\n  Chat,\n  ChannelList,\n  Channel,\n  ChannelHeader,\n  MessageList,\n  MessageInput,\n  Thread,\n  Window,\n} from 'stream-chat-react';\nimport 'stream-chat-css/dist/css/index.css';\nimport './App.css';\n\nconst API_KEY = '3nkn6wg7k7zt';\nconst USER_ID = 'daftuser';\n\nexport default function App() {\n  const [client, setClient] = useState(null);\n  const [theme, setTheme] = useState('messaging light');\n  const [activeChannel, setActiveChannel] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      const res = await fetch('/token', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ userId: USER_ID }),\n      });\n      if (!res.ok) throw new Error('Token fetch failed: ' + res.status);\n      const { token } = await res.json();\n\n      const c = StreamChat.getInstance(API_KEY);\n      await c.connectUser({ id: USER_ID, name: 'Daft User' }, token);\n      setClient(c);\n    })();\n    return () => client?.disconnectUser();\n  }, []);\n\n  if (!client) return <div className=\"loading\">Loading chatâ€¦</div>;\n\n  const filters = { type: 'messaging' };\n  const options = { state: true, watch: true };\n\n  return (\n    <div className=\"app-container\">\n      <header className=\"app-header\">\n        <h1>Daft Chat</h1>\n        <button\n          className=\"theme-toggle\"\n          onClick={() =>\n            setTheme(t => (t.includes('dark') ? 'messaging light' : 'messaging dark'))\n          }\n        >\n          {theme.includes('dark') ? 'Light Mode' : 'Dark Mode'}\n        </button>\n      </header>\n\n      <Chat client={client} theme={theme}>\n        <div className=\"main-layout\">\n          <aside className=\"channel-list\">\n            <ChannelList\n              filters={filters}\n              options={options}\n              onChannelSelect={channel => setActiveChannel(channel)}\n            />\n          </aside>\n\n          <section className=\"chat-panel\">\n            {activeChannel ? (\n              <Channel channel={activeChannel}>\n                <Window>\n                  <ChannelHeader />\n                  <MessageList />\n                  <MessageInput />\n                </Window>\n                <Thread />\n              </Channel>\n            ) : (\n              <div className=\"no-channel\">Select a channel to start</div>\n            )}\n          </section>\n        </div>\n      </Chat>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}