{"ast":null,"code":"import _objectSpread from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport React, { useContext } from 'react';\nexport const TypingContext = React.createContext(undefined);\nexport const TypingProvider = _ref => {\n  let {\n    children,\n    value\n  } = _ref;\n  return React.createElement(TypingContext.Provider, {\n    value: value\n  }, children);\n};\nexport const useTypingContext = componentName => {\n  const contextValue = useContext(TypingContext);\n  if (!contextValue) {\n    console.warn(\"The useTypingContext hook was called outside of the TypingContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the \".concat(componentName, \" component.\"));\n    return {};\n  }\n  return contextValue;\n};\n/**\n * Typescript currently does not support partial inference, so if TypingContext\n * typing is desired while using the HOC withTypingContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withTypingContext = Component => {\n  const WithTypingContextComponent = props => {\n    const typingContext = useTypingContext();\n    return React.createElement(Component, _objectSpread(_objectSpread({}, props), typingContext));\n  };\n  WithTypingContextComponent.displayName = (Component.displayName || Component.name || 'Component').replace('Base', '');\n  return WithTypingContextComponent;\n};","map":{"version":3,"names":["React","useContext","TypingContext","createContext","undefined","TypingProvider","_ref","children","value","createElement","Provider","useTypingContext","componentName","contextValue","console","warn","concat","withTypingContext","Component","WithTypingContextComponent","props","typingContext","_objectSpread","displayName","name","replace"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/context/TypingContext.js"],"sourcesContent":["import React, { useContext } from 'react';\nexport const TypingContext = React.createContext(undefined);\nexport const TypingProvider = ({ children, value, }) => (React.createElement(TypingContext.Provider, { value: value }, children));\nexport const useTypingContext = (componentName) => {\n    const contextValue = useContext(TypingContext);\n    if (!contextValue) {\n        console.warn(`The useTypingContext hook was called outside of the TypingContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ${componentName} component.`);\n        return {};\n    }\n    return contextValue;\n};\n/**\n * Typescript currently does not support partial inference, so if TypingContext\n * typing is desired while using the HOC withTypingContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withTypingContext = (Component) => {\n    const WithTypingContextComponent = (props) => {\n        const typingContext = useTypingContext();\n        return React.createElement(Component, { ...props, ...typingContext });\n    };\n    WithTypingContextComponent.displayName = (Component.displayName ||\n        Component.name ||\n        'Component').replace('Base', '');\n    return WithTypingContextComponent;\n};\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAO,MAAMC,aAAa,GAAGF,KAAK,CAACG,aAAa,CAACC,SAAS,CAAC;AAC3D,OAAO,MAAMC,cAAc,GAAGC,IAAA;EAAA,IAAC;IAAEC,QAAQ;IAAEC;EAAO,CAAC,GAAAF,IAAA;EAAA,OAAMN,KAAK,CAACS,aAAa,CAACP,aAAa,CAACQ,QAAQ,EAAE;IAAEF,KAAK,EAAEA;EAAM,CAAC,EAAED,QAAQ,CAAC;AAAA,CAAC;AACjI,OAAO,MAAMI,gBAAgB,GAAIC,aAAa,IAAK;EAC/C,MAAMC,YAAY,GAAGZ,UAAU,CAACC,aAAa,CAAC;EAC9C,IAAI,CAACW,YAAY,EAAE;IACfC,OAAO,CAACC,IAAI,0LAAAC,MAAA,CAA0LJ,aAAa,gBAAa,CAAC;IACjO,OAAO,CAAC,CAAC;EACb;EACA,OAAOC,YAAY;AACvB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,iBAAiB,GAAIC,SAAS,IAAK;EAC5C,MAAMC,0BAA0B,GAAIC,KAAK,IAAK;IAC1C,MAAMC,aAAa,GAAGV,gBAAgB,CAAC,CAAC;IACxC,OAAOX,KAAK,CAACS,aAAa,CAACS,SAAS,EAAAI,aAAA,CAAAA,aAAA,KAAOF,KAAK,GAAKC,aAAa,CAAE,CAAC;EACzE,CAAC;EACDF,0BAA0B,CAACI,WAAW,GAAG,CAACL,SAAS,CAACK,WAAW,IAC3DL,SAAS,CAACM,IAAI,IACd,WAAW,EAAEC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EACpC,OAAON,0BAA0B;AACrC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}