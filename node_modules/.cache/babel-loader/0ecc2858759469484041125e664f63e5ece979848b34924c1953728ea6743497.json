{"ast":null,"code":"import { useCallback } from 'react';\nimport { MessageComposer } from 'stream-chat';\nimport { useMessageComposer } from './useMessageComposer';\nimport { useChannelActionContext } from '../../../context/ChannelActionContext';\nimport { useTranslationContext } from '../../../context/TranslationContext';\nconst takeStateSnapshot = messageComposer => {\n  const textComposerState = messageComposer.textComposer.state.getLatestValue();\n  const attachmentManagerState = messageComposer.attachmentManager.state.getLatestValue();\n  const linkPreviewsManagerState = messageComposer.linkPreviewsManager.state.getLatestValue();\n  const pollComposerState = messageComposer.pollComposer.state.getLatestValue();\n  const customDataManagerState = messageComposer.customDataManager.state.getLatestValue();\n  const state = messageComposer.state.getLatestValue();\n  return () => {\n    messageComposer.state.next(state);\n    messageComposer.textComposer.state.next(textComposerState);\n    messageComposer.attachmentManager.state.next(attachmentManagerState);\n    messageComposer.linkPreviewsManager.state.next(linkPreviewsManagerState);\n    messageComposer.pollComposer.state.next(pollComposerState);\n    messageComposer.customDataManager.state.next(customDataManagerState);\n  };\n};\nexport const useSubmitHandler = props => {\n  const {\n    clearEditingState,\n    overrideSubmitHandler\n  } = props;\n  const {\n    addNotification,\n    editMessage,\n    sendMessage\n  } = useChannelActionContext('useSubmitHandler');\n  const {\n    t\n  } = useTranslationContext('useSubmitHandler');\n  const messageComposer = useMessageComposer();\n  const handleSubmit = useCallback(async event => {\n    event === null || event === void 0 || event.preventDefault();\n    const composition = await messageComposer.compose();\n    if (!composition || !composition.message) return;\n    const {\n      localMessage,\n      message,\n      sendOptions\n    } = composition;\n    if (messageComposer.editedMessage && localMessage.type !== 'error') {\n      try {\n        await editMessage(localMessage, sendOptions);\n        clearEditingState === null || clearEditingState === void 0 || clearEditingState();\n      } catch (err) {\n        addNotification(t('Edit message request failed'), 'error');\n      }\n    } else {\n      const restoreComposerStateSnapshot = takeStateSnapshot(messageComposer);\n      try {\n        // FIXME: once MessageComposer has sendMessage method, then the following condition should be encapsulated by it\n        // keep attachments, text, quoted message (treat them as draft) ... if sending a poll\n        const sentPollMessage = !!message.poll_id;\n        if (sentPollMessage) {\n          messageComposer.state.partialNext({\n            id: MessageComposer.generateId(),\n            pollId: null\n          });\n        } else {\n          messageComposer.clear();\n        }\n        // todo: get rid of overrideSubmitHandler once MessageComposer supports submission flow\n        if (overrideSubmitHandler) {\n          await overrideSubmitHandler({\n            cid: messageComposer.channel.cid,\n            localMessage,\n            message,\n            sendOptions\n          });\n        } else {\n          await sendMessage({\n            localMessage,\n            message,\n            options: sendOptions\n          });\n        }\n        if (messageComposer.config.text.publishTypingEvents) await messageComposer.channel.stopTyping();\n      } catch (err) {\n        restoreComposerStateSnapshot();\n        addNotification(t('Send message request failed'), 'error');\n      }\n    }\n  }, [addNotification, clearEditingState, editMessage, messageComposer, overrideSubmitHandler, sendMessage, t]);\n  return {\n    handleSubmit\n  };\n};","map":{"version":3,"names":["useCallback","MessageComposer","useMessageComposer","useChannelActionContext","useTranslationContext","takeStateSnapshot","messageComposer","textComposerState","textComposer","state","getLatestValue","attachmentManagerState","attachmentManager","linkPreviewsManagerState","linkPreviewsManager","pollComposerState","pollComposer","customDataManagerState","customDataManager","next","useSubmitHandler","props","clearEditingState","overrideSubmitHandler","addNotification","editMessage","sendMessage","t","handleSubmit","event","preventDefault","composition","compose","message","localMessage","sendOptions","editedMessage","type","err","restoreComposerStateSnapshot","sentPollMessage","poll_id","partialNext","id","generateId","pollId","clear","cid","channel","options","config","text","publishTypingEvents","stopTyping"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/MessageInput/hooks/useSubmitHandler.js"],"sourcesContent":["import { useCallback } from 'react';\nimport { MessageComposer } from 'stream-chat';\nimport { useMessageComposer } from './useMessageComposer';\nimport { useChannelActionContext } from '../../../context/ChannelActionContext';\nimport { useTranslationContext } from '../../../context/TranslationContext';\nconst takeStateSnapshot = (messageComposer) => {\n    const textComposerState = messageComposer.textComposer.state.getLatestValue();\n    const attachmentManagerState = messageComposer.attachmentManager.state.getLatestValue();\n    const linkPreviewsManagerState = messageComposer.linkPreviewsManager.state.getLatestValue();\n    const pollComposerState = messageComposer.pollComposer.state.getLatestValue();\n    const customDataManagerState = messageComposer.customDataManager.state.getLatestValue();\n    const state = messageComposer.state.getLatestValue();\n    return () => {\n        messageComposer.state.next(state);\n        messageComposer.textComposer.state.next(textComposerState);\n        messageComposer.attachmentManager.state.next(attachmentManagerState);\n        messageComposer.linkPreviewsManager.state.next(linkPreviewsManagerState);\n        messageComposer.pollComposer.state.next(pollComposerState);\n        messageComposer.customDataManager.state.next(customDataManagerState);\n    };\n};\nexport const useSubmitHandler = (props) => {\n    const { clearEditingState, overrideSubmitHandler } = props;\n    const { addNotification, editMessage, sendMessage } = useChannelActionContext('useSubmitHandler');\n    const { t } = useTranslationContext('useSubmitHandler');\n    const messageComposer = useMessageComposer();\n    const handleSubmit = useCallback(async (event) => {\n        event?.preventDefault();\n        const composition = await messageComposer.compose();\n        if (!composition || !composition.message)\n            return;\n        const { localMessage, message, sendOptions } = composition;\n        if (messageComposer.editedMessage && localMessage.type !== 'error') {\n            try {\n                await editMessage(localMessage, sendOptions);\n                clearEditingState?.();\n            }\n            catch (err) {\n                addNotification(t('Edit message request failed'), 'error');\n            }\n        }\n        else {\n            const restoreComposerStateSnapshot = takeStateSnapshot(messageComposer);\n            try {\n                // FIXME: once MessageComposer has sendMessage method, then the following condition should be encapsulated by it\n                // keep attachments, text, quoted message (treat them as draft) ... if sending a poll\n                const sentPollMessage = !!message.poll_id;\n                if (sentPollMessage) {\n                    messageComposer.state.partialNext({\n                        id: MessageComposer.generateId(),\n                        pollId: null,\n                    });\n                }\n                else {\n                    messageComposer.clear();\n                }\n                // todo: get rid of overrideSubmitHandler once MessageComposer supports submission flow\n                if (overrideSubmitHandler) {\n                    await overrideSubmitHandler({\n                        cid: messageComposer.channel.cid,\n                        localMessage,\n                        message,\n                        sendOptions,\n                    });\n                }\n                else {\n                    await sendMessage({ localMessage, message, options: sendOptions });\n                }\n                if (messageComposer.config.text.publishTypingEvents)\n                    await messageComposer.channel.stopTyping();\n            }\n            catch (err) {\n                restoreComposerStateSnapshot();\n                addNotification(t('Send message request failed'), 'error');\n            }\n        }\n    }, [\n        addNotification,\n        clearEditingState,\n        editMessage,\n        messageComposer,\n        overrideSubmitHandler,\n        sendMessage,\n        t,\n    ]);\n    return { handleSubmit };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}