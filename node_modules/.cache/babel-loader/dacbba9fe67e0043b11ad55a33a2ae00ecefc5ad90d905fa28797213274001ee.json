{"ast":null,"code":"import { useEffect, useState } from 'react';\nexport const AIStates = {\n  Error: 'AI_STATE_ERROR',\n  ExternalSources: 'AI_STATE_EXTERNAL_SOURCES',\n  Generating: 'AI_STATE_GENERATING',\n  Idle: 'AI_STATE_IDLE',\n  Thinking: 'AI_STATE_THINKING'\n};\n/**\n * A hook that returns the current state of the AI.\n * @param {Channel} channel - The channel for which we want to know the AI state.\n * @returns {{ aiState: AIState }} The current AI state for the given channel.\n */\nexport const useAIState = channel => {\n  const [aiState, setAiState] = useState(AIStates.Idle);\n  useEffect(() => {\n    if (!channel) {\n      return;\n    }\n    const indicatorChangedListener = channel.on('ai_indicator.update', event => {\n      const {\n        cid\n      } = event;\n      const state = event.ai_state;\n      if (channel.cid === cid) {\n        setAiState(state);\n      }\n    });\n    const indicatorClearedListener = channel.on('ai_indicator.clear', event => {\n      const {\n        cid\n      } = event;\n      if (channel.cid === cid) {\n        setAiState(AIStates.Idle);\n      }\n    });\n    return () => {\n      indicatorChangedListener.unsubscribe();\n      indicatorClearedListener.unsubscribe();\n    };\n  }, [channel]);\n  return {\n    aiState\n  };\n};","map":{"version":3,"names":["useEffect","useState","AIStates","Error","ExternalSources","Generating","Idle","Thinking","useAIState","channel","aiState","setAiState","indicatorChangedListener","on","event","cid","state","ai_state","indicatorClearedListener","unsubscribe"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/AIStateIndicator/hooks/useAIState.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nexport const AIStates = {\n    Error: 'AI_STATE_ERROR',\n    ExternalSources: 'AI_STATE_EXTERNAL_SOURCES',\n    Generating: 'AI_STATE_GENERATING',\n    Idle: 'AI_STATE_IDLE',\n    Thinking: 'AI_STATE_THINKING',\n};\n/**\n * A hook that returns the current state of the AI.\n * @param {Channel} channel - The channel for which we want to know the AI state.\n * @returns {{ aiState: AIState }} The current AI state for the given channel.\n */\nexport const useAIState = (channel) => {\n    const [aiState, setAiState] = useState(AIStates.Idle);\n    useEffect(() => {\n        if (!channel) {\n            return;\n        }\n        const indicatorChangedListener = channel.on('ai_indicator.update', (event) => {\n            const { cid } = event;\n            const state = event.ai_state;\n            if (channel.cid === cid) {\n                setAiState(state);\n            }\n        });\n        const indicatorClearedListener = channel.on('ai_indicator.clear', (event) => {\n            const { cid } = event;\n            if (channel.cid === cid) {\n                setAiState(AIStates.Idle);\n            }\n        });\n        return () => {\n            indicatorChangedListener.unsubscribe();\n            indicatorClearedListener.unsubscribe();\n        };\n    }, [channel]);\n    return { aiState };\n};\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAO,MAAMC,QAAQ,GAAG;EACpBC,KAAK,EAAE,gBAAgB;EACvBC,eAAe,EAAE,2BAA2B;EAC5CC,UAAU,EAAE,qBAAqB;EACjCC,IAAI,EAAE,eAAe;EACrBC,QAAQ,EAAE;AACd,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAIC,OAAO,IAAK;EACnC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAACC,QAAQ,CAACI,IAAI,CAAC;EACrDN,SAAS,CAAC,MAAM;IACZ,IAAI,CAACS,OAAO,EAAE;MACV;IACJ;IACA,MAAMG,wBAAwB,GAAGH,OAAO,CAACI,EAAE,CAAC,qBAAqB,EAAGC,KAAK,IAAK;MAC1E,MAAM;QAAEC;MAAI,CAAC,GAAGD,KAAK;MACrB,MAAME,KAAK,GAAGF,KAAK,CAACG,QAAQ;MAC5B,IAAIR,OAAO,CAACM,GAAG,KAAKA,GAAG,EAAE;QACrBJ,UAAU,CAACK,KAAK,CAAC;MACrB;IACJ,CAAC,CAAC;IACF,MAAME,wBAAwB,GAAGT,OAAO,CAACI,EAAE,CAAC,oBAAoB,EAAGC,KAAK,IAAK;MACzE,MAAM;QAAEC;MAAI,CAAC,GAAGD,KAAK;MACrB,IAAIL,OAAO,CAACM,GAAG,KAAKA,GAAG,EAAE;QACrBJ,UAAU,CAACT,QAAQ,CAACI,IAAI,CAAC;MAC7B;IACJ,CAAC,CAAC;IACF,OAAO,MAAM;MACTM,wBAAwB,CAACO,WAAW,CAAC,CAAC;MACtCD,wBAAwB,CAACC,WAAW,CAAC,CAAC;IAC1C,CAAC;EACL,CAAC,EAAE,CAACV,OAAO,CAAC,CAAC;EACb,OAAO;IAAEC;EAAQ,CAAC;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}