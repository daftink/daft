{"ast":null,"code":"import React from 'react';\nimport { FormDialog } from '../../Dialog/FormDialog';\nimport { useChatContext, usePollContext, useTranslationContext } from '../../../context';\nimport { useStateStore } from '../../../store';\nconst pollStateSelector = nextValue => ({\n  options: nextValue.options\n});\nexport const SuggestPollOptionForm = _ref => {\n  let {\n    close,\n    messageId\n  } = _ref;\n  const {\n    client\n  } = useChatContext('SuggestPollOptionForm');\n  const {\n    t\n  } = useTranslationContext('SuggestPollOptionForm');\n  const {\n    poll\n  } = usePollContext();\n  const {\n    options\n  } = useStateStore(poll.state, pollStateSelector);\n  return React.createElement(FormDialog, {\n    className: 'str-chat__prompt-dialog str-chat__modal__suggest-poll-option',\n    close: close,\n    fields: {\n      optionText: {\n        element: 'input',\n        props: {\n          id: 'optionText',\n          name: 'optionText',\n          required: true,\n          type: 'text',\n          value: ''\n        },\n        validator: value => {\n          if (!value) return;\n          const existingOption = options.find(option => option.text === value.trim());\n          if (existingOption) {\n            return new Error(t('Option already exists'));\n          }\n          return;\n        }\n      }\n    },\n    onSubmit: async value => {\n      const {\n        poll_option\n      } = await client.createPollOption(poll.id, {\n        text: value.optionText\n      });\n      poll.castVote(poll_option.id, messageId);\n    },\n    shouldDisableSubmitButton: value => !value.optionText,\n    title: t('Suggest an option')\n  });\n};","map":{"version":3,"names":["React","FormDialog","useChatContext","usePollContext","useTranslationContext","useStateStore","pollStateSelector","nextValue","options","SuggestPollOptionForm","_ref","close","messageId","client","t","poll","state","createElement","className","fields","optionText","element","props","id","name","required","type","value","validator","existingOption","find","option","text","trim","Error","onSubmit","poll_option","createPollOption","castVote","shouldDisableSubmitButton","title"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/Poll/PollActions/SuggestPollOptionForm.js"],"sourcesContent":["import React from 'react';\nimport { FormDialog } from '../../Dialog/FormDialog';\nimport { useChatContext, usePollContext, useTranslationContext } from '../../../context';\nimport { useStateStore } from '../../../store';\nconst pollStateSelector = (nextValue) => ({\n    options: nextValue.options,\n});\nexport const SuggestPollOptionForm = ({ close, messageId, }) => {\n    const { client } = useChatContext('SuggestPollOptionForm');\n    const { t } = useTranslationContext('SuggestPollOptionForm');\n    const { poll } = usePollContext();\n    const { options } = useStateStore(poll.state, pollStateSelector);\n    return (React.createElement(FormDialog, { className: 'str-chat__prompt-dialog str-chat__modal__suggest-poll-option', close: close, fields: {\n            optionText: {\n                element: 'input',\n                props: {\n                    id: 'optionText',\n                    name: 'optionText',\n                    required: true,\n                    type: 'text',\n                    value: '',\n                },\n                validator: (value) => {\n                    if (!value)\n                        return;\n                    const existingOption = options.find((option) => option.text === value.trim());\n                    if (existingOption) {\n                        return new Error(t('Option already exists'));\n                    }\n                    return;\n                },\n            },\n        }, onSubmit: async (value) => {\n            const { poll_option } = await client.createPollOption(poll.id, {\n                text: value.optionText,\n            });\n            poll.castVote(poll_option.id, messageId);\n        }, shouldDisableSubmitButton: (value) => !value.optionText, title: t('Suggest an option') }));\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,yBAAyB;AACpD,SAASC,cAAc,EAAEC,cAAc,EAAEC,qBAAqB,QAAQ,kBAAkB;AACxF,SAASC,aAAa,QAAQ,gBAAgB;AAC9C,MAAMC,iBAAiB,GAAIC,SAAS,KAAM;EACtCC,OAAO,EAAED,SAAS,CAACC;AACvB,CAAC,CAAC;AACF,OAAO,MAAMC,qBAAqB,GAAGC,IAAA,IAA2B;EAAA,IAA1B;IAAEC,KAAK;IAAEC;EAAW,CAAC,GAAAF,IAAA;EACvD,MAAM;IAAEG;EAAO,CAAC,GAAGX,cAAc,CAAC,uBAAuB,CAAC;EAC1D,MAAM;IAAEY;EAAE,CAAC,GAAGV,qBAAqB,CAAC,uBAAuB,CAAC;EAC5D,MAAM;IAAEW;EAAK,CAAC,GAAGZ,cAAc,CAAC,CAAC;EACjC,MAAM;IAAEK;EAAQ,CAAC,GAAGH,aAAa,CAACU,IAAI,CAACC,KAAK,EAAEV,iBAAiB,CAAC;EAChE,OAAQN,KAAK,CAACiB,aAAa,CAAChB,UAAU,EAAE;IAAEiB,SAAS,EAAE,8DAA8D;IAAEP,KAAK,EAAEA,KAAK;IAAEQ,MAAM,EAAE;MACnIC,UAAU,EAAE;QACRC,OAAO,EAAE,OAAO;QAChBC,KAAK,EAAE;UACHC,EAAE,EAAE,YAAY;UAChBC,IAAI,EAAE,YAAY;UAClBC,QAAQ,EAAE,IAAI;UACdC,IAAI,EAAE,MAAM;UACZC,KAAK,EAAE;QACX,CAAC;QACDC,SAAS,EAAGD,KAAK,IAAK;UAClB,IAAI,CAACA,KAAK,EACN;UACJ,MAAME,cAAc,GAAGrB,OAAO,CAACsB,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACC,IAAI,KAAKL,KAAK,CAACM,IAAI,CAAC,CAAC,CAAC;UAC7E,IAAIJ,cAAc,EAAE;YAChB,OAAO,IAAIK,KAAK,CAACpB,CAAC,CAAC,uBAAuB,CAAC,CAAC;UAChD;UACA;QACJ;MACJ;IACJ,CAAC;IAAEqB,QAAQ,EAAE,MAAOR,KAAK,IAAK;MAC1B,MAAM;QAAES;MAAY,CAAC,GAAG,MAAMvB,MAAM,CAACwB,gBAAgB,CAACtB,IAAI,CAACQ,EAAE,EAAE;QAC3DS,IAAI,EAAEL,KAAK,CAACP;MAChB,CAAC,CAAC;MACFL,IAAI,CAACuB,QAAQ,CAACF,WAAW,CAACb,EAAE,EAAEX,SAAS,CAAC;IAC5C,CAAC;IAAE2B,yBAAyB,EAAGZ,KAAK,IAAK,CAACA,KAAK,CAACP,UAAU;IAAEoB,KAAK,EAAE1B,CAAC,CAAC,mBAAmB;EAAE,CAAC,CAAC;AACpG,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}