{"ast":null,"code":"import { useCallback, useMemo } from 'react';\nimport { useComponentContext, useMessageContext } from '../../../context';\nimport { defaultReactionOptions } from '../reactionOptions';\nexport const defaultReactionsSort = (a, b) => {\n  if (a.firstReactionAt && b.firstReactionAt) {\n    return +a.firstReactionAt - +b.firstReactionAt;\n  }\n  return a.reactionType.localeCompare(b.reactionType, 'en');\n};\nexport const useProcessReactions = params => {\n  var _ref;\n  const {\n    own_reactions: propOwnReactions,\n    reaction_groups: propReactionGroups,\n    reactionOptions: propReactionOptions,\n    reactions: propReactions,\n    sortReactions: propSortReactions\n  } = params;\n  const {\n    message,\n    sortReactions: contextSortReactions\n  } = useMessageContext('useProcessReactions');\n  const {\n    reactionOptions: contextReactionOptions = defaultReactionOptions\n  } = useComponentContext('useProcessReactions');\n  const reactionOptions = propReactionOptions !== null && propReactionOptions !== void 0 ? propReactionOptions : contextReactionOptions;\n  const sortReactions = (_ref = propSortReactions !== null && propSortReactions !== void 0 ? propSortReactions : contextSortReactions) !== null && _ref !== void 0 ? _ref : defaultReactionsSort;\n  const latestReactions = propReactions || message.latest_reactions;\n  const ownReactions = propOwnReactions || (message === null || message === void 0 ? void 0 : message.own_reactions);\n  const reactionGroups = propReactionGroups || (message === null || message === void 0 ? void 0 : message.reaction_groups);\n  const isOwnReaction = useCallback(reactionType => {\n    var _ownReactions$some;\n    return (_ownReactions$some = ownReactions === null || ownReactions === void 0 ? void 0 : ownReactions.some(reaction => reaction.type === reactionType)) !== null && _ownReactions$some !== void 0 ? _ownReactions$some : false;\n  }, [ownReactions]);\n  const getEmojiByReactionType = useCallback(reactionType => {\n    var _reactionOptions$find, _reactionOptions$find2;\n    return (_reactionOptions$find = (_reactionOptions$find2 = reactionOptions.find(_ref2 => {\n      let {\n        type\n      } = _ref2;\n      return type === reactionType;\n    })) === null || _reactionOptions$find2 === void 0 ? void 0 : _reactionOptions$find2.Component) !== null && _reactionOptions$find !== void 0 ? _reactionOptions$find : null;\n  }, [reactionOptions]);\n  const isSupportedReaction = useCallback(reactionType => reactionOptions.some(reactionOption => reactionOption.type === reactionType), [reactionOptions]);\n  const getLatestReactedUserNames = useCallback(reactionType => {\n    var _latestReactions$flat;\n    return (_latestReactions$flat = latestReactions === null || latestReactions === void 0 ? void 0 : latestReactions.flatMap(reaction => {\n      if (reactionType && reactionType === reaction.type) {\n        var _reaction$user, _reaction$user2;\n        const username = ((_reaction$user = reaction.user) === null || _reaction$user === void 0 ? void 0 : _reaction$user.name) || ((_reaction$user2 = reaction.user) === null || _reaction$user2 === void 0 ? void 0 : _reaction$user2.id);\n        return username ? [username] : [];\n      }\n      return [];\n    })) !== null && _latestReactions$flat !== void 0 ? _latestReactions$flat : [];\n  }, [latestReactions]);\n  const existingReactions = useMemo(() => {\n    if (!reactionGroups) {\n      return [];\n    }\n    const unsortedReactions = Object.entries(reactionGroups).flatMap(_ref3 => {\n      let [reactionType, {\n        count,\n        first_reaction_at,\n        last_reaction_at\n      }] = _ref3;\n      if (count === 0 || !isSupportedReaction(reactionType)) {\n        return [];\n      }\n      const latestReactedUserNames = getLatestReactedUserNames(reactionType);\n      return [{\n        EmojiComponent: getEmojiByReactionType(reactionType),\n        firstReactionAt: first_reaction_at ? new Date(first_reaction_at) : null,\n        isOwnReaction: isOwnReaction(reactionType),\n        lastReactionAt: last_reaction_at ? new Date(last_reaction_at) : null,\n        latestReactedUserNames,\n        reactionCount: count,\n        reactionType,\n        unlistedReactedUserCount: count - latestReactedUserNames.length\n      }];\n    });\n    return unsortedReactions.sort(sortReactions);\n  }, [getEmojiByReactionType, getLatestReactedUserNames, isOwnReaction, isSupportedReaction, reactionGroups, sortReactions]);\n  const hasReactions = existingReactions.length > 0;\n  const totalReactionCount = useMemo(() => existingReactions.reduce((total, _ref4) => {\n    let {\n      reactionCount\n    } = _ref4;\n    return total + reactionCount;\n  }, 0), [existingReactions]);\n  return {\n    existingReactions,\n    hasReactions,\n    totalReactionCount\n  };\n};","map":{"version":3,"names":["useCallback","useMemo","useComponentContext","useMessageContext","defaultReactionOptions","defaultReactionsSort","a","b","firstReactionAt","reactionType","localeCompare","useProcessReactions","params","_ref","own_reactions","propOwnReactions","reaction_groups","propReactionGroups","reactionOptions","propReactionOptions","reactions","propReactions","sortReactions","propSortReactions","message","contextSortReactions","contextReactionOptions","latestReactions","latest_reactions","ownReactions","reactionGroups","isOwnReaction","_ownReactions$some","some","reaction","type","getEmojiByReactionType","_reactionOptions$find","_reactionOptions$find2","find","_ref2","Component","isSupportedReaction","reactionOption","getLatestReactedUserNames","_latestReactions$flat","flatMap","_reaction$user","_reaction$user2","username","user","name","id","existingReactions","unsortedReactions","Object","entries","_ref3","count","first_reaction_at","last_reaction_at","latestReactedUserNames","EmojiComponent","Date","lastReactionAt","reactionCount","unlistedReactedUserCount","length","sort","hasReactions","totalReactionCount","reduce","total","_ref4"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/Reactions/hooks/useProcessReactions.js"],"sourcesContent":["import { useCallback, useMemo } from 'react';\nimport { useComponentContext, useMessageContext } from '../../../context';\nimport { defaultReactionOptions } from '../reactionOptions';\nexport const defaultReactionsSort = (a, b) => {\n    if (a.firstReactionAt && b.firstReactionAt) {\n        return +a.firstReactionAt - +b.firstReactionAt;\n    }\n    return a.reactionType.localeCompare(b.reactionType, 'en');\n};\nexport const useProcessReactions = (params) => {\n    const { own_reactions: propOwnReactions, reaction_groups: propReactionGroups, reactionOptions: propReactionOptions, reactions: propReactions, sortReactions: propSortReactions, } = params;\n    const { message, sortReactions: contextSortReactions } = useMessageContext('useProcessReactions');\n    const { reactionOptions: contextReactionOptions = defaultReactionOptions } = useComponentContext('useProcessReactions');\n    const reactionOptions = propReactionOptions ?? contextReactionOptions;\n    const sortReactions = propSortReactions ?? contextSortReactions ?? defaultReactionsSort;\n    const latestReactions = propReactions || message.latest_reactions;\n    const ownReactions = propOwnReactions || message?.own_reactions;\n    const reactionGroups = propReactionGroups || message?.reaction_groups;\n    const isOwnReaction = useCallback((reactionType) => ownReactions?.some((reaction) => reaction.type === reactionType) ?? false, [ownReactions]);\n    const getEmojiByReactionType = useCallback((reactionType) => reactionOptions.find(({ type }) => type === reactionType)?.Component ?? null, [reactionOptions]);\n    const isSupportedReaction = useCallback((reactionType) => reactionOptions.some((reactionOption) => reactionOption.type === reactionType), [reactionOptions]);\n    const getLatestReactedUserNames = useCallback((reactionType) => latestReactions?.flatMap((reaction) => {\n        if (reactionType && reactionType === reaction.type) {\n            const username = reaction.user?.name || reaction.user?.id;\n            return username ? [username] : [];\n        }\n        return [];\n    }) ?? [], [latestReactions]);\n    const existingReactions = useMemo(() => {\n        if (!reactionGroups) {\n            return [];\n        }\n        const unsortedReactions = Object.entries(reactionGroups).flatMap(([reactionType, { count, first_reaction_at, last_reaction_at }]) => {\n            if (count === 0 || !isSupportedReaction(reactionType)) {\n                return [];\n            }\n            const latestReactedUserNames = getLatestReactedUserNames(reactionType);\n            return [\n                {\n                    EmojiComponent: getEmojiByReactionType(reactionType),\n                    firstReactionAt: first_reaction_at ? new Date(first_reaction_at) : null,\n                    isOwnReaction: isOwnReaction(reactionType),\n                    lastReactionAt: last_reaction_at ? new Date(last_reaction_at) : null,\n                    latestReactedUserNames,\n                    reactionCount: count,\n                    reactionType,\n                    unlistedReactedUserCount: count - latestReactedUserNames.length,\n                },\n            ];\n        });\n        return unsortedReactions.sort(sortReactions);\n    }, [\n        getEmojiByReactionType,\n        getLatestReactedUserNames,\n        isOwnReaction,\n        isSupportedReaction,\n        reactionGroups,\n        sortReactions,\n    ]);\n    const hasReactions = existingReactions.length > 0;\n    const totalReactionCount = useMemo(() => existingReactions.reduce((total, { reactionCount }) => total + reactionCount, 0), [existingReactions]);\n    return {\n        existingReactions,\n        hasReactions,\n        totalReactionCount,\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}