{"ast":null,"code":"import React, { useRef } from 'react';\nimport clsx from 'clsx';\nimport { ChannelPreviewActionButtons as DefaultChannelPreviewActionButtons } from './ChannelPreviewActionButtons';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { useComponentContext } from '../../context';\nconst UnMemoizedChannelPreviewMessenger = props => {\n  var _channel$state$messag;\n  const {\n    active,\n    Avatar = DefaultAvatar,\n    channel,\n    className: customClassName = '',\n    displayImage,\n    displayTitle,\n    groupChannelDisplayInfo,\n    latestMessagePreview,\n    onSelect: customOnSelectChannel,\n    setActiveChannel,\n    unread,\n    watchers\n  } = props;\n  const {\n    ChannelPreviewActionButtons = DefaultChannelPreviewActionButtons\n  } = useComponentContext();\n  const channelPreviewButton = useRef(null);\n  const avatarName = displayTitle || ((_channel$state$messag = channel.state.messages[channel.state.messages.length - 1]) === null || _channel$state$messag === void 0 || (_channel$state$messag = _channel$state$messag.user) === null || _channel$state$messag === void 0 ? void 0 : _channel$state$messag.id);\n  const onSelectChannel = e => {\n    if (customOnSelectChannel) {\n      customOnSelectChannel(e);\n    } else if (setActiveChannel) {\n      setActiveChannel(channel, watchers);\n    }\n    if (channelPreviewButton !== null && channelPreviewButton !== void 0 && channelPreviewButton.current) {\n      channelPreviewButton.current.blur();\n    }\n  };\n  return React.createElement(\"div\", {\n    className: 'str-chat__channel-preview-container'\n  }, React.createElement(ChannelPreviewActionButtons, {\n    channel: channel\n  }), React.createElement(\"button\", {\n    \"aria-label\": \"Select Channel: \".concat(displayTitle || ''),\n    \"aria-selected\": active,\n    className: clsx(\"str-chat__channel-preview-messenger str-chat__channel-preview\", active && 'str-chat__channel-preview-messenger--active', unread && unread >= 1 && 'str-chat__channel-preview-messenger--unread', customClassName),\n    \"data-testid\": 'channel-preview-button',\n    onClick: onSelectChannel,\n    ref: channelPreviewButton,\n    role: 'option'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__channel-preview-messenger--left'\n  }, React.createElement(Avatar, {\n    className: 'str-chat__avatar--channel-preview',\n    groupChannelDisplayInfo: groupChannelDisplayInfo,\n    image: displayImage,\n    name: avatarName\n  })), React.createElement(\"div\", {\n    className: 'str-chat__channel-preview-end'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__channel-preview-end-first-row'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__channel-preview-messenger--name'\n  }, React.createElement(\"span\", null, displayTitle)), !!unread && React.createElement(\"div\", {\n    className: 'str-chat__channel-preview-unread-badge',\n    \"data-testid\": 'unread-badge'\n  }, unread)), React.createElement(\"div\", {\n    className: 'str-chat__channel-preview-messenger--last-message'\n  }, latestMessagePreview))));\n};\n/**\n * Used as preview component for channel item in [ChannelList](#channellist) component.\n * Its best suited for messenger type chat.\n */\nexport const ChannelPreviewMessenger = React.memo(UnMemoizedChannelPreviewMessenger);","map":{"version":3,"names":["React","useRef","clsx","ChannelPreviewActionButtons","DefaultChannelPreviewActionButtons","Avatar","DefaultAvatar","useComponentContext","UnMemoizedChannelPreviewMessenger","props","_channel$state$messag","active","channel","className","customClassName","displayImage","displayTitle","groupChannelDisplayInfo","latestMessagePreview","onSelect","customOnSelectChannel","setActiveChannel","unread","watchers","channelPreviewButton","avatarName","state","messages","length","user","id","onSelectChannel","e","current","blur","createElement","concat","onClick","ref","role","image","name","ChannelPreviewMessenger","memo"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/ChannelPreview/ChannelPreviewMessenger.js"],"sourcesContent":["import React, { useRef } from 'react';\nimport clsx from 'clsx';\nimport { ChannelPreviewActionButtons as DefaultChannelPreviewActionButtons } from './ChannelPreviewActionButtons';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { useComponentContext } from '../../context';\nconst UnMemoizedChannelPreviewMessenger = (props) => {\n    const { active, Avatar = DefaultAvatar, channel, className: customClassName = '', displayImage, displayTitle, groupChannelDisplayInfo, latestMessagePreview, onSelect: customOnSelectChannel, setActiveChannel, unread, watchers, } = props;\n    const { ChannelPreviewActionButtons = DefaultChannelPreviewActionButtons } = useComponentContext();\n    const channelPreviewButton = useRef(null);\n    const avatarName = displayTitle || channel.state.messages[channel.state.messages.length - 1]?.user?.id;\n    const onSelectChannel = (e) => {\n        if (customOnSelectChannel) {\n            customOnSelectChannel(e);\n        }\n        else if (setActiveChannel) {\n            setActiveChannel(channel, watchers);\n        }\n        if (channelPreviewButton?.current) {\n            channelPreviewButton.current.blur();\n        }\n    };\n    return (React.createElement(\"div\", { className: 'str-chat__channel-preview-container' },\n        React.createElement(ChannelPreviewActionButtons, { channel: channel }),\n        React.createElement(\"button\", { \"aria-label\": `Select Channel: ${displayTitle || ''}`, \"aria-selected\": active, className: clsx(`str-chat__channel-preview-messenger str-chat__channel-preview`, active && 'str-chat__channel-preview-messenger--active', unread && unread >= 1 && 'str-chat__channel-preview-messenger--unread', customClassName), \"data-testid\": 'channel-preview-button', onClick: onSelectChannel, ref: channelPreviewButton, role: 'option' },\n            React.createElement(\"div\", { className: 'str-chat__channel-preview-messenger--left' },\n                React.createElement(Avatar, { className: 'str-chat__avatar--channel-preview', groupChannelDisplayInfo: groupChannelDisplayInfo, image: displayImage, name: avatarName })),\n            React.createElement(\"div\", { className: 'str-chat__channel-preview-end' },\n                React.createElement(\"div\", { className: 'str-chat__channel-preview-end-first-row' },\n                    React.createElement(\"div\", { className: 'str-chat__channel-preview-messenger--name' },\n                        React.createElement(\"span\", null, displayTitle)),\n                    !!unread && (React.createElement(\"div\", { className: 'str-chat__channel-preview-unread-badge', \"data-testid\": 'unread-badge' }, unread))),\n                React.createElement(\"div\", { className: 'str-chat__channel-preview-messenger--last-message' }, latestMessagePreview)))));\n};\n/**\n * Used as preview component for channel item in [ChannelList](#channellist) component.\n * Its best suited for messenger type chat.\n */\nexport const ChannelPreviewMessenger = React.memo(UnMemoizedChannelPreviewMessenger);\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AACrC,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,2BAA2B,IAAIC,kCAAkC,QAAQ,+BAA+B;AACjH,SAASC,MAAM,IAAIC,aAAa,QAAQ,WAAW;AACnD,SAASC,mBAAmB,QAAQ,eAAe;AACnD,MAAMC,iCAAiC,GAAIC,KAAK,IAAK;EAAA,IAAAC,qBAAA;EACjD,MAAM;IAAEC,MAAM;IAAEN,MAAM,GAAGC,aAAa;IAAEM,OAAO;IAAEC,SAAS,EAAEC,eAAe,GAAG,EAAE;IAAEC,YAAY;IAAEC,YAAY;IAAEC,uBAAuB;IAAEC,oBAAoB;IAAEC,QAAQ,EAAEC,qBAAqB;IAAEC,gBAAgB;IAAEC,MAAM;IAAEC;EAAU,CAAC,GAAGd,KAAK;EAC3O,MAAM;IAAEN,2BAA2B,GAAGC;EAAmC,CAAC,GAAGG,mBAAmB,CAAC,CAAC;EAClG,MAAMiB,oBAAoB,GAAGvB,MAAM,CAAC,IAAI,CAAC;EACzC,MAAMwB,UAAU,GAAGT,YAAY,MAAAN,qBAAA,GAAIE,OAAO,CAACc,KAAK,CAACC,QAAQ,CAACf,OAAO,CAACc,KAAK,CAACC,QAAQ,CAACC,MAAM,GAAG,CAAC,CAAC,cAAAlB,qBAAA,gBAAAA,qBAAA,GAAzDA,qBAAA,CAA2DmB,IAAI,cAAAnB,qBAAA,uBAA/DA,qBAAA,CAAiEoB,EAAE;EACtG,MAAMC,eAAe,GAAIC,CAAC,IAAK;IAC3B,IAAIZ,qBAAqB,EAAE;MACvBA,qBAAqB,CAACY,CAAC,CAAC;IAC5B,CAAC,MACI,IAAIX,gBAAgB,EAAE;MACvBA,gBAAgB,CAACT,OAAO,EAAEW,QAAQ,CAAC;IACvC;IACA,IAAIC,oBAAoB,aAApBA,oBAAoB,eAApBA,oBAAoB,CAAES,OAAO,EAAE;MAC/BT,oBAAoB,CAACS,OAAO,CAACC,IAAI,CAAC,CAAC;IACvC;EACJ,CAAC;EACD,OAAQlC,KAAK,CAACmC,aAAa,CAAC,KAAK,EAAE;IAAEtB,SAAS,EAAE;EAAsC,CAAC,EACnFb,KAAK,CAACmC,aAAa,CAAChC,2BAA2B,EAAE;IAAES,OAAO,EAAEA;EAAQ,CAAC,CAAC,EACtEZ,KAAK,CAACmC,aAAa,CAAC,QAAQ,EAAE;IAAE,YAAY,qBAAAC,MAAA,CAAqBpB,YAAY,IAAI,EAAE,CAAE;IAAE,eAAe,EAAEL,MAAM;IAAEE,SAAS,EAAEX,IAAI,kEAAkES,MAAM,IAAI,6CAA6C,EAAEW,MAAM,IAAIA,MAAM,IAAI,CAAC,IAAI,6CAA6C,EAAER,eAAe,CAAC;IAAE,aAAa,EAAE,wBAAwB;IAAEuB,OAAO,EAAEN,eAAe;IAAEO,GAAG,EAAEd,oBAAoB;IAAEe,IAAI,EAAE;EAAS,CAAC,EAC9bvC,KAAK,CAACmC,aAAa,CAAC,KAAK,EAAE;IAAEtB,SAAS,EAAE;EAA4C,CAAC,EACjFb,KAAK,CAACmC,aAAa,CAAC9B,MAAM,EAAE;IAAEQ,SAAS,EAAE,mCAAmC;IAAEI,uBAAuB,EAAEA,uBAAuB;IAAEuB,KAAK,EAAEzB,YAAY;IAAE0B,IAAI,EAAEhB;EAAW,CAAC,CAAC,CAAC,EAC7KzB,KAAK,CAACmC,aAAa,CAAC,KAAK,EAAE;IAAEtB,SAAS,EAAE;EAAgC,CAAC,EACrEb,KAAK,CAACmC,aAAa,CAAC,KAAK,EAAE;IAAEtB,SAAS,EAAE;EAA0C,CAAC,EAC/Eb,KAAK,CAACmC,aAAa,CAAC,KAAK,EAAE;IAAEtB,SAAS,EAAE;EAA4C,CAAC,EACjFb,KAAK,CAACmC,aAAa,CAAC,MAAM,EAAE,IAAI,EAAEnB,YAAY,CAAC,CAAC,EACpD,CAAC,CAACM,MAAM,IAAKtB,KAAK,CAACmC,aAAa,CAAC,KAAK,EAAE;IAAEtB,SAAS,EAAE,wCAAwC;IAAE,aAAa,EAAE;EAAe,CAAC,EAAES,MAAM,CAAE,CAAC,EAC7ItB,KAAK,CAACmC,aAAa,CAAC,KAAK,EAAE;IAAEtB,SAAS,EAAE;EAAoD,CAAC,EAAEK,oBAAoB,CAAC,CAAC,CAAC,CAAC;AACvI,CAAC;AACD;AACA;AACA;AACA;AACA,OAAO,MAAMwB,uBAAuB,GAAG1C,KAAK,CAAC2C,IAAI,CAACnC,iCAAiC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}