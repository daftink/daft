{"ast":null,"code":"import { useCallback } from 'react';\nimport { useMessageComposer } from './useMessageComposer';\nimport { dataTransferItemsToFiles } from '../../ReactFileUtilities';\nexport const usePasteHandler = () => {\n  const {\n    attachmentManager,\n    textComposer\n  } = useMessageComposer();\n  const onPaste = useCallback(clipboardEvent => {\n    (async event => {\n      const {\n        items\n      } = event.clipboardData;\n      event.preventDefault();\n      // Get a promise for the plain text in case no files are\n      // found. This needs to be done here because chrome cleans\n      // up the DataTransferItems after resolving of a promise.\n      let plainTextPromise = undefined;\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i];\n        if (item.kind === 'string' && item.type === 'text/plain') {\n          plainTextPromise = new Promise(resolve => {\n            item.getAsString(string => {\n              resolve(string);\n            });\n          });\n          break;\n        }\n      }\n      const fileLikes = await dataTransferItemsToFiles(Array.from(items));\n      if (plainTextPromise) {\n        const pastedText = await plainTextPromise;\n        textComposer.insertText({\n          text: pastedText\n        });\n      } else {\n        attachmentManager.uploadFiles(fileLikes);\n      }\n    })(clipboardEvent);\n  }, [attachmentManager, textComposer]);\n  return {\n    onPaste\n  };\n};","map":{"version":3,"names":["useCallback","useMessageComposer","dataTransferItemsToFiles","usePasteHandler","attachmentManager","textComposer","onPaste","clipboardEvent","event","items","clipboardData","preventDefault","plainTextPromise","undefined","i","length","item","kind","type","Promise","resolve","getAsString","string","fileLikes","Array","from","pastedText","insertText","text","uploadFiles"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/MessageInput/hooks/usePasteHandler.js"],"sourcesContent":["import { useCallback } from 'react';\nimport { useMessageComposer } from './useMessageComposer';\nimport { dataTransferItemsToFiles } from '../../ReactFileUtilities';\nexport const usePasteHandler = () => {\n    const { attachmentManager, textComposer } = useMessageComposer();\n    const onPaste = useCallback((clipboardEvent) => {\n        (async (event) => {\n            const { items } = event.clipboardData;\n            event.preventDefault();\n            // Get a promise for the plain text in case no files are\n            // found. This needs to be done here because chrome cleans\n            // up the DataTransferItems after resolving of a promise.\n            let plainTextPromise = undefined;\n            for (let i = 0; i < items.length; i++) {\n                const item = items[i];\n                if (item.kind === 'string' && item.type === 'text/plain') {\n                    plainTextPromise = new Promise((resolve) => {\n                        item.getAsString((string) => {\n                            resolve(string);\n                        });\n                    });\n                    break;\n                }\n            }\n            const fileLikes = await dataTransferItemsToFiles(Array.from(items));\n            if (plainTextPromise) {\n                const pastedText = await plainTextPromise;\n                textComposer.insertText({ text: pastedText });\n            }\n            else {\n                attachmentManager.uploadFiles(fileLikes);\n            }\n        })(clipboardEvent);\n    }, [attachmentManager, textComposer]);\n    return { onPaste };\n};\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,SAASC,wBAAwB,QAAQ,0BAA0B;AACnE,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACjC,MAAM;IAAEC,iBAAiB;IAAEC;EAAa,CAAC,GAAGJ,kBAAkB,CAAC,CAAC;EAChE,MAAMK,OAAO,GAAGN,WAAW,CAAEO,cAAc,IAAK;IAC5C,CAAC,MAAOC,KAAK,IAAK;MACd,MAAM;QAAEC;MAAM,CAAC,GAAGD,KAAK,CAACE,aAAa;MACrCF,KAAK,CAACG,cAAc,CAAC,CAAC;MACtB;MACA;MACA;MACA,IAAIC,gBAAgB,GAAGC,SAAS;MAChC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,KAAK,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;QACnC,MAAME,IAAI,GAAGP,KAAK,CAACK,CAAC,CAAC;QACrB,IAAIE,IAAI,CAACC,IAAI,KAAK,QAAQ,IAAID,IAAI,CAACE,IAAI,KAAK,YAAY,EAAE;UACtDN,gBAAgB,GAAG,IAAIO,OAAO,CAAEC,OAAO,IAAK;YACxCJ,IAAI,CAACK,WAAW,CAAEC,MAAM,IAAK;cACzBF,OAAO,CAACE,MAAM,CAAC;YACnB,CAAC,CAAC;UACN,CAAC,CAAC;UACF;QACJ;MACJ;MACA,MAAMC,SAAS,GAAG,MAAMrB,wBAAwB,CAACsB,KAAK,CAACC,IAAI,CAAChB,KAAK,CAAC,CAAC;MACnE,IAAIG,gBAAgB,EAAE;QAClB,MAAMc,UAAU,GAAG,MAAMd,gBAAgB;QACzCP,YAAY,CAACsB,UAAU,CAAC;UAAEC,IAAI,EAAEF;QAAW,CAAC,CAAC;MACjD,CAAC,MACI;QACDtB,iBAAiB,CAACyB,WAAW,CAACN,SAAS,CAAC;MAC5C;IACJ,CAAC,EAAEhB,cAAc,CAAC;EACtB,CAAC,EAAE,CAACH,iBAAiB,EAAEC,YAAY,CAAC,CAAC;EACrC,OAAO;IAAEC;EAAQ,CAAC;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}