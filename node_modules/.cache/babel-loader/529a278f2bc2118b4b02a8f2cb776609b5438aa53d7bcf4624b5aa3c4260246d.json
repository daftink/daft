{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { useChatContext } from '../../../context';\nexport var MessageDeliveryStatus;\n(function (MessageDeliveryStatus) {\n  MessageDeliveryStatus[\"DELIVERED\"] = \"delivered\";\n  MessageDeliveryStatus[\"READ\"] = \"read\";\n})(MessageDeliveryStatus || (MessageDeliveryStatus = {}));\nexport const useMessageDeliveryStatus = _ref => {\n  let {\n    channel,\n    lastMessage\n  } = _ref;\n  const {\n    client\n  } = useChatContext();\n  const [messageDeliveryStatus, setMessageDeliveryStatus] = useState();\n  const isOwnMessage = useCallback(message => {\n    var _message$user;\n    return client.user && (message === null || message === void 0 || (_message$user = message.user) === null || _message$user === void 0 ? void 0 : _message$user.id) === client.user.id;\n  }, [client]);\n  useEffect(() => {\n    const lastMessageIsOwn = isOwnMessage(lastMessage);\n    if (!(lastMessage !== null && lastMessage !== void 0 && lastMessage.created_at) || !lastMessageIsOwn) return;\n    const lastMessageCreatedAtDate = typeof lastMessage.created_at === 'string' ? new Date(lastMessage.created_at) : lastMessage.created_at;\n    const channelReadByOthersAfterLastMessageUpdate = Object.values(channel.state.read).some(_ref2 => {\n      let {\n        last_read: channelLastMarkedReadDate,\n        user\n      } = _ref2;\n      const ignoreOwnReadStatus = client.user && user.id !== client.user.id;\n      return ignoreOwnReadStatus && lastMessageCreatedAtDate < channelLastMarkedReadDate;\n    });\n    setMessageDeliveryStatus(channelReadByOthersAfterLastMessageUpdate ? MessageDeliveryStatus.READ : MessageDeliveryStatus.DELIVERED);\n  }, [channel.state.read, client, isOwnMessage, lastMessage]);\n  useEffect(() => {\n    const handleMessageNew = event => {\n      // the last message is not mine, so do not show the delivery status\n      if (!isOwnMessage(event.message)) {\n        return setMessageDeliveryStatus(undefined);\n      }\n      return setMessageDeliveryStatus(MessageDeliveryStatus.DELIVERED);\n    };\n    channel.on('message.new', handleMessageNew);\n    return () => {\n      channel.off('message.new', handleMessageNew);\n    };\n  }, [channel, client, isOwnMessage]);\n  useEffect(() => {\n    if (!isOwnMessage(lastMessage)) return;\n    const handleMarkRead = event => {\n      var _event$user, _client$user;\n      if (((_event$user = event.user) === null || _event$user === void 0 ? void 0 : _event$user.id) !== ((_client$user = client.user) === null || _client$user === void 0 ? void 0 : _client$user.id)) setMessageDeliveryStatus(MessageDeliveryStatus.READ);\n    };\n    channel.on('message.read', handleMarkRead);\n    return () => {\n      channel.off('message.read', handleMarkRead);\n    };\n  }, [channel, client, lastMessage, isOwnMessage]);\n  return {\n    messageDeliveryStatus\n  };\n};","map":{"version":3,"names":["useCallback","useEffect","useState","useChatContext","MessageDeliveryStatus","useMessageDeliveryStatus","_ref","channel","lastMessage","client","messageDeliveryStatus","setMessageDeliveryStatus","isOwnMessage","message","_message$user","user","id","lastMessageIsOwn","created_at","lastMessageCreatedAtDate","Date","channelReadByOthersAfterLastMessageUpdate","Object","values","state","read","some","_ref2","last_read","channelLastMarkedReadDate","ignoreOwnReadStatus","READ","DELIVERED","handleMessageNew","event","undefined","on","off","handleMarkRead","_event$user","_client$user"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/ChannelPreview/hooks/useMessageDeliveryStatus.js"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { useChatContext } from '../../../context';\nexport var MessageDeliveryStatus;\n(function (MessageDeliveryStatus) {\n    MessageDeliveryStatus[\"DELIVERED\"] = \"delivered\";\n    MessageDeliveryStatus[\"READ\"] = \"read\";\n})(MessageDeliveryStatus || (MessageDeliveryStatus = {}));\nexport const useMessageDeliveryStatus = ({ channel, lastMessage, }) => {\n    const { client } = useChatContext();\n    const [messageDeliveryStatus, setMessageDeliveryStatus] = useState();\n    const isOwnMessage = useCallback((message) => client.user && message?.user?.id === client.user.id, [client]);\n    useEffect(() => {\n        const lastMessageIsOwn = isOwnMessage(lastMessage);\n        if (!lastMessage?.created_at || !lastMessageIsOwn)\n            return;\n        const lastMessageCreatedAtDate = typeof lastMessage.created_at === 'string'\n            ? new Date(lastMessage.created_at)\n            : lastMessage.created_at;\n        const channelReadByOthersAfterLastMessageUpdate = Object.values(channel.state.read).some(({ last_read: channelLastMarkedReadDate, user }) => {\n            const ignoreOwnReadStatus = client.user && user.id !== client.user.id;\n            return ignoreOwnReadStatus && lastMessageCreatedAtDate < channelLastMarkedReadDate;\n        });\n        setMessageDeliveryStatus(channelReadByOthersAfterLastMessageUpdate\n            ? MessageDeliveryStatus.READ\n            : MessageDeliveryStatus.DELIVERED);\n    }, [channel.state.read, client, isOwnMessage, lastMessage]);\n    useEffect(() => {\n        const handleMessageNew = (event) => {\n            // the last message is not mine, so do not show the delivery status\n            if (!isOwnMessage(event.message)) {\n                return setMessageDeliveryStatus(undefined);\n            }\n            return setMessageDeliveryStatus(MessageDeliveryStatus.DELIVERED);\n        };\n        channel.on('message.new', handleMessageNew);\n        return () => {\n            channel.off('message.new', handleMessageNew);\n        };\n    }, [channel, client, isOwnMessage]);\n    useEffect(() => {\n        if (!isOwnMessage(lastMessage))\n            return;\n        const handleMarkRead = (event) => {\n            if (event.user?.id !== client.user?.id)\n                setMessageDeliveryStatus(MessageDeliveryStatus.READ);\n        };\n        channel.on('message.read', handleMarkRead);\n        return () => {\n            channel.off('message.read', handleMarkRead);\n        };\n    }, [channel, client, lastMessage, isOwnMessage]);\n    return {\n        messageDeliveryStatus,\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}