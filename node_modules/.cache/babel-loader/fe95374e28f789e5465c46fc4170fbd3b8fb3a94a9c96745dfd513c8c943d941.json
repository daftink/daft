{"ast":null,"code":"import { useLayoutEffect, useRef } from 'react';\nimport { useChatContext } from '../../../../context/ChatContext';\n// FIXME: change this generic name to something like useAdjustScrollPositionToListSize\nexport function useMessageListScrollManager(params) {\n  const {\n    loadMoreScrollThreshold,\n    onScrollBy,\n    scrollContainerMeasures,\n    scrolledUpThreshold,\n    scrollToBottom,\n    showNewMessages\n  } = params;\n  const {\n    client\n  } = useChatContext('useMessageListScrollManager');\n  const measures = useRef({\n    offsetHeight: 0,\n    scrollHeight: 0\n  });\n  const messages = useRef(undefined);\n  const scrollTop = useRef(0);\n  useLayoutEffect(() => {\n    const prevMeasures = measures.current;\n    const prevMessages = messages.current;\n    const newMessages = params.messages;\n    const lastNewMessage = newMessages[newMessages.length - 1] || {};\n    const lastPrevMessage = prevMessages === null || prevMessages === void 0 ? void 0 : prevMessages[prevMessages.length - 1];\n    const newMeasures = scrollContainerMeasures();\n    const wasAtBottom = prevMeasures.scrollHeight - prevMeasures.offsetHeight - scrollTop.current < scrolledUpThreshold;\n    if (typeof prevMessages !== 'undefined') {\n      if (prevMessages.length < newMessages.length) {\n        // messages added to the top\n        if ((lastPrevMessage === null || lastPrevMessage === void 0 ? void 0 : lastPrevMessage.id) === lastNewMessage.id) {\n          if (scrollTop.current < loadMoreScrollThreshold) {\n            const listHeightDelta = newMeasures.scrollHeight - prevMeasures.scrollHeight;\n            onScrollBy(listHeightDelta);\n          }\n        }\n        // messages added to the bottom\n        else {\n          var _lastNewMessage$user;\n          const lastMessageIsFromCurrentUser = ((_lastNewMessage$user = lastNewMessage.user) === null || _lastNewMessage$user === void 0 ? void 0 : _lastNewMessage$user.id) === client.userID;\n          if (lastMessageIsFromCurrentUser || wasAtBottom) {\n            scrollToBottom();\n          } else {\n            showNewMessages();\n          }\n        }\n      }\n      // message list length didn't change, but check if last message had reaction/reply update\n      else {\n        var _lastPrevMessage$late, _lastNewMessage$lates;\n        const hasNewReactions = (lastPrevMessage === null || lastPrevMessage === void 0 || (_lastPrevMessage$late = lastPrevMessage.latest_reactions) === null || _lastPrevMessage$late === void 0 ? void 0 : _lastPrevMessage$late.length) !== ((_lastNewMessage$lates = lastNewMessage.latest_reactions) === null || _lastNewMessage$lates === void 0 ? void 0 : _lastNewMessage$lates.length);\n        const hasNewReplies = (lastPrevMessage === null || lastPrevMessage === void 0 ? void 0 : lastPrevMessage.reply_count) !== lastNewMessage.reply_count;\n        if ((hasNewReactions || hasNewReplies) && wasAtBottom) {\n          scrollToBottom();\n        }\n      }\n    }\n    messages.current = newMessages;\n    measures.current = newMeasures;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [measures, messages, params.messages]);\n  return scrollTopValue => {\n    scrollTop.current = scrollTopValue;\n  };\n}","map":{"version":3,"names":["useLayoutEffect","useRef","useChatContext","useMessageListScrollManager","params","loadMoreScrollThreshold","onScrollBy","scrollContainerMeasures","scrolledUpThreshold","scrollToBottom","showNewMessages","client","measures","offsetHeight","scrollHeight","messages","undefined","scrollTop","prevMeasures","current","prevMessages","newMessages","lastNewMessage","length","lastPrevMessage","newMeasures","wasAtBottom","id","listHeightDelta","_lastNewMessage$user","lastMessageIsFromCurrentUser","user","userID","_lastPrevMessage$late","_lastNewMessage$lates","hasNewReactions","latest_reactions","hasNewReplies","reply_count","scrollTopValue"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useMessageListScrollManager.js"],"sourcesContent":["import { useLayoutEffect, useRef } from 'react';\nimport { useChatContext } from '../../../../context/ChatContext';\n// FIXME: change this generic name to something like useAdjustScrollPositionToListSize\nexport function useMessageListScrollManager(params) {\n    const { loadMoreScrollThreshold, onScrollBy, scrollContainerMeasures, scrolledUpThreshold, scrollToBottom, showNewMessages, } = params;\n    const { client } = useChatContext('useMessageListScrollManager');\n    const measures = useRef({\n        offsetHeight: 0,\n        scrollHeight: 0,\n    });\n    const messages = useRef(undefined);\n    const scrollTop = useRef(0);\n    useLayoutEffect(() => {\n        const prevMeasures = measures.current;\n        const prevMessages = messages.current;\n        const newMessages = params.messages;\n        const lastNewMessage = newMessages[newMessages.length - 1] || {};\n        const lastPrevMessage = prevMessages?.[prevMessages.length - 1];\n        const newMeasures = scrollContainerMeasures();\n        const wasAtBottom = prevMeasures.scrollHeight - prevMeasures.offsetHeight - scrollTop.current <\n            scrolledUpThreshold;\n        if (typeof prevMessages !== 'undefined') {\n            if (prevMessages.length < newMessages.length) {\n                // messages added to the top\n                if (lastPrevMessage?.id === lastNewMessage.id) {\n                    if (scrollTop.current < loadMoreScrollThreshold) {\n                        const listHeightDelta = newMeasures.scrollHeight - prevMeasures.scrollHeight;\n                        onScrollBy(listHeightDelta);\n                    }\n                }\n                // messages added to the bottom\n                else {\n                    const lastMessageIsFromCurrentUser = lastNewMessage.user?.id === client.userID;\n                    if (lastMessageIsFromCurrentUser || wasAtBottom) {\n                        scrollToBottom();\n                    }\n                    else {\n                        showNewMessages();\n                    }\n                }\n            }\n            // message list length didn't change, but check if last message had reaction/reply update\n            else {\n                const hasNewReactions = lastPrevMessage?.latest_reactions?.length !==\n                    lastNewMessage.latest_reactions?.length;\n                const hasNewReplies = lastPrevMessage?.reply_count !== lastNewMessage.reply_count;\n                if ((hasNewReactions || hasNewReplies) && wasAtBottom) {\n                    scrollToBottom();\n                }\n            }\n        }\n        messages.current = newMessages;\n        measures.current = newMeasures;\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [measures, messages, params.messages]);\n    return (scrollTopValue) => {\n        scrollTop.current = scrollTopValue;\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}