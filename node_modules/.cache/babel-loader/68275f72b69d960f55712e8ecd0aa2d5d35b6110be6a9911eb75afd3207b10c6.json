{"ast":null,"code":"import { useEffect } from 'react';\nimport uniqBy from 'lodash.uniqby';\nimport { moveChannelUp } from '../utils';\nimport { useChatContext } from '../../../context/ChatContext';\nexport const useMessageNewListener = function (setChannels, customHandler) {\n  let lockChannelOrder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let allowNewMessagesFromUnfilteredChannels = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  const {\n    client\n  } = useChatContext('useMessageNewListener');\n  useEffect(() => {\n    const handleEvent = event => {\n      if (customHandler && typeof customHandler === 'function') {\n        customHandler(setChannels, event);\n      } else {\n        setChannels(channels => {\n          const channelInList = channels.filter(channel => channel.cid === event.cid).length > 0;\n          if (!channelInList && allowNewMessagesFromUnfilteredChannels && event.channel_type) {\n            const channel = client.channel(event.channel_type, event.channel_id);\n            return uniqBy([channel, ...channels], 'cid');\n          }\n          if (!lockChannelOrder) return moveChannelUp({\n            channels,\n            cid: event.cid || ''\n          });\n          return channels;\n        });\n      }\n    };\n    client.on('message.new', handleEvent);\n    return () => {\n      client.off('message.new', handleEvent);\n    };\n  }, [allowNewMessagesFromUnfilteredChannels, client, customHandler, lockChannelOrder, setChannels]);\n};","map":{"version":3,"names":["useEffect","uniqBy","moveChannelUp","useChatContext","useMessageNewListener","setChannels","customHandler","lockChannelOrder","arguments","length","undefined","allowNewMessagesFromUnfilteredChannels","client","handleEvent","event","channels","channelInList","filter","channel","cid","channel_type","channel_id","on","off"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/ChannelList/hooks/useMessageNewListener.js"],"sourcesContent":["import { useEffect } from 'react';\nimport uniqBy from 'lodash.uniqby';\nimport { moveChannelUp } from '../utils';\nimport { useChatContext } from '../../../context/ChatContext';\nexport const useMessageNewListener = (setChannels, customHandler, lockChannelOrder = false, allowNewMessagesFromUnfilteredChannels = true) => {\n    const { client } = useChatContext('useMessageNewListener');\n    useEffect(() => {\n        const handleEvent = (event) => {\n            if (customHandler && typeof customHandler === 'function') {\n                customHandler(setChannels, event);\n            }\n            else {\n                setChannels((channels) => {\n                    const channelInList = channels.filter((channel) => channel.cid === event.cid).length > 0;\n                    if (!channelInList &&\n                        allowNewMessagesFromUnfilteredChannels &&\n                        event.channel_type) {\n                        const channel = client.channel(event.channel_type, event.channel_id);\n                        return uniqBy([channel, ...channels], 'cid');\n                    }\n                    if (!lockChannelOrder)\n                        return moveChannelUp({ channels, cid: event.cid || '' });\n                    return channels;\n                });\n            }\n        };\n        client.on('message.new', handleEvent);\n        return () => {\n            client.off('message.new', handleEvent);\n        };\n    }, [\n        allowNewMessagesFromUnfilteredChannels,\n        client,\n        customHandler,\n        lockChannelOrder,\n        setChannels,\n    ]);\n};\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,OAAOC,MAAM,MAAM,eAAe;AAClC,SAASC,aAAa,QAAQ,UAAU;AACxC,SAASC,cAAc,QAAQ,8BAA8B;AAC7D,OAAO,MAAMC,qBAAqB,GAAG,SAAAA,CAACC,WAAW,EAAEC,aAAa,EAA8E;EAAA,IAA5EC,gBAAgB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAAA,IAAEG,sCAAsC,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EACrI,MAAM;IAAEI;EAAO,CAAC,GAAGT,cAAc,CAAC,uBAAuB,CAAC;EAC1DH,SAAS,CAAC,MAAM;IACZ,MAAMa,WAAW,GAAIC,KAAK,IAAK;MAC3B,IAAIR,aAAa,IAAI,OAAOA,aAAa,KAAK,UAAU,EAAE;QACtDA,aAAa,CAACD,WAAW,EAAES,KAAK,CAAC;MACrC,CAAC,MACI;QACDT,WAAW,CAAEU,QAAQ,IAAK;UACtB,MAAMC,aAAa,GAAGD,QAAQ,CAACE,MAAM,CAAEC,OAAO,IAAKA,OAAO,CAACC,GAAG,KAAKL,KAAK,CAACK,GAAG,CAAC,CAACV,MAAM,GAAG,CAAC;UACxF,IAAI,CAACO,aAAa,IACdL,sCAAsC,IACtCG,KAAK,CAACM,YAAY,EAAE;YACpB,MAAMF,OAAO,GAAGN,MAAM,CAACM,OAAO,CAACJ,KAAK,CAACM,YAAY,EAAEN,KAAK,CAACO,UAAU,CAAC;YACpE,OAAOpB,MAAM,CAAC,CAACiB,OAAO,EAAE,GAAGH,QAAQ,CAAC,EAAE,KAAK,CAAC;UAChD;UACA,IAAI,CAACR,gBAAgB,EACjB,OAAOL,aAAa,CAAC;YAAEa,QAAQ;YAAEI,GAAG,EAAEL,KAAK,CAACK,GAAG,IAAI;UAAG,CAAC,CAAC;UAC5D,OAAOJ,QAAQ;QACnB,CAAC,CAAC;MACN;IACJ,CAAC;IACDH,MAAM,CAACU,EAAE,CAAC,aAAa,EAAET,WAAW,CAAC;IACrC,OAAO,MAAM;MACTD,MAAM,CAACW,GAAG,CAAC,aAAa,EAAEV,WAAW,CAAC;IAC1C,CAAC;EACL,CAAC,EAAE,CACCF,sCAAsC,EACtCC,MAAM,EACNN,aAAa,EACbC,gBAAgB,EAChBF,WAAW,CACd,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}