{"ast":null,"code":"import _objectSpread from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport clsx from 'clsx';\nimport React, { useCallback, useRef } from 'react';\nimport { MessageActionsBox } from './MessageActionsBox';\nimport { DialogAnchor, useDialog, useDialogIsOpen } from '../Dialog';\nimport { ActionsIcon as DefaultActionsIcon } from '../Message/icons';\nimport { isUserMuted, shouldRenderMessageActions } from '../Message/utils';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useComponentContext, useTranslationContext } from '../../context';\nexport const MessageActions = props => {\n  const {\n    ActionsIcon = DefaultActionsIcon,\n    customWrapperClass = '',\n    getMessageActions: propGetMessageActions,\n    handleDelete: propHandleDelete,\n    handleFlag: propHandleFlag,\n    handleMarkUnread: propHandleMarkUnread,\n    handleMute: propHandleMute,\n    handlePin: propHandlePin,\n    inline,\n    message: propMessage,\n    mine\n  } = props;\n  const {\n    mutes\n  } = useChatContext('MessageActions');\n  const {\n    customMessageActions,\n    getMessageActions: contextGetMessageActions,\n    handleDelete: contextHandleDelete,\n    handleFlag: contextHandleFlag,\n    handleMarkUnread: contextHandleMarkUnread,\n    handleMute: contextHandleMute,\n    handlePin: contextHandlePin,\n    isMyMessage,\n    message: contextMessage,\n    setEditingState,\n    threadList\n  } = useMessageContext('MessageActions');\n  const {\n    CustomMessageActionsList\n  } = useComponentContext('MessageActions');\n  const {\n    t\n  } = useTranslationContext('MessageActions');\n  const getMessageActions = propGetMessageActions || contextGetMessageActions;\n  const handleDelete = propHandleDelete || contextHandleDelete;\n  const handleFlag = propHandleFlag || contextHandleFlag;\n  const handleMarkUnread = propHandleMarkUnread || contextHandleMarkUnread;\n  const handleMute = propHandleMute || contextHandleMute;\n  const handlePin = propHandlePin || contextHandlePin;\n  const message = propMessage || contextMessage;\n  const isMine = mine ? mine() : isMyMessage();\n  const isMuted = useCallback(() => isUserMuted(message, mutes), [message, mutes]);\n  const dialogId = \"message-actions--\".concat(message.id);\n  const dialog = useDialog({\n    id: dialogId\n  });\n  const dialogIsOpen = useDialogIsOpen(dialogId);\n  const messageActions = getMessageActions();\n  const renderMessageActions = shouldRenderMessageActions({\n    customMessageActions,\n    CustomMessageActionsList,\n    inThread: threadList,\n    messageActions\n  });\n  const actionsBoxButtonRef = useRef(null);\n  if (!renderMessageActions) return null;\n  return React.createElement(MessageActionsWrapper, {\n    customWrapperClass: customWrapperClass,\n    inline: inline,\n    toggleOpen: dialog === null || dialog === void 0 ? void 0 : dialog.toggle\n  }, React.createElement(DialogAnchor, {\n    id: dialogId,\n    placement: isMine ? 'top-end' : 'top-start',\n    referenceElement: actionsBoxButtonRef.current,\n    tabIndex: -1,\n    trapFocus: true\n  }, React.createElement(MessageActionsBox, {\n    getMessageActions: getMessageActions,\n    handleDelete: handleDelete,\n    handleEdit: setEditingState,\n    handleFlag: handleFlag,\n    handleMarkUnread: handleMarkUnread,\n    handleMute: handleMute,\n    handlePin: handlePin,\n    isUserMuted: isMuted,\n    mine: isMine,\n    open: dialogIsOpen\n  })), React.createElement(\"button\", {\n    \"aria-expanded\": dialogIsOpen,\n    \"aria-haspopup\": 'true',\n    \"aria-label\": t('aria/Open Message Actions Menu'),\n    className: 'str-chat__message-actions-box-button',\n    \"data-testid\": 'message-actions-toggle-button',\n    ref: actionsBoxButtonRef\n  }, React.createElement(ActionsIcon, {\n    className: 'str-chat__message-action-icon'\n  })));\n};\nexport const MessageActionsWrapper = props => {\n  const {\n    children,\n    customWrapperClass,\n    inline,\n    toggleOpen\n  } = props;\n  const defaultWrapperClass = clsx('str-chat__message-simple__actions__action', 'str-chat__message-simple__actions__action--options', 'str-chat__message-actions-container');\n  const wrapperProps = {\n    className: customWrapperClass || defaultWrapperClass,\n    'data-testid': 'message-actions',\n    onClick: toggleOpen\n  };\n  if (inline) return React.createElement(\"span\", _objectSpread({}, wrapperProps), children);\n  return React.createElement(\"div\", _objectSpread({}, wrapperProps), children);\n};","map":{"version":3,"names":["clsx","React","useCallback","useRef","MessageActionsBox","DialogAnchor","useDialog","useDialogIsOpen","ActionsIcon","DefaultActionsIcon","isUserMuted","shouldRenderMessageActions","useChatContext","useMessageContext","useComponentContext","useTranslationContext","MessageActions","props","customWrapperClass","getMessageActions","propGetMessageActions","handleDelete","propHandleDelete","handleFlag","propHandleFlag","handleMarkUnread","propHandleMarkUnread","handleMute","propHandleMute","handlePin","propHandlePin","inline","message","propMessage","mine","mutes","customMessageActions","contextGetMessageActions","contextHandleDelete","contextHandleFlag","contextHandleMarkUnread","contextHandleMute","contextHandlePin","isMyMessage","contextMessage","setEditingState","threadList","CustomMessageActionsList","t","isMine","isMuted","dialogId","concat","id","dialog","dialogIsOpen","messageActions","renderMessageActions","inThread","actionsBoxButtonRef","createElement","MessageActionsWrapper","toggleOpen","toggle","placement","referenceElement","current","tabIndex","trapFocus","handleEdit","open","className","ref","children","defaultWrapperClass","wrapperProps","onClick","_objectSpread"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/MessageActions/MessageActions.js"],"sourcesContent":["import clsx from 'clsx';\nimport React, { useCallback, useRef } from 'react';\nimport { MessageActionsBox } from './MessageActionsBox';\nimport { DialogAnchor, useDialog, useDialogIsOpen } from '../Dialog';\nimport { ActionsIcon as DefaultActionsIcon } from '../Message/icons';\nimport { isUserMuted, shouldRenderMessageActions } from '../Message/utils';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useComponentContext, useTranslationContext } from '../../context';\nexport const MessageActions = (props) => {\n    const { ActionsIcon = DefaultActionsIcon, customWrapperClass = '', getMessageActions: propGetMessageActions, handleDelete: propHandleDelete, handleFlag: propHandleFlag, handleMarkUnread: propHandleMarkUnread, handleMute: propHandleMute, handlePin: propHandlePin, inline, message: propMessage, mine, } = props;\n    const { mutes } = useChatContext('MessageActions');\n    const { customMessageActions, getMessageActions: contextGetMessageActions, handleDelete: contextHandleDelete, handleFlag: contextHandleFlag, handleMarkUnread: contextHandleMarkUnread, handleMute: contextHandleMute, handlePin: contextHandlePin, isMyMessage, message: contextMessage, setEditingState, threadList, } = useMessageContext('MessageActions');\n    const { CustomMessageActionsList } = useComponentContext('MessageActions');\n    const { t } = useTranslationContext('MessageActions');\n    const getMessageActions = propGetMessageActions || contextGetMessageActions;\n    const handleDelete = propHandleDelete || contextHandleDelete;\n    const handleFlag = propHandleFlag || contextHandleFlag;\n    const handleMarkUnread = propHandleMarkUnread || contextHandleMarkUnread;\n    const handleMute = propHandleMute || contextHandleMute;\n    const handlePin = propHandlePin || contextHandlePin;\n    const message = propMessage || contextMessage;\n    const isMine = mine ? mine() : isMyMessage();\n    const isMuted = useCallback(() => isUserMuted(message, mutes), [message, mutes]);\n    const dialogId = `message-actions--${message.id}`;\n    const dialog = useDialog({ id: dialogId });\n    const dialogIsOpen = useDialogIsOpen(dialogId);\n    const messageActions = getMessageActions();\n    const renderMessageActions = shouldRenderMessageActions({\n        customMessageActions,\n        CustomMessageActionsList,\n        inThread: threadList,\n        messageActions,\n    });\n    const actionsBoxButtonRef = useRef(null);\n    if (!renderMessageActions)\n        return null;\n    return (React.createElement(MessageActionsWrapper, { customWrapperClass: customWrapperClass, inline: inline, toggleOpen: dialog?.toggle },\n        React.createElement(DialogAnchor, { id: dialogId, placement: isMine ? 'top-end' : 'top-start', referenceElement: actionsBoxButtonRef.current, tabIndex: -1, trapFocus: true },\n            React.createElement(MessageActionsBox, { getMessageActions: getMessageActions, handleDelete: handleDelete, handleEdit: setEditingState, handleFlag: handleFlag, handleMarkUnread: handleMarkUnread, handleMute: handleMute, handlePin: handlePin, isUserMuted: isMuted, mine: isMine, open: dialogIsOpen })),\n        React.createElement(\"button\", { \"aria-expanded\": dialogIsOpen, \"aria-haspopup\": 'true', \"aria-label\": t('aria/Open Message Actions Menu'), className: 'str-chat__message-actions-box-button', \"data-testid\": 'message-actions-toggle-button', ref: actionsBoxButtonRef },\n            React.createElement(ActionsIcon, { className: 'str-chat__message-action-icon' }))));\n};\nexport const MessageActionsWrapper = (props) => {\n    const { children, customWrapperClass, inline, toggleOpen } = props;\n    const defaultWrapperClass = clsx('str-chat__message-simple__actions__action', 'str-chat__message-simple__actions__action--options', 'str-chat__message-actions-container');\n    const wrapperProps = {\n        className: customWrapperClass || defaultWrapperClass,\n        'data-testid': 'message-actions',\n        onClick: toggleOpen,\n    };\n    if (inline)\n        return React.createElement(\"span\", { ...wrapperProps }, children);\n    return React.createElement(\"div\", { ...wrapperProps }, children);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}