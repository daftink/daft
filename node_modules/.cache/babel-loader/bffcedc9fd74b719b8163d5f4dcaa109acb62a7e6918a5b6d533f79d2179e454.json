{"ast":null,"code":"import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { useDialog } from '../Dialog';\nimport { defaultReactionOptions } from './reactionOptions';\nimport { isMutableRef } from './utils/utils';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useMessageContext } from '../../context/MessageContext';\nconst UnMemoizedReactionSelector = props => {\n  var _getUsersPerReactionT;\n  const {\n    Avatar: propAvatar,\n    detailedView = true,\n    handleReaction: propHandleReaction,\n    latest_reactions: propLatestReactions,\n    own_reactions: propOwnReactions,\n    reaction_groups: propReactionGroups,\n    reactionOptions: propReactionOptions,\n    reverse = false\n  } = props;\n  const {\n    Avatar: contextAvatar,\n    reactionOptions: contextReactionOptions = defaultReactionOptions\n  } = useComponentContext('ReactionSelector');\n  const {\n    closeReactionSelectorOnClick,\n    handleReaction: contextHandleReaction,\n    message\n  } = useMessageContext('ReactionSelector');\n  const dialogId = \"reaction-selector--\".concat(message.id);\n  const dialog = useDialog({\n    id: dialogId\n  });\n  const reactionOptions = propReactionOptions !== null && propReactionOptions !== void 0 ? propReactionOptions : contextReactionOptions;\n  const Avatar = propAvatar || contextAvatar || DefaultAvatar;\n  const handleReaction = propHandleReaction || contextHandleReaction;\n  const latestReactions = propLatestReactions || (message === null || message === void 0 ? void 0 : message.latest_reactions) || [];\n  const ownReactions = propOwnReactions || (message === null || message === void 0 ? void 0 : message.own_reactions) || [];\n  const reactionGroups = propReactionGroups || (message === null || message === void 0 ? void 0 : message.reaction_groups) || {};\n  const [tooltipReactionType, setTooltipReactionType] = useState(null);\n  const [tooltipPositions, setTooltipPositions] = useState(null);\n  const rootRef = useRef(null);\n  const targetRef = useRef(null);\n  const tooltipRef = useRef(null);\n  const showTooltip = useCallback((event, reactionType) => {\n    targetRef.current = event.currentTarget;\n    setTooltipReactionType(reactionType);\n  }, []);\n  const hideTooltip = useCallback(() => {\n    setTooltipReactionType(null);\n    setTooltipPositions(null);\n  }, []);\n  useEffect(() => {\n    var _tooltipRef$current, _targetRef$current, _rootRef$current;\n    if (!tooltipReactionType || !rootRef.current) return;\n    const tooltip = (_tooltipRef$current = tooltipRef.current) === null || _tooltipRef$current === void 0 ? void 0 : _tooltipRef$current.getBoundingClientRect();\n    const target = (_targetRef$current = targetRef.current) === null || _targetRef$current === void 0 ? void 0 : _targetRef$current.getBoundingClientRect();\n    const container = isMutableRef(rootRef) ? (_rootRef$current = rootRef.current) === null || _rootRef$current === void 0 ? void 0 : _rootRef$current.getBoundingClientRect() : null;\n    if (!tooltip || !target || !container) return;\n    const tooltipPosition = tooltip.width === container.width || tooltip.x < container.x ? 0 : target.left + target.width / 2 - container.left - tooltip.width / 2;\n    const arrowPosition = target.x - tooltip.x + target.width / 2 - tooltipPosition;\n    setTooltipPositions({\n      arrow: arrowPosition,\n      tooltip: tooltipPosition\n    });\n  }, [tooltipReactionType, rootRef]);\n  const getUsersPerReactionType = type => latestReactions.map(reaction => {\n    if (reaction.type === type) {\n      var _reaction$user, _reaction$user2;\n      return ((_reaction$user = reaction.user) === null || _reaction$user === void 0 ? void 0 : _reaction$user.name) || ((_reaction$user2 = reaction.user) === null || _reaction$user2 === void 0 ? void 0 : _reaction$user2.id);\n    }\n    return null;\n  }).filter(Boolean);\n  const iHaveReactedWithReaction = reactionType => ownReactions.find(reaction => reaction.type === reactionType);\n  const getLatestUserForReactionType = type => {\n    var _latestReactions$find;\n    return ((_latestReactions$find = latestReactions.find(reaction => reaction.type === type && !!reaction.user)) === null || _latestReactions$find === void 0 ? void 0 : _latestReactions$find.user) || undefined;\n  };\n  return React.createElement(\"div\", {\n    className: clsx('str-chat__reaction-selector str-chat__message-reaction-selector str-chat-react__message-reaction-selector', {\n      'str-chat__reaction-selector--reverse': reverse\n    }),\n    \"data-testid\": 'reaction-selector',\n    ref: rootRef\n  }, !!tooltipReactionType && detailedView && React.createElement(\"div\", {\n    className: 'str-chat__reaction-selector-tooltip',\n    ref: tooltipRef,\n    style: {\n      left: tooltipPositions === null || tooltipPositions === void 0 ? void 0 : tooltipPositions.tooltip,\n      visibility: tooltipPositions ? 'visible' : 'hidden'\n    }\n  }, React.createElement(\"div\", {\n    className: 'arrow',\n    style: {\n      left: tooltipPositions === null || tooltipPositions === void 0 ? void 0 : tooltipPositions.arrow\n    }\n  }), (_getUsersPerReactionT = getUsersPerReactionType(tooltipReactionType)) === null || _getUsersPerReactionT === void 0 ? void 0 : _getUsersPerReactionT.map((user, i, users) => React.createElement(\"span\", {\n    className: 'latest-user-username',\n    key: \"key-\".concat(i, \"-\").concat(user)\n  }, \"\".concat(user).concat(i < users.length - 1 ? ', ' : '')))), React.createElement(\"ul\", {\n    className: 'str-chat__message-reactions-list str-chat__message-reactions-options'\n  }, reactionOptions.map(_ref => {\n    var _reactionGroups$react, _reactionGroups$react2;\n    let {\n      Component,\n      name: reactionName,\n      type: reactionType\n    } = _ref;\n    const latestUser = getLatestUserForReactionType(reactionType);\n    const count = (_reactionGroups$react = (_reactionGroups$react2 = reactionGroups[reactionType]) === null || _reactionGroups$react2 === void 0 ? void 0 : _reactionGroups$react2.count) !== null && _reactionGroups$react !== void 0 ? _reactionGroups$react : 0;\n    return React.createElement(\"li\", {\n      key: reactionType\n    }, React.createElement(\"button\", {\n      \"aria-label\": \"Select Reaction: \".concat(reactionName || reactionType),\n      className: clsx('str-chat__message-reactions-list-item str-chat__message-reactions-option', {\n        'str-chat__message-reactions-option-selected': iHaveReactedWithReaction(reactionType)\n      }),\n      \"data-testid\": 'select-reaction-button',\n      \"data-text\": reactionType,\n      onClick: event => {\n        handleReaction(reactionType, event);\n        if (closeReactionSelectorOnClick) {\n          dialog.close();\n        }\n      }\n    }, !!count && detailedView && React.createElement(\"div\", {\n      className: 'latest-user str-chat__message-reactions-last-user',\n      onClick: hideTooltip,\n      onMouseEnter: e => showTooltip(e, reactionType),\n      onMouseLeave: hideTooltip\n    }, latestUser ? React.createElement(Avatar, {\n      image: latestUser.image,\n      name: latestUser.name,\n      size: 20,\n      user: latestUser\n    }) : React.createElement(\"div\", {\n      className: 'latest-user-not-found'\n    })), React.createElement(\"span\", {\n      className: 'str-chat__message-reaction-emoji'\n    }, React.createElement(Component, null)), Boolean(count) && detailedView && React.createElement(\"span\", {\n      className: 'str-chat__message-reactions-list-item__count'\n    }, count || '')));\n  })));\n};\n/**\n * Component that allows a user to select a reaction.\n */\nexport const ReactionSelector = React.memo(UnMemoizedReactionSelector);","map":{"version":3,"names":["React","useCallback","useEffect","useRef","useState","clsx","Avatar","DefaultAvatar","useDialog","defaultReactionOptions","isMutableRef","useComponentContext","useMessageContext","UnMemoizedReactionSelector","props","_getUsersPerReactionT","propAvatar","detailedView","handleReaction","propHandleReaction","latest_reactions","propLatestReactions","own_reactions","propOwnReactions","reaction_groups","propReactionGroups","reactionOptions","propReactionOptions","reverse","contextAvatar","contextReactionOptions","closeReactionSelectorOnClick","contextHandleReaction","message","dialogId","concat","id","dialog","latestReactions","ownReactions","reactionGroups","tooltipReactionType","setTooltipReactionType","tooltipPositions","setTooltipPositions","rootRef","targetRef","tooltipRef","showTooltip","event","reactionType","current","currentTarget","hideTooltip","_tooltipRef$current","_targetRef$current","_rootRef$current","tooltip","getBoundingClientRect","target","container","tooltipPosition","width","x","left","arrowPosition","arrow","getUsersPerReactionType","type","map","reaction","_reaction$user","_reaction$user2","user","name","filter","Boolean","iHaveReactedWithReaction","find","getLatestUserForReactionType","_latestReactions$find","undefined","createElement","className","ref","style","visibility","i","users","key","length","_ref","_reactionGroups$react","_reactionGroups$react2","Component","reactionName","latestUser","count","onClick","close","onMouseEnter","e","onMouseLeave","image","size","ReactionSelector","memo"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/Reactions/ReactionSelector.js"],"sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { useDialog } from '../Dialog';\nimport { defaultReactionOptions } from './reactionOptions';\nimport { isMutableRef } from './utils/utils';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useMessageContext } from '../../context/MessageContext';\nconst UnMemoizedReactionSelector = (props) => {\n    const { Avatar: propAvatar, detailedView = true, handleReaction: propHandleReaction, latest_reactions: propLatestReactions, own_reactions: propOwnReactions, reaction_groups: propReactionGroups, reactionOptions: propReactionOptions, reverse = false, } = props;\n    const { Avatar: contextAvatar, reactionOptions: contextReactionOptions = defaultReactionOptions, } = useComponentContext('ReactionSelector');\n    const { closeReactionSelectorOnClick, handleReaction: contextHandleReaction, message, } = useMessageContext('ReactionSelector');\n    const dialogId = `reaction-selector--${message.id}`;\n    const dialog = useDialog({ id: dialogId });\n    const reactionOptions = propReactionOptions ?? contextReactionOptions;\n    const Avatar = propAvatar || contextAvatar || DefaultAvatar;\n    const handleReaction = propHandleReaction || contextHandleReaction;\n    const latestReactions = propLatestReactions || message?.latest_reactions || [];\n    const ownReactions = propOwnReactions || message?.own_reactions || [];\n    const reactionGroups = propReactionGroups || message?.reaction_groups || {};\n    const [tooltipReactionType, setTooltipReactionType] = useState(null);\n    const [tooltipPositions, setTooltipPositions] = useState(null);\n    const rootRef = useRef(null);\n    const targetRef = useRef(null);\n    const tooltipRef = useRef(null);\n    const showTooltip = useCallback((event, reactionType) => {\n        targetRef.current = event.currentTarget;\n        setTooltipReactionType(reactionType);\n    }, []);\n    const hideTooltip = useCallback(() => {\n        setTooltipReactionType(null);\n        setTooltipPositions(null);\n    }, []);\n    useEffect(() => {\n        if (!tooltipReactionType || !rootRef.current)\n            return;\n        const tooltip = tooltipRef.current?.getBoundingClientRect();\n        const target = targetRef.current?.getBoundingClientRect();\n        const container = isMutableRef(rootRef)\n            ? rootRef.current?.getBoundingClientRect()\n            : null;\n        if (!tooltip || !target || !container)\n            return;\n        const tooltipPosition = tooltip.width === container.width || tooltip.x < container.x\n            ? 0\n            : target.left + target.width / 2 - container.left - tooltip.width / 2;\n        const arrowPosition = target.x - tooltip.x + target.width / 2 - tooltipPosition;\n        setTooltipPositions({\n            arrow: arrowPosition,\n            tooltip: tooltipPosition,\n        });\n    }, [tooltipReactionType, rootRef]);\n    const getUsersPerReactionType = (type) => latestReactions\n        .map((reaction) => {\n        if (reaction.type === type) {\n            return reaction.user?.name || reaction.user?.id;\n        }\n        return null;\n    })\n        .filter(Boolean);\n    const iHaveReactedWithReaction = (reactionType) => ownReactions.find((reaction) => reaction.type === reactionType);\n    const getLatestUserForReactionType = (type) => latestReactions.find((reaction) => reaction.type === type && !!reaction.user)?.user ||\n        undefined;\n    return (React.createElement(\"div\", { className: clsx('str-chat__reaction-selector str-chat__message-reaction-selector str-chat-react__message-reaction-selector', {\n            'str-chat__reaction-selector--reverse': reverse,\n        }), \"data-testid\": 'reaction-selector', ref: rootRef },\n        !!tooltipReactionType && detailedView && (React.createElement(\"div\", { className: 'str-chat__reaction-selector-tooltip', ref: tooltipRef, style: {\n                left: tooltipPositions?.tooltip,\n                visibility: tooltipPositions ? 'visible' : 'hidden',\n            } },\n            React.createElement(\"div\", { className: 'arrow', style: { left: tooltipPositions?.arrow } }),\n            getUsersPerReactionType(tooltipReactionType)?.map((user, i, users) => (React.createElement(\"span\", { className: 'latest-user-username', key: `key-${i}-${user}` }, `${user}${i < users.length - 1 ? ', ' : ''}`))))),\n        React.createElement(\"ul\", { className: 'str-chat__message-reactions-list str-chat__message-reactions-options' }, reactionOptions.map(({ Component, name: reactionName, type: reactionType }) => {\n            const latestUser = getLatestUserForReactionType(reactionType);\n            const count = reactionGroups[reactionType]?.count ?? 0;\n            return (React.createElement(\"li\", { key: reactionType },\n                React.createElement(\"button\", { \"aria-label\": `Select Reaction: ${reactionName || reactionType}`, className: clsx('str-chat__message-reactions-list-item str-chat__message-reactions-option', {\n                        'str-chat__message-reactions-option-selected': iHaveReactedWithReaction(reactionType),\n                    }), \"data-testid\": 'select-reaction-button', \"data-text\": reactionType, onClick: (event) => {\n                        handleReaction(reactionType, event);\n                        if (closeReactionSelectorOnClick) {\n                            dialog.close();\n                        }\n                    } },\n                    !!count && detailedView && (React.createElement(\"div\", { className: 'latest-user str-chat__message-reactions-last-user', onClick: hideTooltip, onMouseEnter: (e) => showTooltip(e, reactionType), onMouseLeave: hideTooltip }, latestUser ? (React.createElement(Avatar, { image: latestUser.image, name: latestUser.name, size: 20, user: latestUser })) : (React.createElement(\"div\", { className: 'latest-user-not-found' })))),\n                    React.createElement(\"span\", { className: 'str-chat__message-reaction-emoji' },\n                        React.createElement(Component, null)),\n                    Boolean(count) && detailedView && (React.createElement(\"span\", { className: 'str-chat__message-reactions-list-item__count' }, count || '')))));\n        }))));\n};\n/**\n * Component that allows a user to select a reaction.\n */\nexport const ReactionSelector = React.memo(UnMemoizedReactionSelector);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}