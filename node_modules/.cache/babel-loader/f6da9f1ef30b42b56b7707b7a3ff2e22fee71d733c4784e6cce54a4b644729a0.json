{"ast":null,"code":"import React, { useMemo } from 'react';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { getDateString, isDate } from '../../i18n/utils';\nexport function Timestamp(props) {\n  const {\n    calendar,\n    calendarFormats,\n    customClass,\n    format,\n    timestamp\n  } = props;\n  const {\n    formatDate\n  } = useMessageContext('MessageTimestamp');\n  const {\n    t,\n    tDateTimeParser\n  } = useTranslationContext('MessageTimestamp');\n  const normalizedTimestamp = timestamp && isDate(timestamp) ? timestamp.toISOString() : timestamp;\n  const when = useMemo(() => getDateString({\n    calendar,\n    calendarFormats,\n    format,\n    formatDate,\n    messageCreatedAt: normalizedTimestamp,\n    t,\n    tDateTimeParser,\n    timestampTranslationKey: 'timestamp/MessageTimestamp'\n  }), [calendar, calendarFormats, format, formatDate, normalizedTimestamp, t, tDateTimeParser]);\n  if (!when) {\n    return null;\n  }\n  return React.createElement(\"time\", {\n    className: customClass,\n    dateTime: normalizedTimestamp,\n    title: normalizedTimestamp\n  }, when);\n}","map":{"version":3,"names":["React","useMemo","useMessageContext","useTranslationContext","getDateString","isDate","Timestamp","props","calendar","calendarFormats","customClass","format","timestamp","formatDate","t","tDateTimeParser","normalizedTimestamp","toISOString","when","messageCreatedAt","timestampTranslationKey","createElement","className","dateTime","title"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/Message/Timestamp.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { getDateString, isDate } from '../../i18n/utils';\nexport function Timestamp(props) {\n    const { calendar, calendarFormats, customClass, format, timestamp } = props;\n    const { formatDate } = useMessageContext('MessageTimestamp');\n    const { t, tDateTimeParser } = useTranslationContext('MessageTimestamp');\n    const normalizedTimestamp = timestamp && isDate(timestamp) ? timestamp.toISOString() : timestamp;\n    const when = useMemo(() => getDateString({\n        calendar,\n        calendarFormats,\n        format,\n        formatDate,\n        messageCreatedAt: normalizedTimestamp,\n        t,\n        tDateTimeParser,\n        timestampTranslationKey: 'timestamp/MessageTimestamp',\n    }), [\n        calendar,\n        calendarFormats,\n        format,\n        formatDate,\n        normalizedTimestamp,\n        t,\n        tDateTimeParser,\n    ]);\n    if (!when) {\n        return null;\n    }\n    return (React.createElement(\"time\", { className: customClass, dateTime: normalizedTimestamp, title: normalizedTimestamp }, when));\n}\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,OAAO,QAAQ,OAAO;AACtC,SAASC,iBAAiB,QAAQ,8BAA8B;AAChE,SAASC,qBAAqB,QAAQ,kCAAkC;AACxE,SAASC,aAAa,EAAEC,MAAM,QAAQ,kBAAkB;AACxD,OAAO,SAASC,SAASA,CAACC,KAAK,EAAE;EAC7B,MAAM;IAAEC,QAAQ;IAAEC,eAAe;IAAEC,WAAW;IAAEC,MAAM;IAAEC;EAAU,CAAC,GAAGL,KAAK;EAC3E,MAAM;IAAEM;EAAW,CAAC,GAAGX,iBAAiB,CAAC,kBAAkB,CAAC;EAC5D,MAAM;IAAEY,CAAC;IAAEC;EAAgB,CAAC,GAAGZ,qBAAqB,CAAC,kBAAkB,CAAC;EACxE,MAAMa,mBAAmB,GAAGJ,SAAS,IAAIP,MAAM,CAACO,SAAS,CAAC,GAAGA,SAAS,CAACK,WAAW,CAAC,CAAC,GAAGL,SAAS;EAChG,MAAMM,IAAI,GAAGjB,OAAO,CAAC,MAAMG,aAAa,CAAC;IACrCI,QAAQ;IACRC,eAAe;IACfE,MAAM;IACNE,UAAU;IACVM,gBAAgB,EAAEH,mBAAmB;IACrCF,CAAC;IACDC,eAAe;IACfK,uBAAuB,EAAE;EAC7B,CAAC,CAAC,EAAE,CACAZ,QAAQ,EACRC,eAAe,EACfE,MAAM,EACNE,UAAU,EACVG,mBAAmB,EACnBF,CAAC,EACDC,eAAe,CAClB,CAAC;EACF,IAAI,CAACG,IAAI,EAAE;IACP,OAAO,IAAI;EACf;EACA,OAAQlB,KAAK,CAACqB,aAAa,CAAC,MAAM,EAAE;IAAEC,SAAS,EAAEZ,WAAW;IAAEa,QAAQ,EAAEP,mBAAmB;IAAEQ,KAAK,EAAER;EAAoB,CAAC,EAAEE,IAAI,CAAC;AACpI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}