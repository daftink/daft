{"ast":null,"code":"import _objectSpread from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nexport const makeChannelReducer = () => (state, action) => {\n  switch (action.type) {\n    case 'closeThread':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          thread: null,\n          threadLoadingMore: false,\n          threadMessages: []\n        });\n      }\n    case 'copyMessagesFromChannel':\n      {\n        const {\n          channel,\n          parentId\n        } = action;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          messages: [...channel.state.messages],\n          pinnedMessages: [...channel.state.pinnedMessages],\n          // copying messages from channel happens with new message - this resets the suppressAutoscroll\n          suppressAutoscroll: false,\n          threadMessages: parentId ? _objectSpread({}, channel.state.threads)[parentId] || [] : state.threadMessages\n        });\n      }\n    case 'copyStateFromChannelOnEvent':\n      {\n        const {\n          channel\n        } = action;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          members: _objectSpread({}, channel.state.members),\n          messages: [...channel.state.messages],\n          pinnedMessages: [...channel.state.pinnedMessages],\n          read: _objectSpread({}, channel.state.read),\n          watcherCount: channel.state.watcher_count,\n          watchers: _objectSpread({}, channel.state.watchers)\n        });\n      }\n    case 'initStateFromChannel':\n      {\n        const {\n          channel,\n          hasMore\n        } = action;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          hasMore,\n          loading: false,\n          members: _objectSpread({}, channel.state.members),\n          messages: [...channel.state.messages],\n          pinnedMessages: [...channel.state.pinnedMessages],\n          read: _objectSpread({}, channel.state.read),\n          watcherCount: channel.state.watcher_count,\n          watchers: _objectSpread({}, channel.state.watchers)\n        });\n      }\n    case 'jumpToLatestMessage':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          hasMoreNewer: false,\n          highlightedMessageId: undefined,\n          loading: false,\n          suppressAutoscroll: false\n        });\n      }\n    case 'jumpToMessageFinished':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          hasMoreNewer: action.channel.state.messagePagination.hasNext,\n          highlightedMessageId: action.highlightedMessageId,\n          messages: action.channel.state.messages\n        });\n      }\n    case 'clearHighlightedMessage':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          highlightedMessageId: undefined\n        });\n      }\n    case 'loadMoreFinished':\n      {\n        const {\n          hasMore,\n          messages\n        } = action;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          hasMore,\n          loadingMore: false,\n          messages,\n          suppressAutoscroll: false\n        });\n      }\n    case 'loadMoreNewerFinished':\n      {\n        const {\n          hasMoreNewer,\n          messages\n        } = action;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          hasMoreNewer,\n          loadingMoreNewer: false,\n          messages\n        });\n      }\n    case 'loadMoreThreadFinished':\n      {\n        const {\n          threadHasMore,\n          threadMessages\n        } = action;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          threadHasMore,\n          threadLoadingMore: false,\n          threadMessages\n        });\n      }\n    case 'openThread':\n      {\n        const {\n          channel,\n          message\n        } = action;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          thread: message,\n          threadHasMore: true,\n          threadMessages: message.id ? _objectSpread({}, channel.state.threads)[message.id] || [] : [],\n          threadSuppressAutoscroll: false\n        });\n      }\n    case 'setError':\n      {\n        const {\n          error\n        } = action;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          error\n        });\n      }\n    case 'setLoadingMore':\n      {\n        const {\n          loadingMore\n        } = action;\n        // suppress the autoscroll behavior\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loadingMore,\n          suppressAutoscroll: loadingMore\n        });\n      }\n    case 'setLoadingMoreNewer':\n      {\n        const {\n          loadingMoreNewer\n        } = action;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loadingMoreNewer\n        });\n      }\n    case 'setThread':\n      {\n        const {\n          message\n        } = action;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          thread: message\n        });\n      }\n    case 'setTyping':\n      {\n        const {\n          channel\n        } = action;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          typing: _objectSpread({}, channel.state.typing)\n        });\n      }\n    case 'startLoadingThread':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          threadLoadingMore: true,\n          threadSuppressAutoscroll: true\n        });\n      }\n    case 'updateThreadOnEvent':\n      {\n        var _state$thread;\n        const {\n          channel,\n          message\n        } = action;\n        if (!state.thread) return state;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          thread: (message === null || message === void 0 ? void 0 : message.id) === state.thread.id ? channel.state.formatMessage(message) : state.thread,\n          threadMessages: (_state$thread = state.thread) !== null && _state$thread !== void 0 && _state$thread.id ? _objectSpread({}, channel.state.threads)[state.thread.id] || [] : []\n        });\n      }\n    default:\n      return state;\n  }\n};\nexport const initialState = {\n  error: null,\n  hasMore: true,\n  hasMoreNewer: false,\n  loading: true,\n  loadingMore: false,\n  members: {},\n  messages: [],\n  pinnedMessages: [],\n  read: {},\n  suppressAutoscroll: false,\n  thread: null,\n  threadHasMore: true,\n  threadLoadingMore: false,\n  threadMessages: [],\n  threadSuppressAutoscroll: false,\n  typing: {},\n  watcherCount: 0,\n  watchers: {}\n};","map":{"version":3,"names":["makeChannelReducer","state","action","type","_objectSpread","thread","threadLoadingMore","threadMessages","channel","parentId","messages","pinnedMessages","suppressAutoscroll","threads","members","read","watcherCount","watcher_count","watchers","hasMore","loading","hasMoreNewer","highlightedMessageId","undefined","messagePagination","hasNext","loadingMore","loadingMoreNewer","threadHasMore","message","id","threadSuppressAutoscroll","error","typing","_state$thread","formatMessage","initialState"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/Channel/channelState.js"],"sourcesContent":["export const makeChannelReducer = () => (state, action) => {\n    switch (action.type) {\n        case 'closeThread': {\n            return {\n                ...state,\n                thread: null,\n                threadLoadingMore: false,\n                threadMessages: [],\n            };\n        }\n        case 'copyMessagesFromChannel': {\n            const { channel, parentId } = action;\n            return {\n                ...state,\n                messages: [...channel.state.messages],\n                pinnedMessages: [...channel.state.pinnedMessages],\n                // copying messages from channel happens with new message - this resets the suppressAutoscroll\n                suppressAutoscroll: false,\n                threadMessages: parentId\n                    ? { ...channel.state.threads }[parentId] || []\n                    : state.threadMessages,\n            };\n        }\n        case 'copyStateFromChannelOnEvent': {\n            const { channel } = action;\n            return {\n                ...state,\n                members: { ...channel.state.members },\n                messages: [...channel.state.messages],\n                pinnedMessages: [...channel.state.pinnedMessages],\n                read: { ...channel.state.read },\n                watcherCount: channel.state.watcher_count,\n                watchers: { ...channel.state.watchers },\n            };\n        }\n        case 'initStateFromChannel': {\n            const { channel, hasMore } = action;\n            return {\n                ...state,\n                hasMore,\n                loading: false,\n                members: { ...channel.state.members },\n                messages: [...channel.state.messages],\n                pinnedMessages: [...channel.state.pinnedMessages],\n                read: { ...channel.state.read },\n                watcherCount: channel.state.watcher_count,\n                watchers: { ...channel.state.watchers },\n            };\n        }\n        case 'jumpToLatestMessage': {\n            return {\n                ...state,\n                hasMoreNewer: false,\n                highlightedMessageId: undefined,\n                loading: false,\n                suppressAutoscroll: false,\n            };\n        }\n        case 'jumpToMessageFinished': {\n            return {\n                ...state,\n                hasMoreNewer: action.channel.state.messagePagination.hasNext,\n                highlightedMessageId: action.highlightedMessageId,\n                messages: action.channel.state.messages,\n            };\n        }\n        case 'clearHighlightedMessage': {\n            return {\n                ...state,\n                highlightedMessageId: undefined,\n            };\n        }\n        case 'loadMoreFinished': {\n            const { hasMore, messages } = action;\n            return {\n                ...state,\n                hasMore,\n                loadingMore: false,\n                messages,\n                suppressAutoscroll: false,\n            };\n        }\n        case 'loadMoreNewerFinished': {\n            const { hasMoreNewer, messages } = action;\n            return {\n                ...state,\n                hasMoreNewer,\n                loadingMoreNewer: false,\n                messages,\n            };\n        }\n        case 'loadMoreThreadFinished': {\n            const { threadHasMore, threadMessages } = action;\n            return {\n                ...state,\n                threadHasMore,\n                threadLoadingMore: false,\n                threadMessages,\n            };\n        }\n        case 'openThread': {\n            const { channel, message } = action;\n            return {\n                ...state,\n                thread: message,\n                threadHasMore: true,\n                threadMessages: message.id\n                    ? { ...channel.state.threads }[message.id] || []\n                    : [],\n                threadSuppressAutoscroll: false,\n            };\n        }\n        case 'setError': {\n            const { error } = action;\n            return { ...state, error };\n        }\n        case 'setLoadingMore': {\n            const { loadingMore } = action;\n            // suppress the autoscroll behavior\n            return { ...state, loadingMore, suppressAutoscroll: loadingMore };\n        }\n        case 'setLoadingMoreNewer': {\n            const { loadingMoreNewer } = action;\n            return { ...state, loadingMoreNewer };\n        }\n        case 'setThread': {\n            const { message } = action;\n            return { ...state, thread: message };\n        }\n        case 'setTyping': {\n            const { channel } = action;\n            return {\n                ...state,\n                typing: { ...channel.state.typing },\n            };\n        }\n        case 'startLoadingThread': {\n            return {\n                ...state,\n                threadLoadingMore: true,\n                threadSuppressAutoscroll: true,\n            };\n        }\n        case 'updateThreadOnEvent': {\n            const { channel, message } = action;\n            if (!state.thread)\n                return state;\n            return {\n                ...state,\n                thread: message?.id === state.thread.id\n                    ? channel.state.formatMessage(message)\n                    : state.thread,\n                threadMessages: state.thread?.id\n                    ? { ...channel.state.threads }[state.thread.id] || []\n                    : [],\n            };\n        }\n        default:\n            return state;\n    }\n};\nexport const initialState = {\n    error: null,\n    hasMore: true,\n    hasMoreNewer: false,\n    loading: true,\n    loadingMore: false,\n    members: {},\n    messages: [],\n    pinnedMessages: [],\n    read: {},\n    suppressAutoscroll: false,\n    thread: null,\n    threadHasMore: true,\n    threadLoadingMore: false,\n    threadMessages: [],\n    threadSuppressAutoscroll: false,\n    typing: {},\n    watcherCount: 0,\n    watchers: {},\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}