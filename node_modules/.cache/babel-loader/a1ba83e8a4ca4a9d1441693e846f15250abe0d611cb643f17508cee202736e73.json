{"ast":null,"code":"import _objectSpread from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"threshold\"],\n  _excluded2 = [\"members\", \"mutes\", \"watchers\"];\nimport clsx from 'clsx';\nimport React from 'react';\nimport { useEnrichedMessages, useMessageListElements, useScrollLocationLogic, useUnreadMessagesNotification } from './hooks/MessageList';\nimport { useMarkRead } from './hooks/useMarkRead';\nimport { MessageNotification as DefaultMessageNotification } from './MessageNotification';\nimport { MessageListNotifications as DefaultMessageListNotifications } from './MessageListNotifications';\nimport { UnreadMessagesNotification as DefaultUnreadMessagesNotification } from './UnreadMessagesNotification';\nimport { useChannelActionContext } from '../../context/ChannelActionContext';\nimport { useChannelStateContext } from '../../context/ChannelStateContext';\nimport { DialogManagerProvider } from '../../context';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { MessageListContextProvider } from '../../context/MessageListContext';\nimport { EmptyStateIndicator as DefaultEmptyStateIndicator } from '../EmptyStateIndicator';\nimport { InfiniteScroll } from '../InfiniteScrollPaginator/InfiniteScroll';\nimport { LoadingIndicator as DefaultLoadingIndicator } from '../Loading';\nimport { defaultPinPermissions, MESSAGE_ACTIONS } from '../Message/utils';\nimport { TypingIndicator as DefaultTypingIndicator } from '../TypingIndicator';\nimport { MessageListMainPanel as DefaultMessageListMainPanel } from './MessageListMainPanel';\nimport { defaultRenderMessages } from './renderMessages';\nimport { useStableId } from '../UtilityComponents/useStableId';\nimport { DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD, DEFAULT_NEXT_CHANNEL_PAGE_SIZE } from '../../constants/limits';\nconst MessageListWithContext = props => {\n  const {\n      channel,\n      channelUnreadUiState,\n      disableDateSeparator = false,\n      groupStyles,\n      hasMoreNewer = false,\n      headerPosition,\n      hideDeletedMessages = false,\n      hideNewMessageSeparator = false,\n      highlightedMessageId,\n      internalInfiniteScrollProps: {\n        threshold: loadMoreScrollThreshold = DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD\n      } = {},\n      jumpToLatestMessage = () => Promise.resolve(),\n      loadMore: loadMoreCallback,\n      loadMoreNewer: loadMoreNewerCallback,\n      // @deprecated in favor of `channelCapabilities` - TODO: remove in next major release\n      maxTimeBetweenGroupedMessages,\n      messageActions = Object.keys(MESSAGE_ACTIONS),\n      messageLimit = DEFAULT_NEXT_CHANNEL_PAGE_SIZE,\n      messages = [],\n      noGroupByUser = false,\n      notifications,\n      pinPermissions = defaultPinPermissions,\n      reactionDetailsSort,\n      read,\n      renderMessages = defaultRenderMessages,\n      returnAllReadData = false,\n      reviewProcessedMessage,\n      showUnreadNotificationAlways,\n      sortReactionDetails,\n      sortReactions,\n      suppressAutoscroll,\n      threadList = false,\n      unsafeHTML = false\n    } = props,\n    restInternalInfiniteScrollProps = _objectWithoutProperties(props.internalInfiniteScrollProps, _excluded);\n  const [listElement, setListElement] = React.useState(null);\n  const [ulElement, setUlElement] = React.useState(null);\n  const {\n    customClasses\n  } = useChatContext('MessageList');\n  const {\n    EmptyStateIndicator = DefaultEmptyStateIndicator,\n    LoadingIndicator = DefaultLoadingIndicator,\n    MessageListMainPanel = DefaultMessageListMainPanel,\n    MessageListNotifications = DefaultMessageListNotifications,\n    MessageNotification = DefaultMessageNotification,\n    TypingIndicator = DefaultTypingIndicator,\n    UnreadMessagesNotification = DefaultUnreadMessagesNotification\n  } = useComponentContext('MessageList');\n  const {\n    hasNewMessages,\n    isMessageListScrolledToBottom,\n    onScroll,\n    scrollToBottom,\n    wrapperRect\n  } = useScrollLocationLogic({\n    hasMoreNewer,\n    listElement,\n    loadMoreScrollThreshold,\n    messages,\n    // todo: is it correct to base the scroll logic on an array that does not contain date separators or intro?\n    scrolledUpThreshold: props.scrolledUpThreshold,\n    suppressAutoscroll\n  });\n  const {\n    show: showUnreadMessagesNotification\n  } = useUnreadMessagesNotification({\n    isMessageListScrolledToBottom,\n    showAlways: !!showUnreadNotificationAlways,\n    unreadCount: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages\n  });\n  useMarkRead({\n    isMessageListScrolledToBottom,\n    messageListIsThread: threadList,\n    wasMarkedUnread: !!(channelUnreadUiState !== null && channelUnreadUiState !== void 0 && channelUnreadUiState.first_unread_message_id)\n  });\n  const {\n    messageGroupStyles,\n    messages: enrichedMessages\n  } = useEnrichedMessages({\n    channel,\n    disableDateSeparator,\n    groupStyles,\n    headerPosition,\n    hideDeletedMessages,\n    hideNewMessageSeparator,\n    maxTimeBetweenGroupedMessages,\n    messages,\n    noGroupByUser,\n    reviewProcessedMessage\n  });\n  const elements = useMessageListElements({\n    channelUnreadUiState,\n    enrichedMessages,\n    internalMessageProps: {\n      additionalMessageInputProps: props.additionalMessageInputProps,\n      closeReactionSelectorOnClick: props.closeReactionSelectorOnClick,\n      customMessageActions: props.customMessageActions,\n      disableQuotedMessages: props.disableQuotedMessages,\n      formatDate: props.formatDate,\n      getDeleteMessageErrorNotification: props.getDeleteMessageErrorNotification,\n      getFlagMessageErrorNotification: props.getFlagMessageErrorNotification,\n      getFlagMessageSuccessNotification: props.getFlagMessageSuccessNotification,\n      getMarkMessageUnreadErrorNotification: props.getMarkMessageUnreadErrorNotification,\n      getMarkMessageUnreadSuccessNotification: props.getMarkMessageUnreadSuccessNotification,\n      getMuteUserErrorNotification: props.getMuteUserErrorNotification,\n      getMuteUserSuccessNotification: props.getMuteUserSuccessNotification,\n      getPinMessageErrorNotification: props.getPinMessageErrorNotification,\n      Message: props.Message,\n      messageActions,\n      messageListRect: wrapperRect,\n      onlySenderCanEdit: props.onlySenderCanEdit,\n      onMentionsClick: props.onMentionsClick,\n      onMentionsHover: props.onMentionsHover,\n      onUserClick: props.onUserClick,\n      onUserHover: props.onUserHover,\n      openThread: props.openThread,\n      pinPermissions,\n      reactionDetailsSort,\n      renderText: props.renderText,\n      retrySendMessage: props.retrySendMessage,\n      sortReactionDetails,\n      sortReactions,\n      unsafeHTML\n    },\n    messageGroupStyles,\n    read,\n    renderMessages,\n    returnAllReadData,\n    threadList\n  });\n  const messageListClass = (customClasses === null || customClasses === void 0 ? void 0 : customClasses.messageList) || 'str-chat__list';\n  const loadMore = React.useCallback(() => {\n    if (loadMoreCallback) {\n      loadMoreCallback(messageLimit);\n    }\n  }, [loadMoreCallback, messageLimit]);\n  const loadMoreNewer = React.useCallback(() => {\n    if (loadMoreNewerCallback) {\n      loadMoreNewerCallback(messageLimit);\n    }\n  }, [loadMoreNewerCallback, messageLimit]);\n  const scrollToBottomFromNotification = React.useCallback(async () => {\n    if (hasMoreNewer) {\n      await jumpToLatestMessage();\n    } else {\n      scrollToBottom();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [scrollToBottom, hasMoreNewer]);\n  React.useLayoutEffect(() => {\n    if (highlightedMessageId) {\n      const element = ulElement === null || ulElement === void 0 ? void 0 : ulElement.querySelector(\"[data-message-id='\".concat(highlightedMessageId, \"']\"));\n      element === null || element === void 0 || element.scrollIntoView({\n        block: 'center'\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [highlightedMessageId]);\n  const id = useStableId();\n  const showEmptyStateIndicator = elements.length === 0 && !threadList;\n  const dialogManagerId = threadList ? \"message-list-dialog-manager-thread-\".concat(id) : \"message-list-dialog-manager-\".concat(id);\n  return React.createElement(MessageListContextProvider, {\n    value: {\n      listElement,\n      scrollToBottom\n    }\n  }, React.createElement(MessageListMainPanel, null, React.createElement(DialogManagerProvider, {\n    id: dialogManagerId\n  }, !threadList && showUnreadMessagesNotification && React.createElement(UnreadMessagesNotification, {\n    unreadCount: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages\n  }), React.createElement(\"div\", {\n    className: clsx(messageListClass, customClasses === null || customClasses === void 0 ? void 0 : customClasses.threadList),\n    onScroll: onScroll,\n    ref: setListElement,\n    tabIndex: 0\n  }, showEmptyStateIndicator ? React.createElement(EmptyStateIndicator, {\n    listType: threadList ? 'thread' : 'message'\n  }) : React.createElement(InfiniteScroll, _objectSpread({\n    className: 'str-chat__message-list-scroll',\n    \"data-testid\": 'reverse-infinite-scroll',\n    hasNextPage: props.hasMoreNewer,\n    hasPreviousPage: props.hasMore,\n    head: props.head,\n    isLoading: props.loadingMore,\n    loader: React.createElement(\"div\", {\n      className: 'str-chat__list__loading',\n      key: 'loading-indicator'\n    }, props.loadingMore && React.createElement(LoadingIndicator, {\n      size: 20\n    })),\n    loadNextPage: loadMoreNewer,\n    loadPreviousPage: loadMore,\n    threshold: loadMoreScrollThreshold\n  }, restInternalInfiniteScrollProps), React.createElement(\"ul\", {\n    className: 'str-chat__ul',\n    ref: setUlElement\n  }, elements), React.createElement(TypingIndicator, {\n    threadList: threadList\n  }), React.createElement(\"div\", {\n    key: 'bottom'\n  }))))), React.createElement(MessageListNotifications, {\n    hasNewMessages: hasNewMessages,\n    isMessageListScrolledToBottom: isMessageListScrolledToBottom,\n    isNotAtLatestMessageSet: hasMoreNewer,\n    MessageNotification: MessageNotification,\n    notifications: notifications,\n    scrollToBottom: scrollToBottomFromNotification,\n    threadList: threadList,\n    unreadCount: threadList ? undefined : channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages\n  }));\n};\n/**\n * The MessageList component renders a list of Messages.\n * It is a consumer of the following contexts:\n * - [ChannelStateContext](https://getstream.io/chat/docs/sdk/react/contexts/channel_state_context/)\n * - [ChannelActionContext](https://getstream.io/chat/docs/sdk/react/contexts/channel_action_context/)\n * - [ComponentContext](https://getstream.io/chat/docs/sdk/react/contexts/component_context/)\n * - [TypingContext](https://getstream.io/chat/docs/sdk/react/contexts/typing_context/)\n */\nexport const MessageList = props => {\n  const {\n    jumpToLatestMessage,\n    loadMore,\n    loadMoreNewer\n  } = useChannelActionContext('MessageList');\n  const _useChannelStateConte = useChannelStateContext('MessageList'),\n    {\n      members: membersPropToNotPass,\n      // eslint-disable-line @typescript-eslint/no-unused-vars\n      mutes: mutesPropToNotPass,\n      // eslint-disable-line @typescript-eslint/no-unused-vars\n      watchers: watchersPropToNotPass // eslint-disable-line @typescript-eslint/no-unused-vars\n    } = _useChannelStateConte,\n    restChannelStateContext = _objectWithoutProperties(_useChannelStateConte, _excluded2);\n  return React.createElement(MessageListWithContext, _objectSpread(_objectSpread({\n    jumpToLatestMessage: jumpToLatestMessage,\n    loadMore: loadMore,\n    loadMoreNewer: loadMoreNewer\n  }, restChannelStateContext), props));\n};","map":{"version":3,"names":["clsx","React","useEnrichedMessages","useMessageListElements","useScrollLocationLogic","useUnreadMessagesNotification","useMarkRead","MessageNotification","DefaultMessageNotification","MessageListNotifications","DefaultMessageListNotifications","UnreadMessagesNotification","DefaultUnreadMessagesNotification","useChannelActionContext","useChannelStateContext","DialogManagerProvider","useChatContext","useComponentContext","MessageListContextProvider","EmptyStateIndicator","DefaultEmptyStateIndicator","InfiniteScroll","LoadingIndicator","DefaultLoadingIndicator","defaultPinPermissions","MESSAGE_ACTIONS","TypingIndicator","DefaultTypingIndicator","MessageListMainPanel","DefaultMessageListMainPanel","defaultRenderMessages","useStableId","DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD","DEFAULT_NEXT_CHANNEL_PAGE_SIZE","MessageListWithContext","props","channel","channelUnreadUiState","disableDateSeparator","groupStyles","hasMoreNewer","headerPosition","hideDeletedMessages","hideNewMessageSeparator","highlightedMessageId","internalInfiniteScrollProps","threshold","loadMoreScrollThreshold","jumpToLatestMessage","Promise","resolve","loadMore","loadMoreCallback","loadMoreNewer","loadMoreNewerCallback","maxTimeBetweenGroupedMessages","messageActions","Object","keys","messageLimit","messages","noGroupByUser","notifications","pinPermissions","reactionDetailsSort","read","renderMessages","returnAllReadData","reviewProcessedMessage","showUnreadNotificationAlways","sortReactionDetails","sortReactions","suppressAutoscroll","threadList","unsafeHTML","restInternalInfiniteScrollProps","_objectWithoutProperties","_excluded","listElement","setListElement","useState","ulElement","setUlElement","customClasses","hasNewMessages","isMessageListScrolledToBottom","onScroll","scrollToBottom","wrapperRect","scrolledUpThreshold","show","showUnreadMessagesNotification","showAlways","unreadCount","unread_messages","messageListIsThread","wasMarkedUnread","first_unread_message_id","messageGroupStyles","enrichedMessages","elements","internalMessageProps","additionalMessageInputProps","closeReactionSelectorOnClick","customMessageActions","disableQuotedMessages","formatDate","getDeleteMessageErrorNotification","getFlagMessageErrorNotification","getFlagMessageSuccessNotification","getMarkMessageUnreadErrorNotification","getMarkMessageUnreadSuccessNotification","getMuteUserErrorNotification","getMuteUserSuccessNotification","getPinMessageErrorNotification","Message","messageListRect","onlySenderCanEdit","onMentionsClick","onMentionsHover","onUserClick","onUserHover","openThread","renderText","retrySendMessage","messageListClass","messageList","useCallback","scrollToBottomFromNotification","useLayoutEffect","element","querySelector","concat","scrollIntoView","block","id","showEmptyStateIndicator","length","dialogManagerId","createElement","value","className","ref","tabIndex","listType","_objectSpread","hasNextPage","hasPreviousPage","hasMore","head","isLoading","loadingMore","loader","key","size","loadNextPage","loadPreviousPage","isNotAtLatestMessageSet","undefined","MessageList","_useChannelStateConte","members","membersPropToNotPass","mutes","mutesPropToNotPass","watchers","watchersPropToNotPass","restChannelStateContext","_excluded2"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/MessageList/MessageList.js"],"sourcesContent":["import clsx from 'clsx';\nimport React from 'react';\nimport { useEnrichedMessages, useMessageListElements, useScrollLocationLogic, useUnreadMessagesNotification, } from './hooks/MessageList';\nimport { useMarkRead } from './hooks/useMarkRead';\nimport { MessageNotification as DefaultMessageNotification } from './MessageNotification';\nimport { MessageListNotifications as DefaultMessageListNotifications } from './MessageListNotifications';\nimport { UnreadMessagesNotification as DefaultUnreadMessagesNotification } from './UnreadMessagesNotification';\nimport { useChannelActionContext } from '../../context/ChannelActionContext';\nimport { useChannelStateContext } from '../../context/ChannelStateContext';\nimport { DialogManagerProvider } from '../../context';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { MessageListContextProvider } from '../../context/MessageListContext';\nimport { EmptyStateIndicator as DefaultEmptyStateIndicator } from '../EmptyStateIndicator';\nimport { InfiniteScroll } from '../InfiniteScrollPaginator/InfiniteScroll';\nimport { LoadingIndicator as DefaultLoadingIndicator } from '../Loading';\nimport { defaultPinPermissions, MESSAGE_ACTIONS } from '../Message/utils';\nimport { TypingIndicator as DefaultTypingIndicator } from '../TypingIndicator';\nimport { MessageListMainPanel as DefaultMessageListMainPanel } from './MessageListMainPanel';\nimport { defaultRenderMessages } from './renderMessages';\nimport { useStableId } from '../UtilityComponents/useStableId';\nimport { DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD, DEFAULT_NEXT_CHANNEL_PAGE_SIZE, } from '../../constants/limits';\nconst MessageListWithContext = (props) => {\n    const { channel, channelUnreadUiState, disableDateSeparator = false, groupStyles, hasMoreNewer = false, headerPosition, hideDeletedMessages = false, hideNewMessageSeparator = false, highlightedMessageId, internalInfiniteScrollProps: { threshold: loadMoreScrollThreshold = DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD, ...restInternalInfiniteScrollProps } = {}, jumpToLatestMessage = () => Promise.resolve(), loadMore: loadMoreCallback, loadMoreNewer: loadMoreNewerCallback, // @deprecated in favor of `channelCapabilities` - TODO: remove in next major release\n    maxTimeBetweenGroupedMessages, messageActions = Object.keys(MESSAGE_ACTIONS), messageLimit = DEFAULT_NEXT_CHANNEL_PAGE_SIZE, messages = [], noGroupByUser = false, notifications, pinPermissions = defaultPinPermissions, reactionDetailsSort, read, renderMessages = defaultRenderMessages, returnAllReadData = false, reviewProcessedMessage, showUnreadNotificationAlways, sortReactionDetails, sortReactions, suppressAutoscroll, threadList = false, unsafeHTML = false, } = props;\n    const [listElement, setListElement] = React.useState(null);\n    const [ulElement, setUlElement] = React.useState(null);\n    const { customClasses } = useChatContext('MessageList');\n    const { EmptyStateIndicator = DefaultEmptyStateIndicator, LoadingIndicator = DefaultLoadingIndicator, MessageListMainPanel = DefaultMessageListMainPanel, MessageListNotifications = DefaultMessageListNotifications, MessageNotification = DefaultMessageNotification, TypingIndicator = DefaultTypingIndicator, UnreadMessagesNotification = DefaultUnreadMessagesNotification, } = useComponentContext('MessageList');\n    const { hasNewMessages, isMessageListScrolledToBottom, onScroll, scrollToBottom, wrapperRect, } = useScrollLocationLogic({\n        hasMoreNewer,\n        listElement,\n        loadMoreScrollThreshold,\n        messages, // todo: is it correct to base the scroll logic on an array that does not contain date separators or intro?\n        scrolledUpThreshold: props.scrolledUpThreshold,\n        suppressAutoscroll,\n    });\n    const { show: showUnreadMessagesNotification } = useUnreadMessagesNotification({\n        isMessageListScrolledToBottom,\n        showAlways: !!showUnreadNotificationAlways,\n        unreadCount: channelUnreadUiState?.unread_messages,\n    });\n    useMarkRead({\n        isMessageListScrolledToBottom,\n        messageListIsThread: threadList,\n        wasMarkedUnread: !!channelUnreadUiState?.first_unread_message_id,\n    });\n    const { messageGroupStyles, messages: enrichedMessages } = useEnrichedMessages({\n        channel,\n        disableDateSeparator,\n        groupStyles,\n        headerPosition,\n        hideDeletedMessages,\n        hideNewMessageSeparator,\n        maxTimeBetweenGroupedMessages,\n        messages,\n        noGroupByUser,\n        reviewProcessedMessage,\n    });\n    const elements = useMessageListElements({\n        channelUnreadUiState,\n        enrichedMessages,\n        internalMessageProps: {\n            additionalMessageInputProps: props.additionalMessageInputProps,\n            closeReactionSelectorOnClick: props.closeReactionSelectorOnClick,\n            customMessageActions: props.customMessageActions,\n            disableQuotedMessages: props.disableQuotedMessages,\n            formatDate: props.formatDate,\n            getDeleteMessageErrorNotification: props.getDeleteMessageErrorNotification,\n            getFlagMessageErrorNotification: props.getFlagMessageErrorNotification,\n            getFlagMessageSuccessNotification: props.getFlagMessageSuccessNotification,\n            getMarkMessageUnreadErrorNotification: props.getMarkMessageUnreadErrorNotification,\n            getMarkMessageUnreadSuccessNotification: props.getMarkMessageUnreadSuccessNotification,\n            getMuteUserErrorNotification: props.getMuteUserErrorNotification,\n            getMuteUserSuccessNotification: props.getMuteUserSuccessNotification,\n            getPinMessageErrorNotification: props.getPinMessageErrorNotification,\n            Message: props.Message,\n            messageActions,\n            messageListRect: wrapperRect,\n            onlySenderCanEdit: props.onlySenderCanEdit,\n            onMentionsClick: props.onMentionsClick,\n            onMentionsHover: props.onMentionsHover,\n            onUserClick: props.onUserClick,\n            onUserHover: props.onUserHover,\n            openThread: props.openThread,\n            pinPermissions,\n            reactionDetailsSort,\n            renderText: props.renderText,\n            retrySendMessage: props.retrySendMessage,\n            sortReactionDetails,\n            sortReactions,\n            unsafeHTML,\n        },\n        messageGroupStyles,\n        read,\n        renderMessages,\n        returnAllReadData,\n        threadList,\n    });\n    const messageListClass = customClasses?.messageList || 'str-chat__list';\n    const loadMore = React.useCallback(() => {\n        if (loadMoreCallback) {\n            loadMoreCallback(messageLimit);\n        }\n    }, [loadMoreCallback, messageLimit]);\n    const loadMoreNewer = React.useCallback(() => {\n        if (loadMoreNewerCallback) {\n            loadMoreNewerCallback(messageLimit);\n        }\n    }, [loadMoreNewerCallback, messageLimit]);\n    const scrollToBottomFromNotification = React.useCallback(async () => {\n        if (hasMoreNewer) {\n            await jumpToLatestMessage();\n        }\n        else {\n            scrollToBottom();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [scrollToBottom, hasMoreNewer]);\n    React.useLayoutEffect(() => {\n        if (highlightedMessageId) {\n            const element = ulElement?.querySelector(`[data-message-id='${highlightedMessageId}']`);\n            element?.scrollIntoView({ block: 'center' });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [highlightedMessageId]);\n    const id = useStableId();\n    const showEmptyStateIndicator = elements.length === 0 && !threadList;\n    const dialogManagerId = threadList\n        ? `message-list-dialog-manager-thread-${id}`\n        : `message-list-dialog-manager-${id}`;\n    return (React.createElement(MessageListContextProvider, { value: { listElement, scrollToBottom } },\n        React.createElement(MessageListMainPanel, null,\n            React.createElement(DialogManagerProvider, { id: dialogManagerId },\n                !threadList && showUnreadMessagesNotification && (React.createElement(UnreadMessagesNotification, { unreadCount: channelUnreadUiState?.unread_messages })),\n                React.createElement(\"div\", { className: clsx(messageListClass, customClasses?.threadList), onScroll: onScroll, ref: setListElement, tabIndex: 0 }, showEmptyStateIndicator ? (React.createElement(EmptyStateIndicator, { listType: threadList ? 'thread' : 'message' })) : (React.createElement(InfiniteScroll, { className: 'str-chat__message-list-scroll', \"data-testid\": 'reverse-infinite-scroll', hasNextPage: props.hasMoreNewer, hasPreviousPage: props.hasMore, head: props.head, isLoading: props.loadingMore, loader: React.createElement(\"div\", { className: 'str-chat__list__loading', key: 'loading-indicator' }, props.loadingMore && React.createElement(LoadingIndicator, { size: 20 })), loadNextPage: loadMoreNewer, loadPreviousPage: loadMore, threshold: loadMoreScrollThreshold, ...restInternalInfiniteScrollProps },\n                    React.createElement(\"ul\", { className: 'str-chat__ul', ref: setUlElement }, elements),\n                    React.createElement(TypingIndicator, { threadList: threadList }),\n                    React.createElement(\"div\", { key: 'bottom' })))))),\n        React.createElement(MessageListNotifications, { hasNewMessages: hasNewMessages, isMessageListScrolledToBottom: isMessageListScrolledToBottom, isNotAtLatestMessageSet: hasMoreNewer, MessageNotification: MessageNotification, notifications: notifications, scrollToBottom: scrollToBottomFromNotification, threadList: threadList, unreadCount: threadList ? undefined : channelUnreadUiState?.unread_messages })));\n};\n/**\n * The MessageList component renders a list of Messages.\n * It is a consumer of the following contexts:\n * - [ChannelStateContext](https://getstream.io/chat/docs/sdk/react/contexts/channel_state_context/)\n * - [ChannelActionContext](https://getstream.io/chat/docs/sdk/react/contexts/channel_action_context/)\n * - [ComponentContext](https://getstream.io/chat/docs/sdk/react/contexts/component_context/)\n * - [TypingContext](https://getstream.io/chat/docs/sdk/react/contexts/typing_context/)\n */\nexport const MessageList = (props) => {\n    const { jumpToLatestMessage, loadMore, loadMoreNewer } = useChannelActionContext('MessageList');\n    const { members: membersPropToNotPass, // eslint-disable-line @typescript-eslint/no-unused-vars\n    mutes: mutesPropToNotPass, // eslint-disable-line @typescript-eslint/no-unused-vars\n    watchers: watchersPropToNotPass, // eslint-disable-line @typescript-eslint/no-unused-vars\n    ...restChannelStateContext } = useChannelStateContext('MessageList');\n    return (React.createElement(MessageListWithContext, { jumpToLatestMessage: jumpToLatestMessage, loadMore: loadMore, loadMoreNewer: loadMoreNewer, ...restChannelStateContext, ...props }));\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}