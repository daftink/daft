{"ast":null,"code":"import _objectSpread from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { nanoid } from 'nanoid';\nimport { StateStore } from 'stream-chat';\n/**\n * Keeps a map of Dialog objects.\n * Dialog can be controlled via `Dialog` object retrieved using `useDialog()` hook.\n * The hook returns an object with the following API:\n *\n * - `dialog.open()` - opens the dialog\n * - `dialog.close()` - closes the dialog\n * - `dialog.toggle()` - toggles the dialog open state. Accepts boolean argument closeAll. If enabled closes any other dialog that would be open.\n * - `dialog.remove()` - removes the dialog object reference from the state (primarily for cleanup purposes)\n */\nexport class DialogManager {\n  constructor() {\n    let {\n      id\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.state = new StateStore({\n      dialogsById: {}\n    });\n    this.id = id !== null && id !== void 0 ? id : nanoid();\n  }\n  get openDialogCount() {\n    return Object.values(this.state.getLatestValue().dialogsById).reduce((count, dialog) => {\n      if (dialog.isOpen) return count + 1;\n      return count;\n    }, 0);\n  }\n  getOrCreate(_ref) {\n    var _this = this;\n    let {\n      id\n    } = _ref;\n    let dialog = this.state.getLatestValue().dialogsById[id];\n    if (!dialog) {\n      dialog = {\n        close: () => {\n          this.close(id);\n        },\n        id,\n        isOpen: false,\n        open: () => {\n          this.open({\n            id\n          });\n        },\n        removalTimeout: undefined,\n        remove: () => {\n          this.remove(id);\n        },\n        toggle: function () {\n          let closeAll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n          _this.toggle({\n            id\n          }, closeAll);\n        }\n      };\n      this.state.next(current => _objectSpread(_objectSpread({}, current), {\n        dialogsById: _objectSpread(_objectSpread({}, current.dialogsById), {}, {\n          [id]: dialog\n        })\n      }));\n    }\n    if (dialog.removalTimeout) {\n      clearTimeout(dialog.removalTimeout);\n      this.state.next(current => _objectSpread(_objectSpread({}, current), {\n        dialogsById: _objectSpread(_objectSpread({}, current.dialogsById), {}, {\n          [id]: _objectSpread(_objectSpread({}, dialog), {}, {\n            removalTimeout: undefined\n          })\n        })\n      }));\n    }\n    return dialog;\n  }\n  open(params, closeRest) {\n    const dialog = this.getOrCreate(params);\n    if (dialog.isOpen) return;\n    if (closeRest) {\n      this.closeAll();\n    }\n    this.state.next(current => _objectSpread(_objectSpread({}, current), {}, {\n      dialogsById: _objectSpread(_objectSpread({}, current.dialogsById), {}, {\n        [dialog.id]: _objectSpread(_objectSpread({}, dialog), {}, {\n          isOpen: true\n        })\n      })\n    }));\n  }\n  close(id) {\n    const dialog = this.state.getLatestValue().dialogsById[id];\n    if (!(dialog !== null && dialog !== void 0 && dialog.isOpen)) return;\n    this.state.next(current => _objectSpread(_objectSpread({}, current), {}, {\n      dialogsById: _objectSpread(_objectSpread({}, current.dialogsById), {}, {\n        [dialog.id]: _objectSpread(_objectSpread({}, dialog), {}, {\n          isOpen: false\n        })\n      })\n    }));\n  }\n  closeAll() {\n    Object.values(this.state.getLatestValue().dialogsById).forEach(dialog => dialog.close());\n  }\n  toggle(params) {\n    var _this$state$getLatest;\n    let closeAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if ((_this$state$getLatest = this.state.getLatestValue().dialogsById[params.id]) !== null && _this$state$getLatest !== void 0 && _this$state$getLatest.isOpen) {\n      this.close(params.id);\n    } else {\n      this.open(params, closeAll);\n    }\n  }\n  remove(id) {\n    const state = this.state.getLatestValue();\n    const dialog = state.dialogsById[id];\n    if (!dialog) return;\n    if (dialog.removalTimeout) {\n      clearTimeout(dialog.removalTimeout);\n    }\n    this.state.next(current => {\n      const newDialogs = _objectSpread({}, current.dialogsById);\n      delete newDialogs[id];\n      return _objectSpread(_objectSpread({}, current), {}, {\n        dialogsById: newDialogs\n      });\n    });\n  }\n  /**\n   * Marks the dialog state as unused. If the dialog id is referenced again quickly,\n   * the state will not be removed. Otherwise, the state will be removed after\n   * a short timeout.\n   */\n  markForRemoval(id) {\n    const dialog = this.state.getLatestValue().dialogsById[id];\n    if (!dialog) {\n      return;\n    }\n    this.state.next(current => _objectSpread(_objectSpread({}, current), {}, {\n      dialogsById: _objectSpread(_objectSpread({}, current.dialogsById), {}, {\n        [id]: _objectSpread(_objectSpread({}, dialog), {}, {\n          removalTimeout: setTimeout(() => {\n            this.remove(id);\n          }, 16)\n        })\n      })\n    }));\n  }\n}","map":{"version":3,"names":["nanoid","StateStore","DialogManager","constructor","id","arguments","length","undefined","state","dialogsById","openDialogCount","Object","values","getLatestValue","reduce","count","dialog","isOpen","getOrCreate","_ref","_this","close","open","removalTimeout","remove","toggle","closeAll","next","current","_objectSpread","clearTimeout","params","closeRest","forEach","_this$state$getLatest","newDialogs","markForRemoval","setTimeout"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/Dialog/DialogManager.js"],"sourcesContent":["import { nanoid } from 'nanoid';\nimport { StateStore } from 'stream-chat';\n/**\n * Keeps a map of Dialog objects.\n * Dialog can be controlled via `Dialog` object retrieved using `useDialog()` hook.\n * The hook returns an object with the following API:\n *\n * - `dialog.open()` - opens the dialog\n * - `dialog.close()` - closes the dialog\n * - `dialog.toggle()` - toggles the dialog open state. Accepts boolean argument closeAll. If enabled closes any other dialog that would be open.\n * - `dialog.remove()` - removes the dialog object reference from the state (primarily for cleanup purposes)\n */\nexport class DialogManager {\n    constructor({ id } = {}) {\n        this.state = new StateStore({\n            dialogsById: {},\n        });\n        this.id = id ?? nanoid();\n    }\n    get openDialogCount() {\n        return Object.values(this.state.getLatestValue().dialogsById).reduce((count, dialog) => {\n            if (dialog.isOpen)\n                return count + 1;\n            return count;\n        }, 0);\n    }\n    getOrCreate({ id }) {\n        let dialog = this.state.getLatestValue().dialogsById[id];\n        if (!dialog) {\n            dialog = {\n                close: () => {\n                    this.close(id);\n                },\n                id,\n                isOpen: false,\n                open: () => {\n                    this.open({ id });\n                },\n                removalTimeout: undefined,\n                remove: () => {\n                    this.remove(id);\n                },\n                toggle: (closeAll = false) => {\n                    this.toggle({ id }, closeAll);\n                },\n            };\n            this.state.next((current) => ({\n                ...current,\n                ...{ dialogsById: { ...current.dialogsById, [id]: dialog } },\n            }));\n        }\n        if (dialog.removalTimeout) {\n            clearTimeout(dialog.removalTimeout);\n            this.state.next((current) => ({\n                ...current,\n                ...{\n                    dialogsById: {\n                        ...current.dialogsById,\n                        [id]: {\n                            ...dialog,\n                            removalTimeout: undefined,\n                        },\n                    },\n                },\n            }));\n        }\n        return dialog;\n    }\n    open(params, closeRest) {\n        const dialog = this.getOrCreate(params);\n        if (dialog.isOpen)\n            return;\n        if (closeRest) {\n            this.closeAll();\n        }\n        this.state.next((current) => ({\n            ...current,\n            dialogsById: { ...current.dialogsById, [dialog.id]: { ...dialog, isOpen: true } },\n        }));\n    }\n    close(id) {\n        const dialog = this.state.getLatestValue().dialogsById[id];\n        if (!dialog?.isOpen)\n            return;\n        this.state.next((current) => ({\n            ...current,\n            dialogsById: { ...current.dialogsById, [dialog.id]: { ...dialog, isOpen: false } },\n        }));\n    }\n    closeAll() {\n        Object.values(this.state.getLatestValue().dialogsById).forEach((dialog) => dialog.close());\n    }\n    toggle(params, closeAll = false) {\n        if (this.state.getLatestValue().dialogsById[params.id]?.isOpen) {\n            this.close(params.id);\n        }\n        else {\n            this.open(params, closeAll);\n        }\n    }\n    remove(id) {\n        const state = this.state.getLatestValue();\n        const dialog = state.dialogsById[id];\n        if (!dialog)\n            return;\n        if (dialog.removalTimeout) {\n            clearTimeout(dialog.removalTimeout);\n        }\n        this.state.next((current) => {\n            const newDialogs = { ...current.dialogsById };\n            delete newDialogs[id];\n            return {\n                ...current,\n                dialogsById: newDialogs,\n            };\n        });\n    }\n    /**\n     * Marks the dialog state as unused. If the dialog id is referenced again quickly,\n     * the state will not be removed. Otherwise, the state will be removed after\n     * a short timeout.\n     */\n    markForRemoval(id) {\n        const dialog = this.state.getLatestValue().dialogsById[id];\n        if (!dialog) {\n            return;\n        }\n        this.state.next((current) => ({\n            ...current,\n            dialogsById: {\n                ...current.dialogsById,\n                [id]: {\n                    ...dialog,\n                    removalTimeout: setTimeout(() => {\n                        this.remove(id);\n                    }, 16),\n                },\n            },\n        }));\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}