{"ast":null,"code":"import { isUserMuted, validateAndGetMessage } from '../utils';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nimport { useChatContext } from '../../../context/ChatContext';\nimport { useTranslationContext } from '../../../context/TranslationContext';\nexport const missingUseMuteHandlerParamsWarning = 'useMuteHandler was called but it is missing one or more necessary parameter.';\nexport const useMuteHandler = function (message) {\n  let notifications = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    mutes\n  } = useChannelStateContext('useMuteHandler');\n  const {\n    client\n  } = useChatContext('useMuteHandler');\n  const {\n    t\n  } = useTranslationContext('useMuteHandler');\n  return async event => {\n    event.preventDefault();\n    const {\n      getErrorNotification,\n      getSuccessNotification,\n      notify\n    } = notifications;\n    if (!t || !(message !== null && message !== void 0 && message.user) || !notify || !client) {\n      console.warn(missingUseMuteHandlerParamsWarning);\n      return;\n    }\n    if (!isUserMuted(message, mutes)) {\n      try {\n        await client.muteUser(message.user.id);\n        const successMessage = getSuccessNotification && validateAndGetMessage(getSuccessNotification, [message.user]);\n        notify(successMessage || t(\"{{ user }} has been muted\", {\n          user: message.user.name || message.user.id\n        }), 'success');\n      } catch (e) {\n        const errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message.user]);\n        notify(errorMessage || t('Error muting a user ...'), 'error');\n      }\n    } else {\n      try {\n        await client.unmuteUser(message.user.id);\n        const fallbackMessage = t(\"{{ user }} has been unmuted\", {\n          user: message.user.name || message.user.id\n        });\n        const successMessage = getSuccessNotification && validateAndGetMessage(getSuccessNotification, [message.user]) || fallbackMessage;\n        if (typeof successMessage === 'string') {\n          notify(successMessage, 'success');\n        }\n      } catch (e) {\n        const errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message.user]) || t('Error unmuting a user ...');\n        if (typeof errorMessage === 'string') {\n          notify(errorMessage, 'error');\n        }\n      }\n    }\n  };\n};","map":{"version":3,"names":["isUserMuted","validateAndGetMessage","useChannelStateContext","useChatContext","useTranslationContext","missingUseMuteHandlerParamsWarning","useMuteHandler","message","notifications","arguments","length","undefined","mutes","client","t","event","preventDefault","getErrorNotification","getSuccessNotification","notify","user","console","warn","muteUser","id","successMessage","name","e","errorMessage","unmuteUser","fallbackMessage"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/Message/hooks/useMuteHandler.js"],"sourcesContent":["import { isUserMuted, validateAndGetMessage } from '../utils';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nimport { useChatContext } from '../../../context/ChatContext';\nimport { useTranslationContext } from '../../../context/TranslationContext';\nexport const missingUseMuteHandlerParamsWarning = 'useMuteHandler was called but it is missing one or more necessary parameter.';\nexport const useMuteHandler = (message, notifications = {}) => {\n    const { mutes } = useChannelStateContext('useMuteHandler');\n    const { client } = useChatContext('useMuteHandler');\n    const { t } = useTranslationContext('useMuteHandler');\n    return async (event) => {\n        event.preventDefault();\n        const { getErrorNotification, getSuccessNotification, notify } = notifications;\n        if (!t || !message?.user || !notify || !client) {\n            console.warn(missingUseMuteHandlerParamsWarning);\n            return;\n        }\n        if (!isUserMuted(message, mutes)) {\n            try {\n                await client.muteUser(message.user.id);\n                const successMessage = getSuccessNotification &&\n                    validateAndGetMessage(getSuccessNotification, [message.user]);\n                notify(successMessage ||\n                    t(`{{ user }} has been muted`, {\n                        user: message.user.name || message.user.id,\n                    }), 'success');\n            }\n            catch (e) {\n                const errorMessage = getErrorNotification &&\n                    validateAndGetMessage(getErrorNotification, [message.user]);\n                notify(errorMessage || t('Error muting a user ...'), 'error');\n            }\n        }\n        else {\n            try {\n                await client.unmuteUser(message.user.id);\n                const fallbackMessage = t(`{{ user }} has been unmuted`, {\n                    user: message.user.name || message.user.id,\n                });\n                const successMessage = (getSuccessNotification &&\n                    validateAndGetMessage(getSuccessNotification, [message.user])) ||\n                    fallbackMessage;\n                if (typeof successMessage === 'string') {\n                    notify(successMessage, 'success');\n                }\n            }\n            catch (e) {\n                const errorMessage = (getErrorNotification &&\n                    validateAndGetMessage(getErrorNotification, [message.user])) ||\n                    t('Error unmuting a user ...');\n                if (typeof errorMessage === 'string') {\n                    notify(errorMessage, 'error');\n                }\n            }\n        }\n    };\n};\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,qBAAqB,QAAQ,UAAU;AAC7D,SAASC,sBAAsB,QAAQ,sCAAsC;AAC7E,SAASC,cAAc,QAAQ,8BAA8B;AAC7D,SAASC,qBAAqB,QAAQ,qCAAqC;AAC3E,OAAO,MAAMC,kCAAkC,GAAG,8EAA8E;AAChI,OAAO,MAAMC,cAAc,GAAG,SAAAA,CAACC,OAAO,EAAyB;EAAA,IAAvBC,aAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EACtD,MAAM;IAAEG;EAAM,CAAC,GAAGV,sBAAsB,CAAC,gBAAgB,CAAC;EAC1D,MAAM;IAAEW;EAAO,CAAC,GAAGV,cAAc,CAAC,gBAAgB,CAAC;EACnD,MAAM;IAAEW;EAAE,CAAC,GAAGV,qBAAqB,CAAC,gBAAgB,CAAC;EACrD,OAAO,MAAOW,KAAK,IAAK;IACpBA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB,MAAM;MAAEC,oBAAoB;MAAEC,sBAAsB;MAAEC;IAAO,CAAC,GAAGX,aAAa;IAC9E,IAAI,CAACM,CAAC,IAAI,EAACP,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEa,IAAI,KAAI,CAACD,MAAM,IAAI,CAACN,MAAM,EAAE;MAC5CQ,OAAO,CAACC,IAAI,CAACjB,kCAAkC,CAAC;MAChD;IACJ;IACA,IAAI,CAACL,WAAW,CAACO,OAAO,EAAEK,KAAK,CAAC,EAAE;MAC9B,IAAI;QACA,MAAMC,MAAM,CAACU,QAAQ,CAAChB,OAAO,CAACa,IAAI,CAACI,EAAE,CAAC;QACtC,MAAMC,cAAc,GAAGP,sBAAsB,IACzCjB,qBAAqB,CAACiB,sBAAsB,EAAE,CAACX,OAAO,CAACa,IAAI,CAAC,CAAC;QACjED,MAAM,CAACM,cAAc,IACjBX,CAAC,8BAA8B;UAC3BM,IAAI,EAAEb,OAAO,CAACa,IAAI,CAACM,IAAI,IAAInB,OAAO,CAACa,IAAI,CAACI;QAC5C,CAAC,CAAC,EAAE,SAAS,CAAC;MACtB,CAAC,CACD,OAAOG,CAAC,EAAE;QACN,MAAMC,YAAY,GAAGX,oBAAoB,IACrChB,qBAAqB,CAACgB,oBAAoB,EAAE,CAACV,OAAO,CAACa,IAAI,CAAC,CAAC;QAC/DD,MAAM,CAACS,YAAY,IAAId,CAAC,CAAC,yBAAyB,CAAC,EAAE,OAAO,CAAC;MACjE;IACJ,CAAC,MACI;MACD,IAAI;QACA,MAAMD,MAAM,CAACgB,UAAU,CAACtB,OAAO,CAACa,IAAI,CAACI,EAAE,CAAC;QACxC,MAAMM,eAAe,GAAGhB,CAAC,gCAAgC;UACrDM,IAAI,EAAEb,OAAO,CAACa,IAAI,CAACM,IAAI,IAAInB,OAAO,CAACa,IAAI,CAACI;QAC5C,CAAC,CAAC;QACF,MAAMC,cAAc,GAAIP,sBAAsB,IAC1CjB,qBAAqB,CAACiB,sBAAsB,EAAE,CAACX,OAAO,CAACa,IAAI,CAAC,CAAC,IAC7DU,eAAe;QACnB,IAAI,OAAOL,cAAc,KAAK,QAAQ,EAAE;UACpCN,MAAM,CAACM,cAAc,EAAE,SAAS,CAAC;QACrC;MACJ,CAAC,CACD,OAAOE,CAAC,EAAE;QACN,MAAMC,YAAY,GAAIX,oBAAoB,IACtChB,qBAAqB,CAACgB,oBAAoB,EAAE,CAACV,OAAO,CAACa,IAAI,CAAC,CAAC,IAC3DN,CAAC,CAAC,2BAA2B,CAAC;QAClC,IAAI,OAAOc,YAAY,KAAK,QAAQ,EAAE;UAClCT,MAAM,CAACS,YAAY,EAAE,OAAO,CAAC;QACjC;MACJ;IACJ;EACJ,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}