{"ast":null,"code":"import React from 'react';\nimport { ConnectionStatus } from './ConnectionStatus';\nimport { CustomNotification } from './CustomNotification';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { useNotifications } from '../Notifications/hooks/useNotifications';\nconst ClientNotifications = () => {\n  const clientNotifications = useNotifications();\n  const {\n    t\n  } = useTranslationContext();\n  return React.createElement(React.Fragment, null, clientNotifications.map(notification => React.createElement(CustomNotification, {\n    active: true,\n    key: notification.id,\n    type: notification.severity\n  }, t('translationBuilderTopic/notification', {\n    notification\n  }))));\n};\nexport const MessageListNotifications = props => {\n  const {\n    hasNewMessages,\n    isMessageListScrolledToBottom,\n    isNotAtLatestMessageSet,\n    MessageNotification,\n    notifications,\n    scrollToBottom,\n    threadList,\n    unreadCount\n  } = props;\n  const {\n    t\n  } = useTranslationContext('MessageListNotifications');\n  return React.createElement(\"div\", {\n    className: 'str-chat__list-notifications'\n  }, notifications.map(notification => React.createElement(CustomNotification, {\n    active: true,\n    key: notification.id,\n    type: notification.type\n  }, notification.text)), React.createElement(ClientNotifications, null), React.createElement(ConnectionStatus, null), React.createElement(MessageNotification, {\n    isMessageListScrolledToBottom: isMessageListScrolledToBottom,\n    onClick: scrollToBottom,\n    showNotification: hasNewMessages || isNotAtLatestMessageSet,\n    threadList: threadList,\n    unreadCount: unreadCount\n  }, isNotAtLatestMessageSet ? t('Latest Messages') : t('New Messages!')));\n};","map":{"version":3,"names":["React","ConnectionStatus","CustomNotification","useTranslationContext","useNotifications","ClientNotifications","clientNotifications","t","createElement","Fragment","map","notification","active","key","id","type","severity","MessageListNotifications","props","hasNewMessages","isMessageListScrolledToBottom","isNotAtLatestMessageSet","MessageNotification","notifications","scrollToBottom","threadList","unreadCount","className","text","onClick","showNotification"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/MessageList/MessageListNotifications.js"],"sourcesContent":["import React from 'react';\nimport { ConnectionStatus } from './ConnectionStatus';\nimport { CustomNotification } from './CustomNotification';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { useNotifications } from '../Notifications/hooks/useNotifications';\nconst ClientNotifications = () => {\n    const clientNotifications = useNotifications();\n    const { t } = useTranslationContext();\n    return (React.createElement(React.Fragment, null, clientNotifications.map((notification) => (React.createElement(CustomNotification, { active: true, key: notification.id, type: notification.severity }, t('translationBuilderTopic/notification', { notification }))))));\n};\nexport const MessageListNotifications = (props) => {\n    const { hasNewMessages, isMessageListScrolledToBottom, isNotAtLatestMessageSet, MessageNotification, notifications, scrollToBottom, threadList, unreadCount, } = props;\n    const { t } = useTranslationContext('MessageListNotifications');\n    return (React.createElement(\"div\", { className: 'str-chat__list-notifications' },\n        notifications.map((notification) => (React.createElement(CustomNotification, { active: true, key: notification.id, type: notification.type }, notification.text))),\n        React.createElement(ClientNotifications, null),\n        React.createElement(ConnectionStatus, null),\n        React.createElement(MessageNotification, { isMessageListScrolledToBottom: isMessageListScrolledToBottom, onClick: scrollToBottom, showNotification: hasNewMessages || isNotAtLatestMessageSet, threadList: threadList, unreadCount: unreadCount }, isNotAtLatestMessageSet ? t('Latest Messages') : t('New Messages!'))));\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,SAASC,qBAAqB,QAAQ,kCAAkC;AACxE,SAASC,gBAAgB,QAAQ,yCAAyC;AAC1E,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAC9B,MAAMC,mBAAmB,GAAGF,gBAAgB,CAAC,CAAC;EAC9C,MAAM;IAAEG;EAAE,CAAC,GAAGJ,qBAAqB,CAAC,CAAC;EACrC,OAAQH,KAAK,CAACQ,aAAa,CAACR,KAAK,CAACS,QAAQ,EAAE,IAAI,EAAEH,mBAAmB,CAACI,GAAG,CAAEC,YAAY,IAAMX,KAAK,CAACQ,aAAa,CAACN,kBAAkB,EAAE;IAAEU,MAAM,EAAE,IAAI;IAAEC,GAAG,EAAEF,YAAY,CAACG,EAAE;IAAEC,IAAI,EAAEJ,YAAY,CAACK;EAAS,CAAC,EAAET,CAAC,CAAC,sCAAsC,EAAE;IAAEI;EAAa,CAAC,CAAC,CAAE,CAAC,CAAC;AAC7Q,CAAC;AACD,OAAO,MAAMM,wBAAwB,GAAIC,KAAK,IAAK;EAC/C,MAAM;IAAEC,cAAc;IAAEC,6BAA6B;IAAEC,uBAAuB;IAAEC,mBAAmB;IAAEC,aAAa;IAAEC,cAAc;IAAEC,UAAU;IAAEC;EAAa,CAAC,GAAGR,KAAK;EACtK,MAAM;IAAEX;EAAE,CAAC,GAAGJ,qBAAqB,CAAC,0BAA0B,CAAC;EAC/D,OAAQH,KAAK,CAACQ,aAAa,CAAC,KAAK,EAAE;IAAEmB,SAAS,EAAE;EAA+B,CAAC,EAC5EJ,aAAa,CAACb,GAAG,CAAEC,YAAY,IAAMX,KAAK,CAACQ,aAAa,CAACN,kBAAkB,EAAE;IAAEU,MAAM,EAAE,IAAI;IAAEC,GAAG,EAAEF,YAAY,CAACG,EAAE;IAAEC,IAAI,EAAEJ,YAAY,CAACI;EAAK,CAAC,EAAEJ,YAAY,CAACiB,IAAI,CAAE,CAAC,EAClK5B,KAAK,CAACQ,aAAa,CAACH,mBAAmB,EAAE,IAAI,CAAC,EAC9CL,KAAK,CAACQ,aAAa,CAACP,gBAAgB,EAAE,IAAI,CAAC,EAC3CD,KAAK,CAACQ,aAAa,CAACc,mBAAmB,EAAE;IAAEF,6BAA6B,EAAEA,6BAA6B;IAAES,OAAO,EAAEL,cAAc;IAAEM,gBAAgB,EAAEX,cAAc,IAAIE,uBAAuB;IAAEI,UAAU,EAAEA,UAAU;IAAEC,WAAW,EAAEA;EAAY,CAAC,EAAEL,uBAAuB,GAAGd,CAAC,CAAC,iBAAiB,CAAC,GAAGA,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;AAChU,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}