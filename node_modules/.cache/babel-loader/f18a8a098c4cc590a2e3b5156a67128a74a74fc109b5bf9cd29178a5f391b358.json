{"ast":null,"code":"import _objectSpread from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { useEffect } from 'react';\nimport { useChatContext } from '../../../context/ChatContext';\nexport const useChannelUpdatedListener = (setChannels, customHandler, forceUpdate) => {\n  const {\n    client\n  } = useChatContext('useChannelUpdatedListener');\n  useEffect(() => {\n    const handleEvent = event => {\n      setChannels(channels => {\n        const channelIndex = channels.findIndex(channel => {\n          var _event$channel;\n          return channel.cid === ((_event$channel = event.channel) === null || _event$channel === void 0 ? void 0 : _event$channel.cid);\n        });\n        if (channelIndex > -1 && event.channel) {\n          var _event$channel$hidden, _event$channel2, _newChannels$channelI, _event$channel$own_ca, _event$channel3, _newChannels$channelI2;\n          const newChannels = channels;\n          newChannels[channelIndex].data = _objectSpread(_objectSpread({}, event.channel), {}, {\n            hidden: (_event$channel$hidden = (_event$channel2 = event.channel) === null || _event$channel2 === void 0 ? void 0 : _event$channel2.hidden) !== null && _event$channel$hidden !== void 0 ? _event$channel$hidden : (_newChannels$channelI = newChannels[channelIndex].data) === null || _newChannels$channelI === void 0 ? void 0 : _newChannels$channelI.hidden,\n            own_capabilities: (_event$channel$own_ca = (_event$channel3 = event.channel) === null || _event$channel3 === void 0 ? void 0 : _event$channel3.own_capabilities) !== null && _event$channel$own_ca !== void 0 ? _event$channel$own_ca : (_newChannels$channelI2 = newChannels[channelIndex].data) === null || _newChannels$channelI2 === void 0 ? void 0 : _newChannels$channelI2.own_capabilities\n          });\n          return [...newChannels];\n        }\n        return channels;\n      });\n      if (forceUpdate) {\n        forceUpdate();\n      }\n      if (customHandler && typeof customHandler === 'function') {\n        customHandler(setChannels, event);\n      }\n    };\n    client.on('channel.updated', handleEvent);\n    return () => {\n      client.off('channel.updated', handleEvent);\n    };\n  }, [client, customHandler, forceUpdate, setChannels]);\n};","map":{"version":3,"names":["useEffect","useChatContext","useChannelUpdatedListener","setChannels","customHandler","forceUpdate","client","handleEvent","event","channels","channelIndex","findIndex","channel","_event$channel","cid","_event$channel$hidden","_event$channel2","_newChannels$channelI","_event$channel$own_ca","_event$channel3","_newChannels$channelI2","newChannels","data","_objectSpread","hidden","own_capabilities","on","off"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/ChannelList/hooks/useChannelUpdatedListener.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { useChatContext } from '../../../context/ChatContext';\nexport const useChannelUpdatedListener = (setChannels, customHandler, forceUpdate) => {\n    const { client } = useChatContext('useChannelUpdatedListener');\n    useEffect(() => {\n        const handleEvent = (event) => {\n            setChannels((channels) => {\n                const channelIndex = channels.findIndex((channel) => channel.cid === event.channel?.cid);\n                if (channelIndex > -1 && event.channel) {\n                    const newChannels = channels;\n                    newChannels[channelIndex].data = {\n                        ...event.channel,\n                        hidden: event.channel?.hidden ?? newChannels[channelIndex].data?.hidden,\n                        own_capabilities: event.channel?.own_capabilities ??\n                            newChannels[channelIndex].data?.own_capabilities,\n                    };\n                    return [...newChannels];\n                }\n                return channels;\n            });\n            if (forceUpdate) {\n                forceUpdate();\n            }\n            if (customHandler && typeof customHandler === 'function') {\n                customHandler(setChannels, event);\n            }\n        };\n        client.on('channel.updated', handleEvent);\n        return () => {\n            client.off('channel.updated', handleEvent);\n        };\n    }, [client, customHandler, forceUpdate, setChannels]);\n};\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,cAAc,QAAQ,8BAA8B;AAC7D,OAAO,MAAMC,yBAAyB,GAAGA,CAACC,WAAW,EAAEC,aAAa,EAAEC,WAAW,KAAK;EAClF,MAAM;IAAEC;EAAO,CAAC,GAAGL,cAAc,CAAC,2BAA2B,CAAC;EAC9DD,SAAS,CAAC,MAAM;IACZ,MAAMO,WAAW,GAAIC,KAAK,IAAK;MAC3BL,WAAW,CAAEM,QAAQ,IAAK;QACtB,MAAMC,YAAY,GAAGD,QAAQ,CAACE,SAAS,CAAEC,OAAO;UAAA,IAAAC,cAAA;UAAA,OAAKD,OAAO,CAACE,GAAG,OAAAD,cAAA,GAAKL,KAAK,CAACI,OAAO,cAAAC,cAAA,uBAAbA,cAAA,CAAeC,GAAG;QAAA,EAAC;QACxF,IAAIJ,YAAY,GAAG,CAAC,CAAC,IAAIF,KAAK,CAACI,OAAO,EAAE;UAAA,IAAAG,qBAAA,EAAAC,eAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,eAAA,EAAAC,sBAAA;UACpC,MAAMC,WAAW,GAAGZ,QAAQ;UAC5BY,WAAW,CAACX,YAAY,CAAC,CAACY,IAAI,GAAAC,aAAA,CAAAA,aAAA,KACvBf,KAAK,CAACI,OAAO;YAChBY,MAAM,GAAAT,qBAAA,IAAAC,eAAA,GAAER,KAAK,CAACI,OAAO,cAAAI,eAAA,uBAAbA,eAAA,CAAeQ,MAAM,cAAAT,qBAAA,cAAAA,qBAAA,IAAAE,qBAAA,GAAII,WAAW,CAACX,YAAY,CAAC,CAACY,IAAI,cAAAL,qBAAA,uBAA9BA,qBAAA,CAAgCO,MAAM;YACvEC,gBAAgB,GAAAP,qBAAA,IAAAC,eAAA,GAAEX,KAAK,CAACI,OAAO,cAAAO,eAAA,uBAAbA,eAAA,CAAeM,gBAAgB,cAAAP,qBAAA,cAAAA,qBAAA,IAAAE,sBAAA,GAC7CC,WAAW,CAACX,YAAY,CAAC,CAACY,IAAI,cAAAF,sBAAA,uBAA9BA,sBAAA,CAAgCK;UAAgB,EACvD;UACD,OAAO,CAAC,GAAGJ,WAAW,CAAC;QAC3B;QACA,OAAOZ,QAAQ;MACnB,CAAC,CAAC;MACF,IAAIJ,WAAW,EAAE;QACbA,WAAW,CAAC,CAAC;MACjB;MACA,IAAID,aAAa,IAAI,OAAOA,aAAa,KAAK,UAAU,EAAE;QACtDA,aAAa,CAACD,WAAW,EAAEK,KAAK,CAAC;MACrC;IACJ,CAAC;IACDF,MAAM,CAACoB,EAAE,CAAC,iBAAiB,EAAEnB,WAAW,CAAC;IACzC,OAAO,MAAM;MACTD,MAAM,CAACqB,GAAG,CAAC,iBAAiB,EAAEpB,WAAW,CAAC;IAC9C,CAAC;EACL,CAAC,EAAE,CAACD,MAAM,EAAEF,aAAa,EAAEC,WAAW,EAAEF,WAAW,CAAC,CAAC;AACzD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}