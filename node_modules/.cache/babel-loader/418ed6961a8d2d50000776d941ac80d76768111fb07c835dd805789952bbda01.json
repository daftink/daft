{"ast":null,"code":"import _objectSpread from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport React, { useCallback } from 'react';\nimport clsx from 'clsx';\nimport { Timestamp } from '../../Message/Timestamp';\nimport { Avatar } from '../../Avatar';\nimport { Icon } from '../icons';\nimport { UnreadCountBadge } from '../UnreadCountBadge';\nimport { useChannelPreviewInfo } from '../../ChannelPreview';\nimport { useChatContext } from '../../../context';\nimport { useThreadsViewContext } from '../../ChatView';\nimport { useThreadListItemContext } from './ThreadListItem';\nimport { useStateStore } from '../../../store';\n/**\n * TODO:\n * - maybe hover state? ask design\n */\nexport const attachmentTypeIconMap = {\n  audio: '🔈',\n  file: '📄',\n  image: '📷',\n  video: '🎥',\n  voiceRecording: '🎙️'\n};\n// TODO: translations\nconst getTitleFromMessage = _ref => {\n  var _message$attachments, _message$user;\n  let {\n    currentUserId,\n    message\n  } = _ref;\n  const attachment = message === null || message === void 0 || (_message$attachments = message.attachments) === null || _message$attachments === void 0 ? void 0 : _message$attachments.at(0);\n  let attachmentIcon = '';\n  if (attachment) {\n    var _attachmentTypeIconMa, _attachment$type;\n    attachmentIcon += (_attachmentTypeIconMa = attachmentTypeIconMap[(_attachment$type = attachment.type) !== null && _attachment$type !== void 0 ? _attachment$type : 'file']) !== null && _attachmentTypeIconMa !== void 0 ? _attachmentTypeIconMa : attachmentTypeIconMap.file;\n  }\n  const messageBelongsToCurrentUser = (message === null || message === void 0 || (_message$user = message.user) === null || _message$user === void 0 ? void 0 : _message$user.id) === currentUserId;\n  if (message !== null && message !== void 0 && message.deleted_at && message.parent_id) return clsx(messageBelongsToCurrentUser && 'You:', 'This reply was deleted.');\n  if (message !== null && message !== void 0 && message.deleted_at && !message.parent_id) return clsx(messageBelongsToCurrentUser && 'You:', 'The source message was deleted.');\n  if ((attachment === null || attachment === void 0 ? void 0 : attachment.type) === 'voiceRecording') return clsx(attachmentIcon, messageBelongsToCurrentUser && 'You:', 'Voice message');\n  return clsx(attachmentIcon, messageBelongsToCurrentUser && 'You:', (message === null || message === void 0 ? void 0 : message.text) || (attachment === null || attachment === void 0 ? void 0 : attachment.fallback) || 'N/A');\n};\nexport const ThreadListItemUI = props => {\n  var _latestReply$user, _latestReply$user2, _client$user;\n  const {\n    client\n  } = useChatContext();\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const thread = useThreadListItemContext();\n  const selector = useCallback(nextValue => {\n    var _nextValue$read$clien;\n    return {\n      channel: nextValue.channel,\n      deletedAt: nextValue.deletedAt,\n      latestReply: nextValue.replies.at(-1),\n      ownUnreadMessageCount: client.userID && ((_nextValue$read$clien = nextValue.read[client.userID]) === null || _nextValue$read$clien === void 0 ? void 0 : _nextValue$read$clien.unreadMessageCount) || 0,\n      parentMessage: nextValue.parentMessage\n    };\n  }, [client]);\n  const {\n    channel,\n    deletedAt,\n    latestReply,\n    ownUnreadMessageCount,\n    parentMessage\n  } = useStateStore(thread.state, selector);\n  const {\n    displayTitle: channelDisplayTitle\n  } = useChannelPreviewInfo({\n    channel\n  });\n  const {\n    activeThread,\n    setActiveThread\n  } = useThreadsViewContext();\n  const avatarProps = deletedAt ? null : latestReply === null || latestReply === void 0 ? void 0 : latestReply.user;\n  return React.createElement(\"button\", _objectSpread({\n    \"aria-selected\": activeThread === thread,\n    className: 'str-chat__thread-list-item',\n    \"data-thread-id\": thread.id,\n    onClick: () => setActiveThread(thread),\n    role: 'option'\n  }, props), React.createElement(\"div\", {\n    className: 'str-chat__thread-list-item__channel'\n  }, React.createElement(Icon.MessageBubble, null), React.createElement(\"div\", {\n    className: 'str-chat__thread-list-item__channel-text'\n  }, channelDisplayTitle)), React.createElement(\"div\", {\n    className: 'str-chat__thread-list-item__parent-message'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__thread-list-item__parent-message-text'\n  }, \"replied to: \", getTitleFromMessage({\n    message: parentMessage\n  })), !deletedAt && React.createElement(UnreadCountBadge, {\n    count: ownUnreadMessageCount\n  })), React.createElement(\"div\", {\n    className: 'str-chat__thread-list-item__latest-reply'\n  }, React.createElement(Avatar, _objectSpread({}, avatarProps)), React.createElement(\"div\", {\n    className: 'str-chat__thread-list-item__latest-reply-details'\n  }, !deletedAt && React.createElement(\"div\", {\n    className: 'str-chat__thread-list-item__latest-reply-created-by'\n  }, (latestReply === null || latestReply === void 0 || (_latestReply$user = latestReply.user) === null || _latestReply$user === void 0 ? void 0 : _latestReply$user.name) || (latestReply === null || latestReply === void 0 || (_latestReply$user2 = latestReply.user) === null || _latestReply$user2 === void 0 ? void 0 : _latestReply$user2.id) || 'Unknown sender'), React.createElement(\"div\", {\n    className: 'str-chat__thread-list-item__latest-reply-text-and-timestamp'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__thread-list-item__latest-reply-text'\n  }, deletedAt ? 'This thread was deleted' : getTitleFromMessage({\n    currentUserId: (_client$user = client.user) === null || _client$user === void 0 ? void 0 : _client$user.id,\n    message: latestReply\n  })), React.createElement(\"div\", {\n    className: 'str-chat__thread-list-item__latest-reply-timestamp'\n  }, React.createElement(Timestamp, {\n    timestamp: deletedAt !== null && deletedAt !== void 0 ? deletedAt : latestReply === null || latestReply === void 0 ? void 0 : latestReply.created_at\n  }))))));\n};","map":{"version":3,"names":["React","useCallback","clsx","Timestamp","Avatar","Icon","UnreadCountBadge","useChannelPreviewInfo","useChatContext","useThreadsViewContext","useThreadListItemContext","useStateStore","attachmentTypeIconMap","audio","file","image","video","voiceRecording","getTitleFromMessage","_ref","_message$attachments","_message$user","currentUserId","message","attachment","attachments","at","attachmentIcon","_attachmentTypeIconMa","_attachment$type","type","messageBelongsToCurrentUser","user","id","deleted_at","parent_id","text","fallback","ThreadListItemUI","props","_latestReply$user","_latestReply$user2","_client$user","client","thread","selector","nextValue","_nextValue$read$clien","channel","deletedAt","latestReply","replies","ownUnreadMessageCount","userID","read","unreadMessageCount","parentMessage","state","displayTitle","channelDisplayTitle","activeThread","setActiveThread","avatarProps","createElement","_objectSpread","className","onClick","role","MessageBubble","count","name","timestamp","created_at"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/Threads/ThreadList/ThreadListItemUI.js"],"sourcesContent":["import React, { useCallback } from 'react';\nimport clsx from 'clsx';\nimport { Timestamp } from '../../Message/Timestamp';\nimport { Avatar } from '../../Avatar';\nimport { Icon } from '../icons';\nimport { UnreadCountBadge } from '../UnreadCountBadge';\nimport { useChannelPreviewInfo } from '../../ChannelPreview';\nimport { useChatContext } from '../../../context';\nimport { useThreadsViewContext } from '../../ChatView';\nimport { useThreadListItemContext } from './ThreadListItem';\nimport { useStateStore } from '../../../store';\n/**\n * TODO:\n * - maybe hover state? ask design\n */\nexport const attachmentTypeIconMap = {\n    audio: '🔈',\n    file: '📄',\n    image: '📷',\n    video: '🎥',\n    voiceRecording: '🎙️',\n};\n// TODO: translations\nconst getTitleFromMessage = ({ currentUserId, message, }) => {\n    const attachment = message?.attachments?.at(0);\n    let attachmentIcon = '';\n    if (attachment) {\n        attachmentIcon +=\n            attachmentTypeIconMap[attachment.type ?? 'file'] ?? attachmentTypeIconMap.file;\n    }\n    const messageBelongsToCurrentUser = message?.user?.id === currentUserId;\n    if (message?.deleted_at && message.parent_id)\n        return clsx(messageBelongsToCurrentUser && 'You:', 'This reply was deleted.');\n    if (message?.deleted_at && !message.parent_id)\n        return clsx(messageBelongsToCurrentUser && 'You:', 'The source message was deleted.');\n    if (attachment?.type === 'voiceRecording')\n        return clsx(attachmentIcon, messageBelongsToCurrentUser && 'You:', 'Voice message');\n    return clsx(attachmentIcon, messageBelongsToCurrentUser && 'You:', message?.text || attachment?.fallback || 'N/A');\n};\nexport const ThreadListItemUI = (props) => {\n    const { client } = useChatContext();\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const thread = useThreadListItemContext();\n    const selector = useCallback((nextValue) => ({\n        channel: nextValue.channel,\n        deletedAt: nextValue.deletedAt,\n        latestReply: nextValue.replies.at(-1),\n        ownUnreadMessageCount: (client.userID && nextValue.read[client.userID]?.unreadMessageCount) || 0,\n        parentMessage: nextValue.parentMessage,\n    }), [client]);\n    const { channel, deletedAt, latestReply, ownUnreadMessageCount, parentMessage } = useStateStore(thread.state, selector);\n    const { displayTitle: channelDisplayTitle } = useChannelPreviewInfo({ channel });\n    const { activeThread, setActiveThread } = useThreadsViewContext();\n    const avatarProps = deletedAt ? null : latestReply?.user;\n    return (React.createElement(\"button\", { \"aria-selected\": activeThread === thread, className: 'str-chat__thread-list-item', \"data-thread-id\": thread.id, onClick: () => setActiveThread(thread), role: 'option', ...props },\n        React.createElement(\"div\", { className: 'str-chat__thread-list-item__channel' },\n            React.createElement(Icon.MessageBubble, null),\n            React.createElement(\"div\", { className: 'str-chat__thread-list-item__channel-text' }, channelDisplayTitle)),\n        React.createElement(\"div\", { className: 'str-chat__thread-list-item__parent-message' },\n            React.createElement(\"div\", { className: 'str-chat__thread-list-item__parent-message-text' },\n                \"replied to: \",\n                getTitleFromMessage({ message: parentMessage })),\n            !deletedAt && React.createElement(UnreadCountBadge, { count: ownUnreadMessageCount })),\n        React.createElement(\"div\", { className: 'str-chat__thread-list-item__latest-reply' },\n            React.createElement(Avatar, { ...avatarProps }),\n            React.createElement(\"div\", { className: 'str-chat__thread-list-item__latest-reply-details' },\n                !deletedAt && (React.createElement(\"div\", { className: 'str-chat__thread-list-item__latest-reply-created-by' }, latestReply?.user?.name || latestReply?.user?.id || 'Unknown sender')),\n                React.createElement(\"div\", { className: 'str-chat__thread-list-item__latest-reply-text-and-timestamp' },\n                    React.createElement(\"div\", { className: 'str-chat__thread-list-item__latest-reply-text' }, deletedAt\n                        ? 'This thread was deleted'\n                        : getTitleFromMessage({\n                            currentUserId: client.user?.id,\n                            message: latestReply,\n                        })),\n                    React.createElement(\"div\", { className: 'str-chat__thread-list-item__latest-reply-timestamp' },\n                        React.createElement(Timestamp, { timestamp: deletedAt ?? latestReply?.created_at })))))));\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}