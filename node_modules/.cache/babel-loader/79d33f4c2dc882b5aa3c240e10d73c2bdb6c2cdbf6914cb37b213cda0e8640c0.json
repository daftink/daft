{"ast":null,"code":"import _objectSpread from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"canPin\", \"messageActions\", \"onlySenderCanEdit\", \"onUserClick\", \"onUserHover\", \"userRoles\"];\nimport React, { useCallback, useMemo } from 'react';\nimport { useActionHandler, useDeleteHandler, useEditHandler, useFlagHandler, useMarkUnreadHandler, useMentionsHandler, useMuteHandler, useOpenThreadHandler, usePinHandler, useReactionHandler, useReactionsFetcher, useRetryHandler, useUserHandler, useUserRole } from './hooks';\nimport { areMessagePropsEqual, getMessageActions, MESSAGE_ACTIONS } from './utils';\nimport { MessageProvider, useChannelActionContext, useChannelStateContext, useChatContext, useComponentContext } from '../../context';\nimport { MessageSimple as DefaultMessage } from './MessageSimple';\nconst MessageWithContext = props => {\n  var _ref;\n  const {\n    canPin,\n    groupedByUser,\n    Message: propMessage,\n    message,\n    messageActions = Object.keys(MESSAGE_ACTIONS),\n    onUserClick: propOnUserClick,\n    onUserHover: propOnUserHover,\n    userRoles\n  } = props;\n  const {\n    client,\n    isMessageAIGenerated\n  } = useChatContext('Message');\n  const {\n    channelConfig,\n    read\n  } = useChannelStateContext('Message');\n  const {\n    Message: contextMessage\n  } = useComponentContext('Message');\n  const actionsEnabled = message.type === 'regular' && message.status === 'received';\n  const MessageUIComponent = (_ref = propMessage !== null && propMessage !== void 0 ? propMessage : contextMessage) !== null && _ref !== void 0 ? _ref : DefaultMessage;\n  const {\n    clearEdit,\n    editing,\n    setEdit\n  } = useEditHandler();\n  const {\n    onUserClick,\n    onUserHover\n  } = useUserHandler(message, {\n    onUserClickHandler: propOnUserClick,\n    onUserHoverHandler: propOnUserHover\n  });\n  const {\n    canDelete,\n    canEdit,\n    canFlag,\n    canMarkUnread,\n    canMute,\n    canQuote,\n    canReact,\n    canReply,\n    isMyMessage\n  } = userRoles;\n  const messageIsUnread = useMemo(() => {\n    var _client$user;\n    return !!(!isMyMessage && (_client$user = client.user) !== null && _client$user !== void 0 && _client$user.id && read && (!read[client.user.id] || message !== null && message !== void 0 && message.created_at && new Date(message.created_at).getTime() > read[client.user.id].last_read.getTime()));\n  }, [client, isMyMessage, message.created_at, read]);\n  const messageActionsHandler = useCallback(() => getMessageActions(messageActions, {\n    canDelete,\n    canEdit,\n    canFlag,\n    canMarkUnread,\n    canMute,\n    canPin,\n    canQuote,\n    canReact,\n    canReply\n  }, channelConfig), [messageActions, canDelete, canEdit, canFlag, canMarkUnread, canMute, canPin, canQuote, canReact, canReply, channelConfig]);\n  const {\n      canPin: canPinPropToNotPass,\n      // eslint-disable-line @typescript-eslint/no-unused-vars\n      messageActions: messageActionsPropToNotPass,\n      // eslint-disable-line @typescript-eslint/no-unused-vars\n      onlySenderCanEdit: onlySenderCanEditPropToNotPass,\n      // eslint-disable-line @typescript-eslint/no-unused-vars\n      onUserClick: onUserClickPropToNotPass,\n      // eslint-disable-line @typescript-eslint/no-unused-vars\n      onUserHover: onUserHoverPropToNotPass,\n      // eslint-disable-line @typescript-eslint/no-unused-vars\n      userRoles: userRolesPropToNotPass // eslint-disable-line @typescript-eslint/no-unused-vars\n    } = props,\n    rest = _objectWithoutProperties(props, _excluded);\n  const messageContextValue = _objectSpread(_objectSpread({}, rest), {}, {\n    actionsEnabled,\n    clearEditingState: clearEdit,\n    editing,\n    getMessageActions: messageActionsHandler,\n    handleEdit: setEdit,\n    isMessageAIGenerated,\n    isMyMessage: () => isMyMessage,\n    messageIsUnread,\n    onUserClick,\n    onUserHover,\n    setEditingState: setEdit\n  });\n  return React.createElement(MessageProvider, {\n    value: messageContextValue\n  }, React.createElement(MessageUIComponent, {\n    groupedByUser: groupedByUser\n  }));\n};\nconst MemoizedMessage = React.memo(MessageWithContext, areMessagePropsEqual);\n/**\n * The Message component is a context provider which implements all the logic required for rendering\n * an individual message. The actual UI of the message is delegated via the Message prop on Channel.\n */\nexport const Message = props => {\n  const {\n    closeReactionSelectorOnClick,\n    disableQuotedMessages,\n    getDeleteMessageErrorNotification,\n    getFetchReactionsErrorNotification,\n    getFlagMessageErrorNotification,\n    getFlagMessageSuccessNotification,\n    getMarkMessageUnreadErrorNotification,\n    getMarkMessageUnreadSuccessNotification,\n    getMuteUserErrorNotification,\n    getMuteUserSuccessNotification,\n    getPinMessageErrorNotification,\n    message,\n    onlySenderCanEdit = false,\n    onMentionsClick: propOnMentionsClick,\n    onMentionsHover: propOnMentionsHover,\n    openThread: propOpenThread,\n    pinPermissions,\n    reactionDetailsSort,\n    retrySendMessage: propRetrySendMessage,\n    sortReactionDetails,\n    sortReactions\n  } = props;\n  const {\n    addNotification\n  } = useChannelActionContext('Message');\n  const {\n    highlightedMessageId,\n    mutes\n  } = useChannelStateContext('Message');\n  const handleAction = useActionHandler(message);\n  const handleOpenThread = useOpenThreadHandler(message, propOpenThread);\n  const handleReaction = useReactionHandler(message);\n  const handleRetry = useRetryHandler(propRetrySendMessage);\n  const userRoles = useUserRole(message, onlySenderCanEdit, disableQuotedMessages);\n  const handleFetchReactions = useReactionsFetcher(message, {\n    getErrorNotification: getFetchReactionsErrorNotification,\n    notify: addNotification\n  });\n  const handleDelete = useDeleteHandler(message, {\n    getErrorNotification: getDeleteMessageErrorNotification,\n    notify: addNotification\n  });\n  const handleFlag = useFlagHandler(message, {\n    getErrorNotification: getFlagMessageErrorNotification,\n    getSuccessNotification: getFlagMessageSuccessNotification,\n    notify: addNotification\n  });\n  const handleMarkUnread = useMarkUnreadHandler(message, {\n    getErrorNotification: getMarkMessageUnreadErrorNotification,\n    getSuccessNotification: getMarkMessageUnreadSuccessNotification,\n    notify: addNotification\n  });\n  const handleMute = useMuteHandler(message, {\n    getErrorNotification: getMuteUserErrorNotification,\n    getSuccessNotification: getMuteUserSuccessNotification,\n    notify: addNotification\n  });\n  const {\n    onMentionsClick,\n    onMentionsHover\n  } = useMentionsHandler(message, {\n    onMentionsClick: propOnMentionsClick,\n    onMentionsHover: propOnMentionsHover\n  });\n  const {\n    canPin,\n    handlePin\n  } = usePinHandler(message, pinPermissions, {\n    getErrorNotification: getPinMessageErrorNotification,\n    notify: addNotification\n  });\n  const highlighted = highlightedMessageId === message.id;\n  return React.createElement(MemoizedMessage, {\n    additionalMessageInputProps: props.additionalMessageInputProps,\n    autoscrollToBottom: props.autoscrollToBottom,\n    canPin: canPin,\n    closeReactionSelectorOnClick: closeReactionSelectorOnClick,\n    customMessageActions: props.customMessageActions,\n    disableQuotedMessages: props.disableQuotedMessages,\n    endOfGroup: props.endOfGroup,\n    firstOfGroup: props.firstOfGroup,\n    formatDate: props.formatDate,\n    groupedByUser: props.groupedByUser,\n    groupStyles: props.groupStyles,\n    handleAction: handleAction,\n    handleDelete: handleDelete,\n    handleFetchReactions: handleFetchReactions,\n    handleFlag: handleFlag,\n    handleMarkUnread: handleMarkUnread,\n    handleMute: handleMute,\n    handleOpenThread: handleOpenThread,\n    handlePin: handlePin,\n    handleReaction: handleReaction,\n    handleRetry: handleRetry,\n    highlighted: highlighted,\n    initialMessage: props.initialMessage,\n    lastReceivedId: props.lastReceivedId,\n    message: message,\n    Message: props.Message,\n    messageActions: props.messageActions,\n    messageListRect: props.messageListRect,\n    mutes: mutes,\n    onMentionsClickMessage: onMentionsClick,\n    onMentionsHoverMessage: onMentionsHover,\n    onUserClick: props.onUserClick,\n    onUserHover: props.onUserHover,\n    pinPermissions: props.pinPermissions,\n    reactionDetailsSort: reactionDetailsSort,\n    readBy: props.readBy,\n    renderText: props.renderText,\n    sortReactionDetails: sortReactionDetails,\n    sortReactions: sortReactions,\n    threadList: props.threadList,\n    unsafeHTML: props.unsafeHTML,\n    userRoles: userRoles\n  });\n};","map":{"version":3,"names":["React","useCallback","useMemo","useActionHandler","useDeleteHandler","useEditHandler","useFlagHandler","useMarkUnreadHandler","useMentionsHandler","useMuteHandler","useOpenThreadHandler","usePinHandler","useReactionHandler","useReactionsFetcher","useRetryHandler","useUserHandler","useUserRole","areMessagePropsEqual","getMessageActions","MESSAGE_ACTIONS","MessageProvider","useChannelActionContext","useChannelStateContext","useChatContext","useComponentContext","MessageSimple","DefaultMessage","MessageWithContext","props","_ref","canPin","groupedByUser","Message","propMessage","message","messageActions","Object","keys","onUserClick","propOnUserClick","onUserHover","propOnUserHover","userRoles","client","isMessageAIGenerated","channelConfig","read","contextMessage","actionsEnabled","type","status","MessageUIComponent","clearEdit","editing","setEdit","onUserClickHandler","onUserHoverHandler","canDelete","canEdit","canFlag","canMarkUnread","canMute","canQuote","canReact","canReply","isMyMessage","messageIsUnread","_client$user","user","id","created_at","Date","getTime","last_read","messageActionsHandler","canPinPropToNotPass","messageActionsPropToNotPass","onlySenderCanEdit","onlySenderCanEditPropToNotPass","onUserClickPropToNotPass","onUserHoverPropToNotPass","userRolesPropToNotPass","rest","_objectWithoutProperties","_excluded","messageContextValue","_objectSpread","clearEditingState","handleEdit","setEditingState","createElement","value","MemoizedMessage","memo","closeReactionSelectorOnClick","disableQuotedMessages","getDeleteMessageErrorNotification","getFetchReactionsErrorNotification","getFlagMessageErrorNotification","getFlagMessageSuccessNotification","getMarkMessageUnreadErrorNotification","getMarkMessageUnreadSuccessNotification","getMuteUserErrorNotification","getMuteUserSuccessNotification","getPinMessageErrorNotification","onMentionsClick","propOnMentionsClick","onMentionsHover","propOnMentionsHover","openThread","propOpenThread","pinPermissions","reactionDetailsSort","retrySendMessage","propRetrySendMessage","sortReactionDetails","sortReactions","addNotification","highlightedMessageId","mutes","handleAction","handleOpenThread","handleReaction","handleRetry","handleFetchReactions","getErrorNotification","notify","handleDelete","handleFlag","getSuccessNotification","handleMarkUnread","handleMute","handlePin","highlighted","additionalMessageInputProps","autoscrollToBottom","customMessageActions","endOfGroup","firstOfGroup","formatDate","groupStyles","initialMessage","lastReceivedId","messageListRect","onMentionsClickMessage","onMentionsHoverMessage","readBy","renderText","threadList","unsafeHTML"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/Message/Message.js"],"sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport { useActionHandler, useDeleteHandler, useEditHandler, useFlagHandler, useMarkUnreadHandler, useMentionsHandler, useMuteHandler, useOpenThreadHandler, usePinHandler, useReactionHandler, useReactionsFetcher, useRetryHandler, useUserHandler, useUserRole, } from './hooks';\nimport { areMessagePropsEqual, getMessageActions, MESSAGE_ACTIONS } from './utils';\nimport { MessageProvider, useChannelActionContext, useChannelStateContext, useChatContext, useComponentContext, } from '../../context';\nimport { MessageSimple as DefaultMessage } from './MessageSimple';\nconst MessageWithContext = (props) => {\n    const { canPin, groupedByUser, Message: propMessage, message, messageActions = Object.keys(MESSAGE_ACTIONS), onUserClick: propOnUserClick, onUserHover: propOnUserHover, userRoles, } = props;\n    const { client, isMessageAIGenerated } = useChatContext('Message');\n    const { channelConfig, read } = useChannelStateContext('Message');\n    const { Message: contextMessage } = useComponentContext('Message');\n    const actionsEnabled = message.type === 'regular' && message.status === 'received';\n    const MessageUIComponent = propMessage ?? contextMessage ?? DefaultMessage;\n    const { clearEdit, editing, setEdit } = useEditHandler();\n    const { onUserClick, onUserHover } = useUserHandler(message, {\n        onUserClickHandler: propOnUserClick,\n        onUserHoverHandler: propOnUserHover,\n    });\n    const { canDelete, canEdit, canFlag, canMarkUnread, canMute, canQuote, canReact, canReply, isMyMessage, } = userRoles;\n    const messageIsUnread = useMemo(() => !!(!isMyMessage &&\n        client.user?.id &&\n        read &&\n        (!read[client.user.id] ||\n            (message?.created_at &&\n                new Date(message.created_at).getTime() >\n                    read[client.user.id].last_read.getTime()))), [client, isMyMessage, message.created_at, read]);\n    const messageActionsHandler = useCallback(() => getMessageActions(messageActions, {\n        canDelete,\n        canEdit,\n        canFlag,\n        canMarkUnread,\n        canMute,\n        canPin,\n        canQuote,\n        canReact,\n        canReply,\n    }, channelConfig), [\n        messageActions,\n        canDelete,\n        canEdit,\n        canFlag,\n        canMarkUnread,\n        canMute,\n        canPin,\n        canQuote,\n        canReact,\n        canReply,\n        channelConfig,\n    ]);\n    const { canPin: canPinPropToNotPass, // eslint-disable-line @typescript-eslint/no-unused-vars\n    messageActions: messageActionsPropToNotPass, // eslint-disable-line @typescript-eslint/no-unused-vars\n    onlySenderCanEdit: onlySenderCanEditPropToNotPass, // eslint-disable-line @typescript-eslint/no-unused-vars\n    onUserClick: onUserClickPropToNotPass, // eslint-disable-line @typescript-eslint/no-unused-vars\n    onUserHover: onUserHoverPropToNotPass, // eslint-disable-line @typescript-eslint/no-unused-vars\n    userRoles: userRolesPropToNotPass, // eslint-disable-line @typescript-eslint/no-unused-vars\n    ...rest } = props;\n    const messageContextValue = {\n        ...rest,\n        actionsEnabled,\n        clearEditingState: clearEdit,\n        editing,\n        getMessageActions: messageActionsHandler,\n        handleEdit: setEdit,\n        isMessageAIGenerated,\n        isMyMessage: () => isMyMessage,\n        messageIsUnread,\n        onUserClick,\n        onUserHover,\n        setEditingState: setEdit,\n    };\n    return (React.createElement(MessageProvider, { value: messageContextValue },\n        React.createElement(MessageUIComponent, { groupedByUser: groupedByUser })));\n};\nconst MemoizedMessage = React.memo(MessageWithContext, areMessagePropsEqual);\n/**\n * The Message component is a context provider which implements all the logic required for rendering\n * an individual message. The actual UI of the message is delegated via the Message prop on Channel.\n */\nexport const Message = (props) => {\n    const { closeReactionSelectorOnClick, disableQuotedMessages, getDeleteMessageErrorNotification, getFetchReactionsErrorNotification, getFlagMessageErrorNotification, getFlagMessageSuccessNotification, getMarkMessageUnreadErrorNotification, getMarkMessageUnreadSuccessNotification, getMuteUserErrorNotification, getMuteUserSuccessNotification, getPinMessageErrorNotification, message, onlySenderCanEdit = false, onMentionsClick: propOnMentionsClick, onMentionsHover: propOnMentionsHover, openThread: propOpenThread, pinPermissions, reactionDetailsSort, retrySendMessage: propRetrySendMessage, sortReactionDetails, sortReactions, } = props;\n    const { addNotification } = useChannelActionContext('Message');\n    const { highlightedMessageId, mutes } = useChannelStateContext('Message');\n    const handleAction = useActionHandler(message);\n    const handleOpenThread = useOpenThreadHandler(message, propOpenThread);\n    const handleReaction = useReactionHandler(message);\n    const handleRetry = useRetryHandler(propRetrySendMessage);\n    const userRoles = useUserRole(message, onlySenderCanEdit, disableQuotedMessages);\n    const handleFetchReactions = useReactionsFetcher(message, {\n        getErrorNotification: getFetchReactionsErrorNotification,\n        notify: addNotification,\n    });\n    const handleDelete = useDeleteHandler(message, {\n        getErrorNotification: getDeleteMessageErrorNotification,\n        notify: addNotification,\n    });\n    const handleFlag = useFlagHandler(message, {\n        getErrorNotification: getFlagMessageErrorNotification,\n        getSuccessNotification: getFlagMessageSuccessNotification,\n        notify: addNotification,\n    });\n    const handleMarkUnread = useMarkUnreadHandler(message, {\n        getErrorNotification: getMarkMessageUnreadErrorNotification,\n        getSuccessNotification: getMarkMessageUnreadSuccessNotification,\n        notify: addNotification,\n    });\n    const handleMute = useMuteHandler(message, {\n        getErrorNotification: getMuteUserErrorNotification,\n        getSuccessNotification: getMuteUserSuccessNotification,\n        notify: addNotification,\n    });\n    const { onMentionsClick, onMentionsHover } = useMentionsHandler(message, {\n        onMentionsClick: propOnMentionsClick,\n        onMentionsHover: propOnMentionsHover,\n    });\n    const { canPin, handlePin } = usePinHandler(message, pinPermissions, {\n        getErrorNotification: getPinMessageErrorNotification,\n        notify: addNotification,\n    });\n    const highlighted = highlightedMessageId === message.id;\n    return (React.createElement(MemoizedMessage, { additionalMessageInputProps: props.additionalMessageInputProps, autoscrollToBottom: props.autoscrollToBottom, canPin: canPin, closeReactionSelectorOnClick: closeReactionSelectorOnClick, customMessageActions: props.customMessageActions, disableQuotedMessages: props.disableQuotedMessages, endOfGroup: props.endOfGroup, firstOfGroup: props.firstOfGroup, formatDate: props.formatDate, groupedByUser: props.groupedByUser, groupStyles: props.groupStyles, handleAction: handleAction, handleDelete: handleDelete, handleFetchReactions: handleFetchReactions, handleFlag: handleFlag, handleMarkUnread: handleMarkUnread, handleMute: handleMute, handleOpenThread: handleOpenThread, handlePin: handlePin, handleReaction: handleReaction, handleRetry: handleRetry, highlighted: highlighted, initialMessage: props.initialMessage, lastReceivedId: props.lastReceivedId, message: message, Message: props.Message, messageActions: props.messageActions, messageListRect: props.messageListRect, mutes: mutes, onMentionsClickMessage: onMentionsClick, onMentionsHoverMessage: onMentionsHover, onUserClick: props.onUserClick, onUserHover: props.onUserHover, pinPermissions: props.pinPermissions, reactionDetailsSort: reactionDetailsSort, readBy: props.readBy, renderText: props.renderText, sortReactionDetails: sortReactionDetails, sortReactions: sortReactions, threadList: props.threadList, unsafeHTML: props.unsafeHTML, userRoles: userRoles }));\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}