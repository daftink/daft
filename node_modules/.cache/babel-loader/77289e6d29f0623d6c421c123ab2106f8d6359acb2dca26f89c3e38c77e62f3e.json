{"ast":null,"code":"export class TranslationTopic {\n  constructor(options) {\n    this.options = options;\n    this.translators = new Map();\n    this.setTranslator = (name, translator) => {\n      this.translators.set(name, translator);\n    };\n    this.removeTranslator = name => {\n      this.translators.delete(name);\n    };\n    this.i18next = options.i18next;\n    if (options.translators) {\n      Object.entries(options.translators).forEach(_ref => {\n        let [name, translator] = _ref;\n        this.setTranslator(name, translator);\n      });\n    }\n  }\n}\nconst forwardTranslation = _ref2 => {\n  let {\n    value\n  } = _ref2;\n  return value;\n};\nexport class TranslationBuilder {\n  constructor(i18next) {\n    this.i18next = i18next;\n    this.topics = new Map();\n    // need to keep a registration buffer so that translators can be registered once a topic is registered\n    // what does not happen when Streami18n is instantiated but rather once Streami18n.init() is invoked\n    this.translatorRegistrationsBuffer = {};\n    this.registerTopic = (name, Topic) => {\n      let topic = this.topics.get(name);\n      if (!topic) {\n        topic = new Topic({\n          i18next: this.i18next\n        });\n        this.topics.set(name, topic);\n        this.i18next.use({\n          name,\n          process: (value, key, options) => {\n            const topic = this.topics.get(name);\n            if (!topic) return value;\n            return topic.translate(value, key, options);\n          },\n          type: 'postProcessor'\n        });\n      }\n      const additionalTranslatorsToRegister = this.translatorRegistrationsBuffer[name];\n      if (additionalTranslatorsToRegister) {\n        Object.entries(additionalTranslatorsToRegister).forEach(_ref3 => {\n          let [translatorName, translator] = _ref3;\n          topic.setTranslator(translatorName, translator);\n        });\n        delete this.translatorRegistrationsBuffer[name];\n      }\n      return topic;\n    };\n    this.disableTopic = topicName => {\n      const topic = this.topics.get(topicName);\n      if (!topic) return;\n      this.i18next.use({\n        name: topicName,\n        process: forwardTranslation,\n        type: 'postProcessor'\n      });\n      this.topics.delete(topicName);\n    };\n    this.getTopic = topicName => this.topics.get(topicName);\n  }\n  registerTranslators(topicName, translators) {\n    const topic = this.getTopic(topicName);\n    if (!topic) {\n      if (!this.translatorRegistrationsBuffer[topicName]) this.translatorRegistrationsBuffer[topicName] = {};\n      Object.entries(translators).forEach(_ref4 => {\n        let [translatorName, translator] = _ref4;\n        this.translatorRegistrationsBuffer[topicName][translatorName] = translator;\n      });\n      return;\n    }\n    Object.entries(translators).forEach(_ref5 => {\n      let [name, translator] = _ref5;\n      topic.setTranslator(name, translator);\n    });\n  }\n  removeTranslators(topicName, translators) {\n    const topic = this.getTopic(topicName);\n    if (this.translatorRegistrationsBuffer[topicName]) {\n      translators.forEach(translatorName => {\n        delete this.translatorRegistrationsBuffer[topicName][translatorName];\n      });\n    }\n    if (!topic) return;\n    translators.forEach(name => {\n      topic.removeTranslator(name);\n    });\n  }\n}","map":{"version":3,"names":["TranslationTopic","constructor","options","translators","Map","setTranslator","name","translator","set","removeTranslator","delete","i18next","Object","entries","forEach","_ref","forwardTranslation","_ref2","value","TranslationBuilder","topics","translatorRegistrationsBuffer","registerTopic","Topic","topic","get","use","process","key","translate","type","additionalTranslatorsToRegister","_ref3","translatorName","disableTopic","topicName","getTopic","registerTranslators","_ref4","_ref5","removeTranslators"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/i18n/TranslationBuilder/TranslationBuilder.js"],"sourcesContent":["export class TranslationTopic {\n    constructor(options) {\n        this.options = options;\n        this.translators = new Map();\n        this.setTranslator = (name, translator) => {\n            this.translators.set(name, translator);\n        };\n        this.removeTranslator = (name) => {\n            this.translators.delete(name);\n        };\n        this.i18next = options.i18next;\n        if (options.translators) {\n            Object.entries(options.translators).forEach(([name, translator]) => {\n                this.setTranslator(name, translator);\n            });\n        }\n    }\n}\nconst forwardTranslation = ({ value }) => value;\nexport class TranslationBuilder {\n    constructor(i18next) {\n        this.i18next = i18next;\n        this.topics = new Map();\n        // need to keep a registration buffer so that translators can be registered once a topic is registered\n        // what does not happen when Streami18n is instantiated but rather once Streami18n.init() is invoked\n        this.translatorRegistrationsBuffer = {};\n        this.registerTopic = (name, Topic) => {\n            let topic = this.topics.get(name);\n            if (!topic) {\n                topic = new Topic({ i18next: this.i18next });\n                this.topics.set(name, topic);\n                this.i18next.use({\n                    name,\n                    process: (value, key, options) => {\n                        const topic = this.topics.get(name);\n                        if (!topic)\n                            return value;\n                        return topic.translate(value, key, options);\n                    },\n                    type: 'postProcessor',\n                });\n            }\n            const additionalTranslatorsToRegister = this.translatorRegistrationsBuffer[name];\n            if (additionalTranslatorsToRegister) {\n                Object.entries(additionalTranslatorsToRegister).forEach(([translatorName, translator]) => {\n                    topic.setTranslator(translatorName, translator);\n                });\n                delete this.translatorRegistrationsBuffer[name];\n            }\n            return topic;\n        };\n        this.disableTopic = (topicName) => {\n            const topic = this.topics.get(topicName);\n            if (!topic)\n                return;\n            this.i18next.use({\n                name: topicName,\n                process: forwardTranslation,\n                type: 'postProcessor',\n            });\n            this.topics.delete(topicName);\n        };\n        this.getTopic = (topicName) => this.topics.get(topicName);\n    }\n    registerTranslators(topicName, translators) {\n        const topic = this.getTopic(topicName);\n        if (!topic) {\n            if (!this.translatorRegistrationsBuffer[topicName])\n                this.translatorRegistrationsBuffer[topicName] = {};\n            Object.entries(translators).forEach(([translatorName, translator]) => {\n                this.translatorRegistrationsBuffer[topicName][translatorName] = translator;\n            });\n            return;\n        }\n        Object.entries(translators).forEach(([name, translator]) => {\n            topic.setTranslator(name, translator);\n        });\n    }\n    removeTranslators(topicName, translators) {\n        const topic = this.getTopic(topicName);\n        if (this.translatorRegistrationsBuffer[topicName]) {\n            translators.forEach((translatorName) => {\n                delete this.translatorRegistrationsBuffer[topicName][translatorName];\n            });\n        }\n        if (!topic)\n            return;\n        translators.forEach((name) => {\n            topic.removeTranslator(name);\n        });\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}