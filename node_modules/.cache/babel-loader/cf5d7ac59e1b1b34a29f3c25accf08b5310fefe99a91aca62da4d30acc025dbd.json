{"ast":null,"code":"import _objectSpread from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport * as fileIconSet from './FileIconSet';\nimport { archiveFileTypes, codeFileTypes, excelMimeTypes, powerpointMimeTypes, wordMimeTypes } from './mimeTypes';\nfunction generateMimeTypeToIconMap(_ref) {\n  let {\n    FileArchiveIcon,\n    FileCodeIcon,\n    FileExcelIcon,\n    FilePdfIcon,\n    FilePowerPointIcon,\n    FileWordIcon\n  } = _ref;\n  const mimeTypeToIconMap = {\n    'application/pdf': FilePdfIcon\n  };\n  for (const type of wordMimeTypes) {\n    mimeTypeToIconMap[type] = FileWordIcon;\n  }\n  for (const type of excelMimeTypes) {\n    mimeTypeToIconMap[type] = FileExcelIcon;\n  }\n  for (const type of powerpointMimeTypes) {\n    mimeTypeToIconMap[type] = FilePowerPointIcon;\n  }\n  for (const type of archiveFileTypes) {\n    mimeTypeToIconMap[type] = FileArchiveIcon;\n  }\n  for (const type of codeFileTypes) {\n    mimeTypeToIconMap[type] = FileCodeIcon;\n  }\n  return mimeTypeToIconMap;\n}\nfunction generateGeneralTypeToIconMap(_ref2) {\n  let {\n    FileAltIcon,\n    FileAudioIcon,\n    FileImageIcon,\n    FileVideoIcon\n  } = _ref2;\n  return {\n    'audio/': FileAudioIcon,\n    'image/': FileImageIcon,\n    'text/': FileAltIcon,\n    'video/': FileVideoIcon\n  };\n}\nexport const iconMap = {\n  alt: _objectSpread(_objectSpread(_objectSpread({}, generateMimeTypeToIconMap({\n    FileArchiveIcon: fileIconSet.FileArchiveIconAlt,\n    FileCodeIcon: fileIconSet.FileCodeIconAlt,\n    FileExcelIcon: fileIconSet.FileExcelIconAlt,\n    FilePdfIcon: fileIconSet.FilePdfIcon,\n    FilePowerPointIcon: fileIconSet.FilePowerPointIconAlt,\n    FileWordIcon: fileIconSet.FileWordIconAlt\n  })), generateGeneralTypeToIconMap({\n    FileAltIcon: fileIconSet.FileFallbackIcon,\n    FileAudioIcon: fileIconSet.FileAudioIconAlt,\n    FileImageIcon: fileIconSet.FileImageIcon,\n    FileVideoIcon: fileIconSet.FileVideoIconAlt\n  })), {}, {\n    fallback: fileIconSet.FileFallbackIcon\n  }),\n  standard: _objectSpread(_objectSpread(_objectSpread({}, generateMimeTypeToIconMap({\n    FileArchiveIcon: fileIconSet.FileArchiveIcon,\n    FileCodeIcon: fileIconSet.FileCodeIcon,\n    FileExcelIcon: fileIconSet.FileExcelIcon,\n    FilePdfIcon: fileIconSet.FilePdfIcon,\n    FilePowerPointIcon: fileIconSet.FilePowerPointIcon,\n    FileWordIcon: fileIconSet.FileWordIcon\n  })), generateGeneralTypeToIconMap({\n    FileAltIcon: fileIconSet.FileFallbackIcon,\n    FileAudioIcon: fileIconSet.FileAudioIcon,\n    FileImageIcon: fileIconSet.FileImageIcon,\n    FileVideoIcon: fileIconSet.FileVideoIcon\n  })), {}, {\n    fallback: fileIconSet.FileFallbackIcon\n  })\n};","map":{"version":3,"names":["fileIconSet","archiveFileTypes","codeFileTypes","excelMimeTypes","powerpointMimeTypes","wordMimeTypes","generateMimeTypeToIconMap","_ref","FileArchiveIcon","FileCodeIcon","FileExcelIcon","FilePdfIcon","FilePowerPointIcon","FileWordIcon","mimeTypeToIconMap","type","generateGeneralTypeToIconMap","_ref2","FileAltIcon","FileAudioIcon","FileImageIcon","FileVideoIcon","iconMap","alt","_objectSpread","FileArchiveIconAlt","FileCodeIconAlt","FileExcelIconAlt","FilePowerPointIconAlt","FileWordIconAlt","FileFallbackIcon","FileAudioIconAlt","FileVideoIconAlt","fallback","standard"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/ReactFileUtilities/FileIcon/iconMap.js"],"sourcesContent":["import * as fileIconSet from './FileIconSet';\nimport { archiveFileTypes, codeFileTypes, excelMimeTypes, powerpointMimeTypes, wordMimeTypes, } from './mimeTypes';\nfunction generateMimeTypeToIconMap({ FileArchiveIcon, FileCodeIcon, FileExcelIcon, FilePdfIcon, FilePowerPointIcon, FileWordIcon, }) {\n    const mimeTypeToIconMap = {\n        'application/pdf': FilePdfIcon,\n    };\n    for (const type of wordMimeTypes) {\n        mimeTypeToIconMap[type] = FileWordIcon;\n    }\n    for (const type of excelMimeTypes) {\n        mimeTypeToIconMap[type] = FileExcelIcon;\n    }\n    for (const type of powerpointMimeTypes) {\n        mimeTypeToIconMap[type] = FilePowerPointIcon;\n    }\n    for (const type of archiveFileTypes) {\n        mimeTypeToIconMap[type] = FileArchiveIcon;\n    }\n    for (const type of codeFileTypes) {\n        mimeTypeToIconMap[type] = FileCodeIcon;\n    }\n    return mimeTypeToIconMap;\n}\nfunction generateGeneralTypeToIconMap({ FileAltIcon, FileAudioIcon, FileImageIcon, FileVideoIcon, }) {\n    return {\n        'audio/': FileAudioIcon,\n        'image/': FileImageIcon,\n        'text/': FileAltIcon,\n        'video/': FileVideoIcon,\n    };\n}\nexport const iconMap = {\n    alt: {\n        ...generateMimeTypeToIconMap({\n            FileArchiveIcon: fileIconSet.FileArchiveIconAlt,\n            FileCodeIcon: fileIconSet.FileCodeIconAlt,\n            FileExcelIcon: fileIconSet.FileExcelIconAlt,\n            FilePdfIcon: fileIconSet.FilePdfIcon,\n            FilePowerPointIcon: fileIconSet.FilePowerPointIconAlt,\n            FileWordIcon: fileIconSet.FileWordIconAlt,\n        }),\n        ...generateGeneralTypeToIconMap({\n            FileAltIcon: fileIconSet.FileFallbackIcon,\n            FileAudioIcon: fileIconSet.FileAudioIconAlt,\n            FileImageIcon: fileIconSet.FileImageIcon,\n            FileVideoIcon: fileIconSet.FileVideoIconAlt,\n        }),\n        fallback: fileIconSet.FileFallbackIcon,\n    },\n    standard: {\n        ...generateMimeTypeToIconMap({\n            FileArchiveIcon: fileIconSet.FileArchiveIcon,\n            FileCodeIcon: fileIconSet.FileCodeIcon,\n            FileExcelIcon: fileIconSet.FileExcelIcon,\n            FilePdfIcon: fileIconSet.FilePdfIcon,\n            FilePowerPointIcon: fileIconSet.FilePowerPointIcon,\n            FileWordIcon: fileIconSet.FileWordIcon,\n        }),\n        ...generateGeneralTypeToIconMap({\n            FileAltIcon: fileIconSet.FileFallbackIcon,\n            FileAudioIcon: fileIconSet.FileAudioIcon,\n            FileImageIcon: fileIconSet.FileImageIcon,\n            FileVideoIcon: fileIconSet.FileVideoIcon,\n        }),\n        fallback: fileIconSet.FileFallbackIcon,\n    },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}