{"ast":null,"code":"import _objectSpread from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { BehaviorSubject } from '../observable/BehaviorSubject';\nimport { Subject } from '../observable/Subject';\nimport { mergeDeepUndefined } from '../../../utils/mergeDeep';\nconst MAX_FREQUENCY_AMPLITUDE = 255;\nconst logError = e => e && console.error('[AMPLITUDE RECORDER ERROR]', e);\nconst rootMeanSquare = values => Math.sqrt(values.reduce((acc, val) => acc + Math.pow(val, 2), 0) / values.length);\nexport const DEFAULT_AMPLITUDE_RECORDER_CONFIG = {\n  analyserConfig: {\n    fftSize: 32,\n    maxDecibels: 0,\n    minDecibels: -100\n  },\n  sampleCount: 100,\n  samplingFrequencyMs: 60\n};\nexport var AmplitudeRecorderState;\n(function (AmplitudeRecorderState) {\n  AmplitudeRecorderState[\"CLOSED\"] = \"closed\";\n  AmplitudeRecorderState[\"RECORDING\"] = \"recording\";\n  AmplitudeRecorderState[\"STOPPED\"] = \"stopped\";\n})(AmplitudeRecorderState || (AmplitudeRecorderState = {}));\nexport class AmplitudeRecorder {\n  constructor(_ref) {\n    let {\n      config,\n      stream\n    } = _ref;\n    this.amplitudes = new BehaviorSubject([]);\n    this.state = new BehaviorSubject(undefined);\n    this.error = new Subject();\n    this.start = () => {\n      if (this.state.value === AmplitudeRecorderState.CLOSED) return;\n      if (!this.stream) {\n        throw new Error('Missing MediaStream instance. Cannot to start amplitude recording');\n      }\n      if (this.state.value === AmplitudeRecorderState.RECORDING) this.stop();\n      if (!this.analyserNode) {\n        if (!this.stream) return;\n        this.init();\n      }\n      this.state.next(AmplitudeRecorderState.RECORDING);\n      this.amplitudeSamplingInterval = setInterval(() => {\n        if (!(this.analyserNode && this.state.value === AmplitudeRecorderState.RECORDING)) return;\n        const frequencyBins = new Uint8Array(this.analyserNode.frequencyBinCount);\n        try {\n          this.analyserNode.getByteFrequencyData(frequencyBins);\n        } catch (e) {\n          logError(e);\n          this.error.next(e);\n          return;\n        }\n        const normalizedSignalStrength = rootMeanSquare(frequencyBins) / MAX_FREQUENCY_AMPLITUDE;\n        this.amplitudes.next([...this.amplitudes.value, normalizedSignalStrength]);\n      }, this.config.samplingFrequencyMs);\n    };\n    this.config = mergeDeepUndefined(_objectSpread({}, config), DEFAULT_AMPLITUDE_RECORDER_CONFIG);\n    this.stream = stream;\n  }\n  init() {\n    this.audioContext = new AudioContext();\n    this.analyserNode = this.audioContext.createAnalyser();\n    const {\n      analyserConfig\n    } = this.config;\n    this.analyserNode.fftSize = analyserConfig.fftSize;\n    this.analyserNode.maxDecibels = analyserConfig.maxDecibels;\n    this.analyserNode.minDecibels = analyserConfig.minDecibels;\n    this.microphone = this.audioContext.createMediaStreamSource(this.stream);\n    this.microphone.connect(this.analyserNode);\n  }\n  stop() {\n    clearInterval(this.amplitudeSamplingInterval);\n    this.amplitudeSamplingInterval = undefined;\n    this.state.next(AmplitudeRecorderState.STOPPED);\n  }\n  close() {\n    var _this$microphone, _this$analyserNode, _this$audioContext, _this$audioContext2;\n    if (this.state.value !== AmplitudeRecorderState.STOPPED) this.stop();\n    this.state.next(AmplitudeRecorderState.CLOSED);\n    this.amplitudes.next([]);\n    (_this$microphone = this.microphone) === null || _this$microphone === void 0 || _this$microphone.disconnect();\n    (_this$analyserNode = this.analyserNode) === null || _this$analyserNode === void 0 || _this$analyserNode.disconnect();\n    if (((_this$audioContext = this.audioContext) === null || _this$audioContext === void 0 ? void 0 : _this$audioContext.state) !== 'closed') (_this$audioContext2 = this.audioContext) === null || _this$audioContext2 === void 0 || _this$audioContext2.close();\n  }\n}","map":{"version":3,"names":["BehaviorSubject","Subject","mergeDeepUndefined","MAX_FREQUENCY_AMPLITUDE","logError","e","console","error","rootMeanSquare","values","Math","sqrt","reduce","acc","val","pow","length","DEFAULT_AMPLITUDE_RECORDER_CONFIG","analyserConfig","fftSize","maxDecibels","minDecibels","sampleCount","samplingFrequencyMs","AmplitudeRecorderState","AmplitudeRecorder","constructor","_ref","config","stream","amplitudes","state","undefined","start","value","CLOSED","Error","RECORDING","stop","analyserNode","init","next","amplitudeSamplingInterval","setInterval","frequencyBins","Uint8Array","frequencyBinCount","getByteFrequencyData","normalizedSignalStrength","_objectSpread","audioContext","AudioContext","createAnalyser","microphone","createMediaStreamSource","connect","clearInterval","STOPPED","close","_this$microphone","_this$analyserNode","_this$audioContext","_this$audioContext2","disconnect"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/MediaRecorder/classes/AmplitudeRecorder.js"],"sourcesContent":["import { BehaviorSubject } from '../observable/BehaviorSubject';\nimport { Subject } from '../observable/Subject';\nimport { mergeDeepUndefined } from '../../../utils/mergeDeep';\nconst MAX_FREQUENCY_AMPLITUDE = 255;\nconst logError = (e) => e && console.error('[AMPLITUDE RECORDER ERROR]', e);\nconst rootMeanSquare = (values) => Math.sqrt(values.reduce((acc, val) => acc + Math.pow(val, 2), 0) / values.length);\nexport const DEFAULT_AMPLITUDE_RECORDER_CONFIG = {\n    analyserConfig: {\n        fftSize: 32,\n        maxDecibels: 0,\n        minDecibels: -100,\n    },\n    sampleCount: 100,\n    samplingFrequencyMs: 60,\n};\nexport var AmplitudeRecorderState;\n(function (AmplitudeRecorderState) {\n    AmplitudeRecorderState[\"CLOSED\"] = \"closed\";\n    AmplitudeRecorderState[\"RECORDING\"] = \"recording\";\n    AmplitudeRecorderState[\"STOPPED\"] = \"stopped\";\n})(AmplitudeRecorderState || (AmplitudeRecorderState = {}));\nexport class AmplitudeRecorder {\n    constructor({ config, stream }) {\n        this.amplitudes = new BehaviorSubject([]);\n        this.state = new BehaviorSubject(undefined);\n        this.error = new Subject();\n        this.start = () => {\n            if (this.state.value === AmplitudeRecorderState.CLOSED)\n                return;\n            if (!this.stream) {\n                throw new Error('Missing MediaStream instance. Cannot to start amplitude recording');\n            }\n            if (this.state.value === AmplitudeRecorderState.RECORDING)\n                this.stop();\n            if (!this.analyserNode) {\n                if (!this.stream)\n                    return;\n                this.init();\n            }\n            this.state.next(AmplitudeRecorderState.RECORDING);\n            this.amplitudeSamplingInterval = setInterval(() => {\n                if (!(this.analyserNode && this.state.value === AmplitudeRecorderState.RECORDING))\n                    return;\n                const frequencyBins = new Uint8Array(this.analyserNode.frequencyBinCount);\n                try {\n                    this.analyserNode.getByteFrequencyData(frequencyBins);\n                }\n                catch (e) {\n                    logError(e);\n                    this.error.next(e);\n                    return;\n                }\n                const normalizedSignalStrength = rootMeanSquare(frequencyBins) / MAX_FREQUENCY_AMPLITUDE;\n                this.amplitudes.next([...this.amplitudes.value, normalizedSignalStrength]);\n            }, this.config.samplingFrequencyMs);\n        };\n        this.config = mergeDeepUndefined({ ...config }, DEFAULT_AMPLITUDE_RECORDER_CONFIG);\n        this.stream = stream;\n    }\n    init() {\n        this.audioContext = new AudioContext();\n        this.analyserNode = this.audioContext.createAnalyser();\n        const { analyserConfig } = this.config;\n        this.analyserNode.fftSize = analyserConfig.fftSize;\n        this.analyserNode.maxDecibels = analyserConfig.maxDecibels;\n        this.analyserNode.minDecibels = analyserConfig.minDecibels;\n        this.microphone = this.audioContext.createMediaStreamSource(this.stream);\n        this.microphone.connect(this.analyserNode);\n    }\n    stop() {\n        clearInterval(this.amplitudeSamplingInterval);\n        this.amplitudeSamplingInterval = undefined;\n        this.state.next(AmplitudeRecorderState.STOPPED);\n    }\n    close() {\n        if (this.state.value !== AmplitudeRecorderState.STOPPED)\n            this.stop();\n        this.state.next(AmplitudeRecorderState.CLOSED);\n        this.amplitudes.next([]);\n        this.microphone?.disconnect();\n        this.analyserNode?.disconnect();\n        if (this.audioContext?.state !== 'closed')\n            this.audioContext?.close();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}