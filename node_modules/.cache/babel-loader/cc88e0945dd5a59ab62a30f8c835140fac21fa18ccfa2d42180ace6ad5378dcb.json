{"ast":null,"code":"import _objectSpread from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { defaultPinPermissions, validateAndGetMessage } from '../utils';\nimport { useChannelActionContext } from '../../../context/ChannelActionContext';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nimport { useChatContext } from '../../../context/ChatContext';\nimport { useTranslationContext } from '../../../context/TranslationContext';\nexport const usePinHandler = function (message) {\n  let _permissions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultPinPermissions;\n  let notifications = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    getErrorNotification,\n    notify\n  } = notifications;\n  const {\n    updateMessage\n  } = useChannelActionContext('usePinHandler');\n  const {\n    channelCapabilities = {}\n  } = useChannelStateContext('usePinHandler');\n  const {\n    client\n  } = useChatContext('usePinHandler');\n  const {\n    t\n  } = useTranslationContext('usePinHandler');\n  const canPin = !!channelCapabilities['pin-message'];\n  const handlePin = async event => {\n    event.preventDefault();\n    if (!message) return;\n    if (!message.pinned) {\n      try {\n        const optimisticMessage = _objectSpread(_objectSpread({}, message), {}, {\n          pinned: true,\n          pinned_at: new Date(),\n          pinned_by: client.user\n        });\n        updateMessage(optimisticMessage);\n        await client.pinMessage(message);\n      } catch (e) {\n        const errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);\n        if (notify) notify(errorMessage || t('Error pinning message'), 'error');\n        updateMessage(message);\n      }\n    } else {\n      try {\n        const optimisticMessage = _objectSpread(_objectSpread({}, message), {}, {\n          pin_expires: null,\n          pinned: false,\n          pinned_at: null,\n          pinned_by: null\n        });\n        updateMessage(optimisticMessage);\n        await client.unpinMessage(message);\n      } catch (e) {\n        const errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);\n        if (notify) notify(errorMessage || t('Error removing message pin'), 'error');\n        updateMessage(message);\n      }\n    }\n  };\n  return {\n    canPin,\n    handlePin\n  };\n};","map":{"version":3,"names":["defaultPinPermissions","validateAndGetMessage","useChannelActionContext","useChannelStateContext","useChatContext","useTranslationContext","usePinHandler","message","_permissions","arguments","length","undefined","notifications","getErrorNotification","notify","updateMessage","channelCapabilities","client","t","canPin","handlePin","event","preventDefault","pinned","optimisticMessage","_objectSpread","pinned_at","Date","pinned_by","user","pinMessage","e","errorMessage","pin_expires","unpinMessage"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/Message/hooks/usePinHandler.js"],"sourcesContent":["import { defaultPinPermissions, validateAndGetMessage } from '../utils';\nimport { useChannelActionContext } from '../../../context/ChannelActionContext';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nimport { useChatContext } from '../../../context/ChatContext';\nimport { useTranslationContext } from '../../../context/TranslationContext';\nexport const usePinHandler = (message, \n// @deprecated in favor of `channelCapabilities` - TODO: remove in next major release\n_permissions = defaultPinPermissions, // eslint-disable-line\nnotifications = {}) => {\n    const { getErrorNotification, notify } = notifications;\n    const { updateMessage } = useChannelActionContext('usePinHandler');\n    const { channelCapabilities = {} } = useChannelStateContext('usePinHandler');\n    const { client } = useChatContext('usePinHandler');\n    const { t } = useTranslationContext('usePinHandler');\n    const canPin = !!channelCapabilities['pin-message'];\n    const handlePin = async (event) => {\n        event.preventDefault();\n        if (!message)\n            return;\n        if (!message.pinned) {\n            try {\n                const optimisticMessage = {\n                    ...message,\n                    pinned: true,\n                    pinned_at: new Date(),\n                    pinned_by: client.user,\n                };\n                updateMessage(optimisticMessage);\n                await client.pinMessage(message);\n            }\n            catch (e) {\n                const errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);\n                if (notify)\n                    notify(errorMessage || t('Error pinning message'), 'error');\n                updateMessage(message);\n            }\n        }\n        else {\n            try {\n                const optimisticMessage = {\n                    ...message,\n                    pin_expires: null,\n                    pinned: false,\n                    pinned_at: null,\n                    pinned_by: null,\n                };\n                updateMessage(optimisticMessage);\n                await client.unpinMessage(message);\n            }\n            catch (e) {\n                const errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);\n                if (notify)\n                    notify(errorMessage || t('Error removing message pin'), 'error');\n                updateMessage(message);\n            }\n        }\n    };\n    return { canPin, handlePin };\n};\n"],"mappings":";AAAA,SAASA,qBAAqB,EAAEC,qBAAqB,QAAQ,UAAU;AACvE,SAASC,uBAAuB,QAAQ,uCAAuC;AAC/E,SAASC,sBAAsB,QAAQ,sCAAsC;AAC7E,SAASC,cAAc,QAAQ,8BAA8B;AAC7D,SAASC,qBAAqB,QAAQ,qCAAqC;AAC3E,OAAO,MAAMC,aAAa,GAAG,SAAAA,CAACC,OAAO,EAGd;EAAA,IADvBC,YAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGT,qBAAqB;EAAA,IACpCY,aAAa,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EACd,MAAM;IAAEI,oBAAoB;IAAEC;EAAO,CAAC,GAAGF,aAAa;EACtD,MAAM;IAAEG;EAAc,CAAC,GAAGb,uBAAuB,CAAC,eAAe,CAAC;EAClE,MAAM;IAAEc,mBAAmB,GAAG,CAAC;EAAE,CAAC,GAAGb,sBAAsB,CAAC,eAAe,CAAC;EAC5E,MAAM;IAAEc;EAAO,CAAC,GAAGb,cAAc,CAAC,eAAe,CAAC;EAClD,MAAM;IAAEc;EAAE,CAAC,GAAGb,qBAAqB,CAAC,eAAe,CAAC;EACpD,MAAMc,MAAM,GAAG,CAAC,CAACH,mBAAmB,CAAC,aAAa,CAAC;EACnD,MAAMI,SAAS,GAAG,MAAOC,KAAK,IAAK;IAC/BA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB,IAAI,CAACf,OAAO,EACR;IACJ,IAAI,CAACA,OAAO,CAACgB,MAAM,EAAE;MACjB,IAAI;QACA,MAAMC,iBAAiB,GAAAC,aAAA,CAAAA,aAAA,KAChBlB,OAAO;UACVgB,MAAM,EAAE,IAAI;UACZG,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;UACrBC,SAAS,EAAEX,MAAM,CAACY;QAAI,EACzB;QACDd,aAAa,CAACS,iBAAiB,CAAC;QAChC,MAAMP,MAAM,CAACa,UAAU,CAACvB,OAAO,CAAC;MACpC,CAAC,CACD,OAAOwB,CAAC,EAAE;QACN,MAAMC,YAAY,GAAGnB,oBAAoB,IAAIZ,qBAAqB,CAACY,oBAAoB,EAAE,CAACN,OAAO,CAAC,CAAC;QACnG,IAAIO,MAAM,EACNA,MAAM,CAACkB,YAAY,IAAId,CAAC,CAAC,uBAAuB,CAAC,EAAE,OAAO,CAAC;QAC/DH,aAAa,CAACR,OAAO,CAAC;MAC1B;IACJ,CAAC,MACI;MACD,IAAI;QACA,MAAMiB,iBAAiB,GAAAC,aAAA,CAAAA,aAAA,KAChBlB,OAAO;UACV0B,WAAW,EAAE,IAAI;UACjBV,MAAM,EAAE,KAAK;UACbG,SAAS,EAAE,IAAI;UACfE,SAAS,EAAE;QAAI,EAClB;QACDb,aAAa,CAACS,iBAAiB,CAAC;QAChC,MAAMP,MAAM,CAACiB,YAAY,CAAC3B,OAAO,CAAC;MACtC,CAAC,CACD,OAAOwB,CAAC,EAAE;QACN,MAAMC,YAAY,GAAGnB,oBAAoB,IAAIZ,qBAAqB,CAACY,oBAAoB,EAAE,CAACN,OAAO,CAAC,CAAC;QACnG,IAAIO,MAAM,EACNA,MAAM,CAACkB,YAAY,IAAId,CAAC,CAAC,4BAA4B,CAAC,EAAE,OAAO,CAAC;QACpEH,aAAa,CAACR,OAAO,CAAC;MAC1B;IACJ;EACJ,CAAC;EACD,OAAO;IAAEY,MAAM;IAAEC;EAAU,CAAC;AAChC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}