{"ast":null,"code":"import { visit } from 'unist-util-visit';\nimport { u } from 'unist-builder';\nconst visitor = (node, index, parent) => {\n  if (!(index && parent && node.position)) return;\n  const prevSibling = parent.children.at(index - 1);\n  if (!(prevSibling !== null && prevSibling !== void 0 && prevSibling.position)) return;\n  if (node.position.start.line === prevSibling.position.start.line) return;\n  const ownStartLine = node.position.start.line;\n  const prevEndLine = prevSibling.position.end.line;\n  // the -1 is adjustment for the single line break into which multiple line breaks are converted\n  const countTruncatedLineBreaks = ownStartLine - prevEndLine - 1;\n  if (countTruncatedLineBreaks < 1) return;\n  const lineBreaks = Array.from({\n    length: countTruncatedLineBreaks\n  }, () => u('break', {\n    tagName: 'br'\n  }));\n  parent.children = [...parent.children.slice(0, index), ...lineBreaks, ...parent.children.slice(index)];\n  return;\n};\nconst transform = tree => {\n  visit(tree, visitor);\n};\nexport const keepLineBreaksPlugin = () => transform;","map":{"version":3,"names":["visit","u","visitor","node","index","parent","position","prevSibling","children","at","start","line","ownStartLine","prevEndLine","end","countTruncatedLineBreaks","lineBreaks","Array","from","length","tagName","slice","transform","tree","keepLineBreaksPlugin"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/Message/renderText/remarkPlugins/keepLineBreaksPlugin.js"],"sourcesContent":["import { visit } from 'unist-util-visit';\nimport { u } from 'unist-builder';\nconst visitor = (node, index, parent) => {\n    if (!(index && parent && node.position))\n        return;\n    const prevSibling = parent.children.at(index - 1);\n    if (!prevSibling?.position)\n        return;\n    if (node.position.start.line === prevSibling.position.start.line)\n        return;\n    const ownStartLine = node.position.start.line;\n    const prevEndLine = prevSibling.position.end.line;\n    // the -1 is adjustment for the single line break into which multiple line breaks are converted\n    const countTruncatedLineBreaks = ownStartLine - prevEndLine - 1;\n    if (countTruncatedLineBreaks < 1)\n        return;\n    const lineBreaks = Array.from({ length: countTruncatedLineBreaks }, () => u('break', { tagName: 'br' }));\n    parent.children = [\n        ...parent.children.slice(0, index),\n        ...lineBreaks,\n        ...parent.children.slice(index),\n    ];\n    return;\n};\nconst transform = (tree) => {\n    visit(tree, visitor);\n};\nexport const keepLineBreaksPlugin = () => transform;\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,kBAAkB;AACxC,SAASC,CAAC,QAAQ,eAAe;AACjC,MAAMC,OAAO,GAAGA,CAACC,IAAI,EAAEC,KAAK,EAAEC,MAAM,KAAK;EACrC,IAAI,EAAED,KAAK,IAAIC,MAAM,IAAIF,IAAI,CAACG,QAAQ,CAAC,EACnC;EACJ,MAAMC,WAAW,GAAGF,MAAM,CAACG,QAAQ,CAACC,EAAE,CAACL,KAAK,GAAG,CAAC,CAAC;EACjD,IAAI,EAACG,WAAW,aAAXA,WAAW,eAAXA,WAAW,CAAED,QAAQ,GACtB;EACJ,IAAIH,IAAI,CAACG,QAAQ,CAACI,KAAK,CAACC,IAAI,KAAKJ,WAAW,CAACD,QAAQ,CAACI,KAAK,CAACC,IAAI,EAC5D;EACJ,MAAMC,YAAY,GAAGT,IAAI,CAACG,QAAQ,CAACI,KAAK,CAACC,IAAI;EAC7C,MAAME,WAAW,GAAGN,WAAW,CAACD,QAAQ,CAACQ,GAAG,CAACH,IAAI;EACjD;EACA,MAAMI,wBAAwB,GAAGH,YAAY,GAAGC,WAAW,GAAG,CAAC;EAC/D,IAAIE,wBAAwB,GAAG,CAAC,EAC5B;EACJ,MAAMC,UAAU,GAAGC,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAEJ;EAAyB,CAAC,EAAE,MAAMd,CAAC,CAAC,OAAO,EAAE;IAAEmB,OAAO,EAAE;EAAK,CAAC,CAAC,CAAC;EACxGf,MAAM,CAACG,QAAQ,GAAG,CACd,GAAGH,MAAM,CAACG,QAAQ,CAACa,KAAK,CAAC,CAAC,EAAEjB,KAAK,CAAC,EAClC,GAAGY,UAAU,EACb,GAAGX,MAAM,CAACG,QAAQ,CAACa,KAAK,CAACjB,KAAK,CAAC,CAClC;EACD;AACJ,CAAC;AACD,MAAMkB,SAAS,GAAIC,IAAI,IAAK;EACxBvB,KAAK,CAACuB,IAAI,EAAErB,OAAO,CAAC;AACxB,CAAC;AACD,OAAO,MAAMsB,oBAAoB,GAAGA,CAAA,KAAMF,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}