{"ast":null,"code":"import { validateAndGetMessage } from '../utils';\nimport { useChannelActionContext } from '../../../context/ChannelActionContext';\nimport { useChatContext } from '../../../context/ChatContext';\nimport { useTranslationContext } from '../../../context/TranslationContext';\nexport const useDeleteHandler = function (message) {\n  let notifications = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    getErrorNotification,\n    notify\n  } = notifications;\n  const {\n    deleteMessage,\n    updateMessage\n  } = useChannelActionContext('useDeleteHandler');\n  const {\n    client\n  } = useChatContext('useDeleteHandler');\n  const {\n    t\n  } = useTranslationContext('useDeleteHandler');\n  return async event => {\n    event.preventDefault();\n    if (!(message !== null && message !== void 0 && message.id) || !client || !updateMessage) {\n      return;\n    }\n    try {\n      const deletedMessage = await deleteMessage(message);\n      updateMessage(deletedMessage);\n    } catch (e) {\n      const errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);\n      if (notify) notify(errorMessage || t('Error deleting message'), 'error');\n    }\n  };\n};","map":{"version":3,"names":["validateAndGetMessage","useChannelActionContext","useChatContext","useTranslationContext","useDeleteHandler","message","notifications","arguments","length","undefined","getErrorNotification","notify","deleteMessage","updateMessage","client","t","event","preventDefault","id","deletedMessage","e","errorMessage"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/Message/hooks/useDeleteHandler.js"],"sourcesContent":["import { validateAndGetMessage } from '../utils';\nimport { useChannelActionContext } from '../../../context/ChannelActionContext';\nimport { useChatContext } from '../../../context/ChatContext';\nimport { useTranslationContext } from '../../../context/TranslationContext';\nexport const useDeleteHandler = (message, notifications = {}) => {\n    const { getErrorNotification, notify } = notifications;\n    const { deleteMessage, updateMessage } = useChannelActionContext('useDeleteHandler');\n    const { client } = useChatContext('useDeleteHandler');\n    const { t } = useTranslationContext('useDeleteHandler');\n    return async (event) => {\n        event.preventDefault();\n        if (!message?.id || !client || !updateMessage) {\n            return;\n        }\n        try {\n            const deletedMessage = await deleteMessage(message);\n            updateMessage(deletedMessage);\n        }\n        catch (e) {\n            const errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);\n            if (notify)\n                notify(errorMessage || t('Error deleting message'), 'error');\n        }\n    };\n};\n"],"mappings":"AAAA,SAASA,qBAAqB,QAAQ,UAAU;AAChD,SAASC,uBAAuB,QAAQ,uCAAuC;AAC/E,SAASC,cAAc,QAAQ,8BAA8B;AAC7D,SAASC,qBAAqB,QAAQ,qCAAqC;AAC3E,OAAO,MAAMC,gBAAgB,GAAG,SAAAA,CAACC,OAAO,EAAyB;EAAA,IAAvBC,aAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EACxD,MAAM;IAAEG,oBAAoB;IAAEC;EAAO,CAAC,GAAGL,aAAa;EACtD,MAAM;IAAEM,aAAa;IAAEC;EAAc,CAAC,GAAGZ,uBAAuB,CAAC,kBAAkB,CAAC;EACpF,MAAM;IAAEa;EAAO,CAAC,GAAGZ,cAAc,CAAC,kBAAkB,CAAC;EACrD,MAAM;IAAEa;EAAE,CAAC,GAAGZ,qBAAqB,CAAC,kBAAkB,CAAC;EACvD,OAAO,MAAOa,KAAK,IAAK;IACpBA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB,IAAI,EAACZ,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEa,EAAE,KAAI,CAACJ,MAAM,IAAI,CAACD,aAAa,EAAE;MAC3C;IACJ;IACA,IAAI;MACA,MAAMM,cAAc,GAAG,MAAMP,aAAa,CAACP,OAAO,CAAC;MACnDQ,aAAa,CAACM,cAAc,CAAC;IACjC,CAAC,CACD,OAAOC,CAAC,EAAE;MACN,MAAMC,YAAY,GAAGX,oBAAoB,IAAIV,qBAAqB,CAACU,oBAAoB,EAAE,CAACL,OAAO,CAAC,CAAC;MACnG,IAAIM,MAAM,EACNA,MAAM,CAACU,YAAY,IAAIN,CAAC,CAAC,wBAAwB,CAAC,EAAE,OAAO,CAAC;IACpE;EACJ,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}