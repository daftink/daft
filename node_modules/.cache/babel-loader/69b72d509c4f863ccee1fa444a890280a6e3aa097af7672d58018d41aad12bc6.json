{"ast":null,"code":"import { useEffect } from 'react';\nimport uniqBy from 'lodash.uniqby';\nimport { getChannel } from '../../../utils/getChannel';\nimport { useChatContext } from '../../../context/ChatContext';\nexport const useNotificationAddedToChannelListener = function (setChannels, customHandler) {\n  let allowNewMessagesFromUnfilteredChannels = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  const {\n    client\n  } = useChatContext('useNotificationAddedToChannelListener');\n  useEffect(() => {\n    const handleEvent = async event => {\n      var _event$channel;\n      if (customHandler && typeof customHandler === 'function') {\n        customHandler(setChannels, event);\n      } else if (allowNewMessagesFromUnfilteredChannels && (_event$channel = event.channel) !== null && _event$channel !== void 0 && _event$channel.type) {\n        var _event$channel$member;\n        const channel = await getChannel({\n          client,\n          id: event.channel.id,\n          members: (_event$channel$member = event.channel.members) === null || _event$channel$member === void 0 ? void 0 : _event$channel$member.reduce((acc, _ref) => {\n            let {\n              user,\n              user_id\n            } = _ref;\n            const userId = user_id || (user === null || user === void 0 ? void 0 : user.id);\n            if (userId) {\n              acc.push(userId);\n            }\n            return acc;\n          }, []),\n          type: event.channel.type\n        });\n        setChannels(channels => uniqBy([channel, ...channels], 'cid'));\n      }\n    };\n    client.on('notification.added_to_channel', handleEvent);\n    return () => {\n      client.off('notification.added_to_channel', handleEvent);\n    };\n  }, [allowNewMessagesFromUnfilteredChannels, client, customHandler, setChannels]);\n};","map":{"version":3,"names":["useEffect","uniqBy","getChannel","useChatContext","useNotificationAddedToChannelListener","setChannels","customHandler","allowNewMessagesFromUnfilteredChannels","arguments","length","undefined","client","handleEvent","event","_event$channel","channel","type","_event$channel$member","id","members","reduce","acc","_ref","user","user_id","userId","push","channels","on","off"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/ChannelList/hooks/useNotificationAddedToChannelListener.js"],"sourcesContent":["import { useEffect } from 'react';\nimport uniqBy from 'lodash.uniqby';\nimport { getChannel } from '../../../utils/getChannel';\nimport { useChatContext } from '../../../context/ChatContext';\nexport const useNotificationAddedToChannelListener = (setChannels, customHandler, allowNewMessagesFromUnfilteredChannels = true) => {\n    const { client } = useChatContext('useNotificationAddedToChannelListener');\n    useEffect(() => {\n        const handleEvent = async (event) => {\n            if (customHandler && typeof customHandler === 'function') {\n                customHandler(setChannels, event);\n            }\n            else if (allowNewMessagesFromUnfilteredChannels && event.channel?.type) {\n                const channel = await getChannel({\n                    client,\n                    id: event.channel.id,\n                    members: event.channel.members?.reduce((acc, { user, user_id }) => {\n                        const userId = user_id || user?.id;\n                        if (userId) {\n                            acc.push(userId);\n                        }\n                        return acc;\n                    }, []),\n                    type: event.channel.type,\n                });\n                setChannels((channels) => uniqBy([channel, ...channels], 'cid'));\n            }\n        };\n        client.on('notification.added_to_channel', handleEvent);\n        return () => {\n            client.off('notification.added_to_channel', handleEvent);\n        };\n    }, [allowNewMessagesFromUnfilteredChannels, client, customHandler, setChannels]);\n};\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,OAAOC,MAAM,MAAM,eAAe;AAClC,SAASC,UAAU,QAAQ,2BAA2B;AACtD,SAASC,cAAc,QAAQ,8BAA8B;AAC7D,OAAO,MAAMC,qCAAqC,GAAG,SAAAA,CAACC,WAAW,EAAEC,aAAa,EAAoD;EAAA,IAAlDC,sCAAsC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAC3H,MAAM;IAAEG;EAAO,CAAC,GAAGR,cAAc,CAAC,uCAAuC,CAAC;EAC1EH,SAAS,CAAC,MAAM;IACZ,MAAMY,WAAW,GAAG,MAAOC,KAAK,IAAK;MAAA,IAAAC,cAAA;MACjC,IAAIR,aAAa,IAAI,OAAOA,aAAa,KAAK,UAAU,EAAE;QACtDA,aAAa,CAACD,WAAW,EAAEQ,KAAK,CAAC;MACrC,CAAC,MACI,IAAIN,sCAAsC,KAAAO,cAAA,GAAID,KAAK,CAACE,OAAO,cAAAD,cAAA,eAAbA,cAAA,CAAeE,IAAI,EAAE;QAAA,IAAAC,qBAAA;QACpE,MAAMF,OAAO,GAAG,MAAMb,UAAU,CAAC;UAC7BS,MAAM;UACNO,EAAE,EAAEL,KAAK,CAACE,OAAO,CAACG,EAAE;UACpBC,OAAO,GAAAF,qBAAA,GAAEJ,KAAK,CAACE,OAAO,CAACI,OAAO,cAAAF,qBAAA,uBAArBA,qBAAA,CAAuBG,MAAM,CAAC,CAACC,GAAG,EAAAC,IAAA,KAAwB;YAAA,IAAtB;cAAEC,IAAI;cAAEC;YAAQ,CAAC,GAAAF,IAAA;YAC1D,MAAMG,MAAM,GAAGD,OAAO,KAAID,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEL,EAAE;YAClC,IAAIO,MAAM,EAAE;cACRJ,GAAG,CAACK,IAAI,CAACD,MAAM,CAAC;YACpB;YACA,OAAOJ,GAAG;UACd,CAAC,EAAE,EAAE,CAAC;UACNL,IAAI,EAAEH,KAAK,CAACE,OAAO,CAACC;QACxB,CAAC,CAAC;QACFX,WAAW,CAAEsB,QAAQ,IAAK1B,MAAM,CAAC,CAACc,OAAO,EAAE,GAAGY,QAAQ,CAAC,EAAE,KAAK,CAAC,CAAC;MACpE;IACJ,CAAC;IACDhB,MAAM,CAACiB,EAAE,CAAC,+BAA+B,EAAEhB,WAAW,CAAC;IACvD,OAAO,MAAM;MACTD,MAAM,CAACkB,GAAG,CAAC,+BAA+B,EAAEjB,WAAW,CAAC;IAC5D,CAAC;EACL,CAAC,EAAE,CAACL,sCAAsC,EAAEI,MAAM,EAAEL,aAAa,EAAED,WAAW,CAAC,CAAC;AACpF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}