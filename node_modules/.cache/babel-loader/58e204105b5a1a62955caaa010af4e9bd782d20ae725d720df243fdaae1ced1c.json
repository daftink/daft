{"ast":null,"code":"import _objectSpread from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { defaultDateTimeParser, defaultTranslatorFunction, isLanguageSupported, Streami18n } from '../../../i18n';\nexport const useChat = _ref => {\n  var _client$user$mutes, _client$user, _client$user3;\n  let {\n    client,\n    defaultLanguage = 'en',\n    i18nInstance,\n    initialNavOpen\n  } = _ref;\n  const [translators, setTranslators] = useState({\n    t: defaultTranslatorFunction,\n    tDateTimeParser: defaultDateTimeParser,\n    userLanguage: 'en'\n  });\n  const [channel, setChannel] = useState();\n  const [mutes, setMutes] = useState([]);\n  const [navOpen, setNavOpen] = useState(initialNavOpen);\n  const [latestMessageDatesByChannels, setLatestMessageDatesByChannels] = useState({});\n  const clientMutes = (_client$user$mutes = (_client$user = client.user) === null || _client$user === void 0 ? void 0 : _client$user.mutes) !== null && _client$user$mutes !== void 0 ? _client$user$mutes : [];\n  const closeMobileNav = () => setNavOpen(false);\n  const openMobileNav = () => setTimeout(() => setNavOpen(true), 100);\n  const appSettings = useRef(null);\n  const getAppSettings = () => {\n    if (appSettings.current) {\n      return appSettings.current;\n    }\n    appSettings.current = client.getAppSettings();\n    return appSettings.current;\n  };\n  useEffect(() => {\n    if (!client) return;\n    const version = \"13.2.1\";\n    const userAgent = client.getUserAgent();\n    if (!userAgent.includes('stream-chat-react')) {\n      // result looks like: 'stream-chat-react-2.3.2-stream-chat-javascript-client-browser-2.2.2'\n      // the upper-case text between double underscores is replaced with the actual semantic version of the library\n      client.setUserAgent(\"stream-chat-react-\".concat(version, \"-\").concat(userAgent));\n    }\n    client.threads.registerSubscriptions();\n    client.polls.registerSubscriptions();\n    client.reminders.registerSubscriptions();\n    client.reminders.initTimers();\n    return () => {\n      client.threads.unregisterSubscriptions();\n      client.polls.unregisterSubscriptions();\n      client.reminders.unregisterSubscriptions();\n      client.reminders.clearTimers();\n    };\n  }, [client]);\n  useEffect(() => {\n    setMutes(clientMutes);\n    const handleEvent = event => {\n      var _event$me;\n      setMutes(((_event$me = event.me) === null || _event$me === void 0 ? void 0 : _event$me.mutes) || []);\n    };\n    client.on('notification.mutes_updated', handleEvent);\n    return () => client.off('notification.mutes_updated', handleEvent);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clientMutes === null || clientMutes === void 0 ? void 0 : clientMutes.length]);\n  useEffect(() => {\n    var _client$user2;\n    let userLanguage = (_client$user2 = client.user) === null || _client$user2 === void 0 ? void 0 : _client$user2.language;\n    if (!userLanguage) {\n      const browserLanguage = window.navigator.language.slice(0, 2); // just get language code, not country-specific version\n      userLanguage = isLanguageSupported(browserLanguage) ? browserLanguage : defaultLanguage;\n    }\n    const streami18n = i18nInstance || new Streami18n({\n      language: userLanguage\n    });\n    streami18n.registerSetLanguageCallback(t => setTranslators(prevTranslator => _objectSpread(_objectSpread({}, prevTranslator), {}, {\n      t\n    })));\n    streami18n.getTranslators().then(translator => {\n      setTranslators(_objectSpread(_objectSpread({}, translator), {}, {\n        userLanguage: userLanguage || defaultLanguage\n      }));\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [i18nInstance]);\n  const setActiveChannel = useCallback(async function (activeChannel) {\n    let watchers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let event = arguments.length > 2 ? arguments[2] : undefined;\n    if (event && event.preventDefault) event.preventDefault();\n    if (activeChannel && Object.keys(watchers).length) {\n      await activeChannel.query({\n        watch: true,\n        watchers\n      });\n    }\n    setChannel(activeChannel);\n    closeMobileNav();\n  }, []);\n  useEffect(() => {\n    setLatestMessageDatesByChannels({});\n  }, [(_client$user3 = client.user) === null || _client$user3 === void 0 ? void 0 : _client$user3.id]);\n  return {\n    channel,\n    closeMobileNav,\n    getAppSettings,\n    latestMessageDatesByChannels,\n    mutes,\n    navOpen,\n    openMobileNav,\n    setActiveChannel,\n    translators\n  };\n};","map":{"version":3,"names":["useCallback","useEffect","useRef","useState","defaultDateTimeParser","defaultTranslatorFunction","isLanguageSupported","Streami18n","useChat","_ref","_client$user$mutes","_client$user","_client$user3","client","defaultLanguage","i18nInstance","initialNavOpen","translators","setTranslators","t","tDateTimeParser","userLanguage","channel","setChannel","mutes","setMutes","navOpen","setNavOpen","latestMessageDatesByChannels","setLatestMessageDatesByChannels","clientMutes","user","closeMobileNav","openMobileNav","setTimeout","appSettings","getAppSettings","current","version","userAgent","getUserAgent","includes","setUserAgent","concat","threads","registerSubscriptions","polls","reminders","initTimers","unregisterSubscriptions","clearTimers","handleEvent","event","_event$me","me","on","off","length","_client$user2","language","browserLanguage","window","navigator","slice","streami18n","registerSetLanguageCallback","prevTranslator","_objectSpread","getTranslators","then","translator","setActiveChannel","activeChannel","watchers","arguments","undefined","preventDefault","Object","keys","query","watch","id"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/Chat/hooks/useChat.js"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\nimport { defaultDateTimeParser, defaultTranslatorFunction, isLanguageSupported, Streami18n, } from '../../../i18n';\nexport const useChat = ({ client, defaultLanguage = 'en', i18nInstance, initialNavOpen, }) => {\n    const [translators, setTranslators] = useState({\n        t: defaultTranslatorFunction,\n        tDateTimeParser: defaultDateTimeParser,\n        userLanguage: 'en',\n    });\n    const [channel, setChannel] = useState();\n    const [mutes, setMutes] = useState([]);\n    const [navOpen, setNavOpen] = useState(initialNavOpen);\n    const [latestMessageDatesByChannels, setLatestMessageDatesByChannels] = useState({});\n    const clientMutes = client.user?.mutes ?? [];\n    const closeMobileNav = () => setNavOpen(false);\n    const openMobileNav = () => setTimeout(() => setNavOpen(true), 100);\n    const appSettings = useRef(null);\n    const getAppSettings = () => {\n        if (appSettings.current) {\n            return appSettings.current;\n        }\n        appSettings.current = client.getAppSettings();\n        return appSettings.current;\n    };\n    useEffect(() => {\n        if (!client)\n            return;\n        const version = \"13.2.1\";\n        const userAgent = client.getUserAgent();\n        if (!userAgent.includes('stream-chat-react')) {\n            // result looks like: 'stream-chat-react-2.3.2-stream-chat-javascript-client-browser-2.2.2'\n            // the upper-case text between double underscores is replaced with the actual semantic version of the library\n            client.setUserAgent(`stream-chat-react-${version}-${userAgent}`);\n        }\n        client.threads.registerSubscriptions();\n        client.polls.registerSubscriptions();\n        client.reminders.registerSubscriptions();\n        client.reminders.initTimers();\n        return () => {\n            client.threads.unregisterSubscriptions();\n            client.polls.unregisterSubscriptions();\n            client.reminders.unregisterSubscriptions();\n            client.reminders.clearTimers();\n        };\n    }, [client]);\n    useEffect(() => {\n        setMutes(clientMutes);\n        const handleEvent = (event) => {\n            setMutes(event.me?.mutes || []);\n        };\n        client.on('notification.mutes_updated', handleEvent);\n        return () => client.off('notification.mutes_updated', handleEvent);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [clientMutes?.length]);\n    useEffect(() => {\n        let userLanguage = client.user?.language;\n        if (!userLanguage) {\n            const browserLanguage = window.navigator.language.slice(0, 2); // just get language code, not country-specific version\n            userLanguage = isLanguageSupported(browserLanguage)\n                ? browserLanguage\n                : defaultLanguage;\n        }\n        const streami18n = i18nInstance || new Streami18n({ language: userLanguage });\n        streami18n.registerSetLanguageCallback((t) => setTranslators((prevTranslator) => ({ ...prevTranslator, t })));\n        streami18n.getTranslators().then((translator) => {\n            setTranslators({\n                ...translator,\n                userLanguage: userLanguage || defaultLanguage,\n            });\n        });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [i18nInstance]);\n    const setActiveChannel = useCallback(async (activeChannel, watchers = {}, event) => {\n        if (event && event.preventDefault)\n            event.preventDefault();\n        if (activeChannel && Object.keys(watchers).length) {\n            await activeChannel.query({ watch: true, watchers });\n        }\n        setChannel(activeChannel);\n        closeMobileNav();\n    }, []);\n    useEffect(() => {\n        setLatestMessageDatesByChannels({});\n    }, [client.user?.id]);\n    return {\n        channel,\n        closeMobileNav,\n        getAppSettings,\n        latestMessageDatesByChannels,\n        mutes,\n        navOpen,\n        openMobileNav,\n        setActiveChannel,\n        translators,\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}