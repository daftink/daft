{"ast":null,"code":"import { useCallback, useMemo } from 'react';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim';\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst noop = () => {};\nexport function useStateStore(store, selector) {\n  const wrappedSubscription = useCallback(onStoreChange => {\n    const unsubscribe = store === null || store === void 0 ? void 0 : store.subscribeWithSelector(selector, onStoreChange);\n    return unsubscribe !== null && unsubscribe !== void 0 ? unsubscribe : noop;\n  }, [store, selector]);\n  const wrappedSnapshot = useMemo(() => {\n    let cachedTuple;\n    return () => {\n      const currentValue = store === null || store === void 0 ? void 0 : store.getLatestValue();\n      if (!currentValue) return undefined;\n      // store value hasn't changed, no need to compare individual values\n      if (cachedTuple && cachedTuple[0] === currentValue) {\n        return cachedTuple[1];\n      }\n      const newlySelected = selector(currentValue);\n      // store value changed but selected values wouldn't have to, double-check selected\n      if (cachedTuple) {\n        let selectededAreEqualToCached = true;\n        for (const key in cachedTuple[1]) {\n          if (cachedTuple[1][key] === newlySelected[key]) continue;\n          selectededAreEqualToCached = false;\n          break;\n        }\n        if (selectededAreEqualToCached) return cachedTuple[1];\n      }\n      cachedTuple = [currentValue, newlySelected];\n      return cachedTuple[1];\n    };\n  }, [store, selector]);\n  const state = useSyncExternalStore(wrappedSubscription, wrappedSnapshot);\n  return state;\n}","map":{"version":3,"names":["useCallback","useMemo","useSyncExternalStore","noop","useStateStore","store","selector","wrappedSubscription","onStoreChange","unsubscribe","subscribeWithSelector","wrappedSnapshot","cachedTuple","currentValue","getLatestValue","undefined","newlySelected","selectededAreEqualToCached","key","state"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/store/hooks/useStateStore.js"],"sourcesContent":["import { useCallback, useMemo } from 'react';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim';\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst noop = () => { };\nexport function useStateStore(store, selector) {\n    const wrappedSubscription = useCallback((onStoreChange) => {\n        const unsubscribe = store?.subscribeWithSelector(selector, onStoreChange);\n        return unsubscribe ?? noop;\n    }, [store, selector]);\n    const wrappedSnapshot = useMemo(() => {\n        let cachedTuple;\n        return () => {\n            const currentValue = store?.getLatestValue();\n            if (!currentValue)\n                return undefined;\n            // store value hasn't changed, no need to compare individual values\n            if (cachedTuple && cachedTuple[0] === currentValue) {\n                return cachedTuple[1];\n            }\n            const newlySelected = selector(currentValue);\n            // store value changed but selected values wouldn't have to, double-check selected\n            if (cachedTuple) {\n                let selectededAreEqualToCached = true;\n                for (const key in cachedTuple[1]) {\n                    if (cachedTuple[1][key] === newlySelected[key])\n                        continue;\n                    selectededAreEqualToCached = false;\n                    break;\n                }\n                if (selectededAreEqualToCached)\n                    return cachedTuple[1];\n            }\n            cachedTuple = [currentValue, newlySelected];\n            return cachedTuple[1];\n        };\n    }, [store, selector]);\n    const state = useSyncExternalStore(wrappedSubscription, wrappedSnapshot);\n    return state;\n}\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,OAAO,QAAQ,OAAO;AAC5C,SAASC,oBAAoB,QAAQ,8BAA8B;AACnE;AACA,MAAMC,IAAI,GAAGA,CAAA,KAAM,CAAE,CAAC;AACtB,OAAO,SAASC,aAAaA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EAC3C,MAAMC,mBAAmB,GAAGP,WAAW,CAAEQ,aAAa,IAAK;IACvD,MAAMC,WAAW,GAAGJ,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEK,qBAAqB,CAACJ,QAAQ,EAAEE,aAAa,CAAC;IACzE,OAAOC,WAAW,aAAXA,WAAW,cAAXA,WAAW,GAAIN,IAAI;EAC9B,CAAC,EAAE,CAACE,KAAK,EAAEC,QAAQ,CAAC,CAAC;EACrB,MAAMK,eAAe,GAAGV,OAAO,CAAC,MAAM;IAClC,IAAIW,WAAW;IACf,OAAO,MAAM;MACT,MAAMC,YAAY,GAAGR,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAES,cAAc,CAAC,CAAC;MAC5C,IAAI,CAACD,YAAY,EACb,OAAOE,SAAS;MACpB;MACA,IAAIH,WAAW,IAAIA,WAAW,CAAC,CAAC,CAAC,KAAKC,YAAY,EAAE;QAChD,OAAOD,WAAW,CAAC,CAAC,CAAC;MACzB;MACA,MAAMI,aAAa,GAAGV,QAAQ,CAACO,YAAY,CAAC;MAC5C;MACA,IAAID,WAAW,EAAE;QACb,IAAIK,0BAA0B,GAAG,IAAI;QACrC,KAAK,MAAMC,GAAG,IAAIN,WAAW,CAAC,CAAC,CAAC,EAAE;UAC9B,IAAIA,WAAW,CAAC,CAAC,CAAC,CAACM,GAAG,CAAC,KAAKF,aAAa,CAACE,GAAG,CAAC,EAC1C;UACJD,0BAA0B,GAAG,KAAK;UAClC;QACJ;QACA,IAAIA,0BAA0B,EAC1B,OAAOL,WAAW,CAAC,CAAC,CAAC;MAC7B;MACAA,WAAW,GAAG,CAACC,YAAY,EAAEG,aAAa,CAAC;MAC3C,OAAOJ,WAAW,CAAC,CAAC,CAAC;IACzB,CAAC;EACL,CAAC,EAAE,CAACP,KAAK,EAAEC,QAAQ,CAAC,CAAC;EACrB,MAAMa,KAAK,GAAGjB,oBAAoB,CAACK,mBAAmB,EAAEI,eAAe,CAAC;EACxE,OAAOQ,KAAK;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}