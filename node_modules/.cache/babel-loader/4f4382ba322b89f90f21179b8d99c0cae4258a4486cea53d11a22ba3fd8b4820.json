{"ast":null,"code":"import _objectSpread from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/tmp/daft-chat-temp/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"attachments\"];\nimport React, { useMemo } from 'react';\nimport { isAudioAttachment, isFileAttachment, isImageAttachment, isScrapedContent, isVideoAttachment, isVoiceRecordingAttachment } from 'stream-chat';\nimport { AudioContainer, CardContainer, FileContainer, GalleryContainer, ImageContainer, MediaContainer, UnsupportedAttachmentContainer, VoiceRecordingContainer } from './AttachmentContainer';\nimport { SUPPORTED_VIDEO_FORMATS } from './utils';\nconst CONTAINER_MAP = {\n  audio: AudioContainer,\n  card: CardContainer,\n  file: FileContainer,\n  media: MediaContainer,\n  unsupported: UnsupportedAttachmentContainer,\n  voiceRecording: VoiceRecordingContainer\n};\nexport const ATTACHMENT_GROUPS_ORDER = ['card', 'gallery', 'image', 'media', 'audio', 'voiceRecording', 'file', 'unsupported'];\n/**\n * A component used for rendering message attachments. By default, the component supports: AttachmentActions, Audio, Card, File, Gallery, Image, and Video\n */\nexport const Attachment = props => {\n  const {\n    attachments\n  } = props;\n  const groupedAttachments = useMemo(() => renderGroupedAttachments(props),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [attachments]);\n  return React.createElement(\"div\", {\n    className: 'str-chat__attachment-list'\n  }, ATTACHMENT_GROUPS_ORDER.reduce((acc, groupName) => [...acc, ...groupedAttachments[groupName]], []));\n};\nconst renderGroupedAttachments = _ref => {\n  let {\n      attachments\n    } = _ref,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  const uploadedImages = attachments.filter(attachment => isImageAttachment(attachment));\n  const containers = attachments.filter(attachment => !isImageAttachment(attachment)).reduce((typeMap, attachment) => {\n    const attachmentType = getAttachmentType(attachment);\n    const Container = CONTAINER_MAP[attachmentType];\n    typeMap[attachmentType].push(React.createElement(Container, _objectSpread(_objectSpread({\n      key: \"\".concat(attachmentType, \"-\").concat(typeMap[attachmentType].length)\n    }, rest), {}, {\n      attachment: attachment\n    })));\n    return typeMap;\n  }, {\n    audio: [],\n    card: [],\n    file: [],\n    media: [],\n    unsupported: [],\n    // not used in reduce\n    // eslint-disable-next-line sort-keys\n    image: [],\n    // eslint-disable-next-line sort-keys\n    gallery: [],\n    voiceRecording: []\n  });\n  if (uploadedImages.length > 1) {\n    containers['gallery'] = [React.createElement(GalleryContainer, _objectSpread(_objectSpread({\n      key: 'gallery-container'\n    }, rest), {}, {\n      attachment: {\n        images: uploadedImages,\n        type: 'gallery'\n      }\n    }))];\n  } else if (uploadedImages.length === 1) {\n    containers['image'] = [React.createElement(ImageContainer, _objectSpread(_objectSpread({\n      key: 'image-container'\n    }, rest), {}, {\n      attachment: uploadedImages[0]\n    }))];\n  }\n  return containers;\n};\nconst getAttachmentType = attachment => {\n  if (isScrapedContent(attachment)) {\n    return 'card';\n  } else if (isVideoAttachment(attachment, SUPPORTED_VIDEO_FORMATS)) {\n    return 'media';\n  } else if (isAudioAttachment(attachment)) {\n    return 'audio';\n  } else if (isVoiceRecordingAttachment(attachment)) {\n    return 'voiceRecording';\n  } else if (isFileAttachment(attachment, SUPPORTED_VIDEO_FORMATS)) {\n    return 'file';\n  }\n  return 'unsupported';\n};","map":{"version":3,"names":["React","useMemo","isAudioAttachment","isFileAttachment","isImageAttachment","isScrapedContent","isVideoAttachment","isVoiceRecordingAttachment","AudioContainer","CardContainer","FileContainer","GalleryContainer","ImageContainer","MediaContainer","UnsupportedAttachmentContainer","VoiceRecordingContainer","SUPPORTED_VIDEO_FORMATS","CONTAINER_MAP","audio","card","file","media","unsupported","voiceRecording","ATTACHMENT_GROUPS_ORDER","Attachment","props","attachments","groupedAttachments","renderGroupedAttachments","createElement","className","reduce","acc","groupName","_ref","rest","_objectWithoutProperties","_excluded","uploadedImages","filter","attachment","containers","typeMap","attachmentType","getAttachmentType","Container","push","_objectSpread","key","concat","length","image","gallery","images","type"],"sources":["/tmp/daft-chat-temp/node_modules/stream-chat-react/dist/components/Attachment/Attachment.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { isAudioAttachment, isFileAttachment, isImageAttachment, isScrapedContent, isVideoAttachment, isVoiceRecordingAttachment, } from 'stream-chat';\nimport { AudioContainer, CardContainer, FileContainer, GalleryContainer, ImageContainer, MediaContainer, UnsupportedAttachmentContainer, VoiceRecordingContainer, } from './AttachmentContainer';\nimport { SUPPORTED_VIDEO_FORMATS } from './utils';\nconst CONTAINER_MAP = {\n    audio: AudioContainer,\n    card: CardContainer,\n    file: FileContainer,\n    media: MediaContainer,\n    unsupported: UnsupportedAttachmentContainer,\n    voiceRecording: VoiceRecordingContainer,\n};\nexport const ATTACHMENT_GROUPS_ORDER = [\n    'card',\n    'gallery',\n    'image',\n    'media',\n    'audio',\n    'voiceRecording',\n    'file',\n    'unsupported',\n];\n/**\n * A component used for rendering message attachments. By default, the component supports: AttachmentActions, Audio, Card, File, Gallery, Image, and Video\n */\nexport const Attachment = (props) => {\n    const { attachments } = props;\n    const groupedAttachments = useMemo(() => renderGroupedAttachments(props), \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [attachments]);\n    return (React.createElement(\"div\", { className: 'str-chat__attachment-list' }, ATTACHMENT_GROUPS_ORDER.reduce((acc, groupName) => [...acc, ...groupedAttachments[groupName]], [])));\n};\nconst renderGroupedAttachments = ({ attachments, ...rest }) => {\n    const uploadedImages = attachments.filter((attachment) => isImageAttachment(attachment));\n    const containers = attachments\n        .filter((attachment) => !isImageAttachment(attachment))\n        .reduce((typeMap, attachment) => {\n        const attachmentType = getAttachmentType(attachment);\n        const Container = CONTAINER_MAP[attachmentType];\n        typeMap[attachmentType].push(React.createElement(Container, { key: `${attachmentType}-${typeMap[attachmentType].length}`, ...rest, attachment: attachment }));\n        return typeMap;\n    }, {\n        audio: [],\n        card: [],\n        file: [],\n        media: [],\n        unsupported: [],\n        // not used in reduce\n        // eslint-disable-next-line sort-keys\n        image: [],\n        // eslint-disable-next-line sort-keys\n        gallery: [],\n        voiceRecording: [],\n    });\n    if (uploadedImages.length > 1) {\n        containers['gallery'] = [\n            React.createElement(GalleryContainer, { key: 'gallery-container', ...rest, attachment: {\n                    images: uploadedImages,\n                    type: 'gallery',\n                } }),\n        ];\n    }\n    else if (uploadedImages.length === 1) {\n        containers['image'] = [\n            React.createElement(ImageContainer, { key: 'image-container', ...rest, attachment: uploadedImages[0] }),\n        ];\n    }\n    return containers;\n};\nconst getAttachmentType = (attachment) => {\n    if (isScrapedContent(attachment)) {\n        return 'card';\n    }\n    else if (isVideoAttachment(attachment, SUPPORTED_VIDEO_FORMATS)) {\n        return 'media';\n    }\n    else if (isAudioAttachment(attachment)) {\n        return 'audio';\n    }\n    else if (isVoiceRecordingAttachment(attachment)) {\n        return 'voiceRecording';\n    }\n    else if (isFileAttachment(attachment, SUPPORTED_VIDEO_FORMATS)) {\n        return 'file';\n    }\n    return 'unsupported';\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}